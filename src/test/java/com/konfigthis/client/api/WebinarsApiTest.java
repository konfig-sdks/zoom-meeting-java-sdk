/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.io.File;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.RecurrenceWebinarProperty;
import java.net.URI;
import com.konfigthis.client.model.WebinarsAddPanelistsRequest;
import com.konfigthis.client.model.WebinarsAddPanelistsRequestPanelistsInner;
import com.konfigthis.client.model.WebinarsAddPanelistsResponse;
import com.konfigthis.client.model.WebinarsAddRegistrantRequest;
import com.konfigthis.client.model.WebinarsAddRegistrantRequestCustomQuestionsInner;
import com.konfigthis.client.model.WebinarsAddRegistrantResponse;
import com.konfigthis.client.model.WebinarsCreateBatchRegistrantsRequest;
import com.konfigthis.client.model.WebinarsCreateBatchRegistrantsRequestRegistrantsInner;
import com.konfigthis.client.model.WebinarsCreateBatchRegistrantsResponse;
import com.konfigthis.client.model.WebinarsCreateBrandingNameTagRequest;
import com.konfigthis.client.model.WebinarsCreateBrandingNameTagResponse;
import com.konfigthis.client.model.WebinarsCreateInviteLinksRequest;
import com.konfigthis.client.model.WebinarsCreateInviteLinksRequestAttendeesInner;
import com.konfigthis.client.model.WebinarsCreateInviteLinksResponse;
import com.konfigthis.client.model.WebinarsCreatePollRequest;
import com.konfigthis.client.model.WebinarsCreatePollRequestQuestionsInner;
import com.konfigthis.client.model.WebinarsCreatePollResponse;
import com.konfigthis.client.model.WebinarsCreateWebinarRequest;
import com.konfigthis.client.model.WebinarsCreateWebinarRequestSettings;
import com.konfigthis.client.model.WebinarsCreateWebinarRequestTrackingFieldsInner;
import com.konfigthis.client.model.WebinarsCreateWebinarResponse;
import com.konfigthis.client.model.WebinarsCreateWebinarTemplateRequest;
import com.konfigthis.client.model.WebinarsCreateWebinarTemplateResponse;
import com.konfigthis.client.model.WebinarsGetDetailsResponse;
import com.konfigthis.client.model.WebinarsGetJoinTokenLocalRecordingResponse;
import com.konfigthis.client.model.WebinarsGetLiveStreamDetailsResponse;
import com.konfigthis.client.model.WebinarsGetMeetingArchiveTokenForLocalArchivingResponse;
import com.konfigthis.client.model.WebinarsGetPollDetailsResponse;
import com.konfigthis.client.model.WebinarsGetSessionBrandingResponse;
import com.konfigthis.client.model.WebinarsGetSipUriWithPasscodeRequest;
import com.konfigthis.client.model.WebinarsGetSipUriWithPasscodeResponse;
import com.konfigthis.client.model.WebinarsGetSurveyResponse;
import com.konfigthis.client.model.WebinarsGetWebinarTokenResponse;
import com.konfigthis.client.model.WebinarsJoinTokenLiveStreamingResponse;
import com.konfigthis.client.model.WebinarsListAbsenteesResponse;
import com.konfigthis.client.model.WebinarsListPanelistsResponse;
import com.konfigthis.client.model.WebinarsListParticipantsResponse;
import com.konfigthis.client.model.WebinarsListPastInstancesResponse;
import com.konfigthis.client.model.WebinarsListPastWebinarQaResponse;
import com.konfigthis.client.model.WebinarsListPollResultsResponse;
import com.konfigthis.client.model.WebinarsListPollsResponse;
import com.konfigthis.client.model.WebinarsListRegistrantsResponse;
import com.konfigthis.client.model.WebinarsListRegistrationQuestionsResponse;
import com.konfigthis.client.model.WebinarsListTrackingSourcesResponse;
import com.konfigthis.client.model.WebinarsListWebinarTemplatesResponse;
import com.konfigthis.client.model.WebinarsListWebinarsResponse;
import com.konfigthis.client.model.WebinarsRegistrantDetailsResponse;
import com.konfigthis.client.model.WebinarsUpdateBrandingNameTagRequest;
import com.konfigthis.client.model.WebinarsUpdateLiveStreamRequest;
import com.konfigthis.client.model.WebinarsUpdateLiveStreamStatusRequest;
import com.konfigthis.client.model.WebinarsUpdateLiveStreamStatusRequestSettings;
import com.konfigthis.client.model.WebinarsUpdatePollRequest;
import com.konfigthis.client.model.WebinarsUpdatePollRequestQuestionsInner;
import com.konfigthis.client.model.WebinarsUpdateRegistrantStatusRequest;
import com.konfigthis.client.model.WebinarsUpdateRegistrantStatusRequestRegistrantsInner;
import com.konfigthis.client.model.WebinarsUpdateRegistrationQuestionsRequest;
import com.konfigthis.client.model.WebinarsUpdateRegistrationQuestionsRequestCustomQuestionsInner;
import com.konfigthis.client.model.WebinarsUpdateRegistrationQuestionsRequestQuestionsInner;
import com.konfigthis.client.model.WebinarsUpdateScheduledWebinarRequest;
import com.konfigthis.client.model.WebinarsUpdateScheduledWebinarRequestRecurrence;
import com.konfigthis.client.model.WebinarsUpdateScheduledWebinarRequestSettings;
import com.konfigthis.client.model.WebinarsUpdateScheduledWebinarRequestTrackingFieldsInner;
import com.konfigthis.client.model.WebinarsUpdateStatusRequest;
import com.konfigthis.client.model.WebinarsUpdateSurveyRequest;
import com.konfigthis.client.model.WebinarsUpdateSurveyRequestCustomSurvey;
import com.konfigthis.client.model.WebinarsUploadBrandingVirtualBackgroundRequest;
import com.konfigthis.client.model.WebinarsUploadBrandingVirtualBackgroundResponse;
import com.konfigthis.client.model.WebinarsUploadBrandingWallpaperRequest;
import com.konfigthis.client.model.WebinarsUploadBrandingWallpaperResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebinarsApi
 */
@Disabled
public class WebinarsApiTest {

    private static WebinarsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WebinarsApi(apiClient);
    }

    /**
     * Add panelists
     *
     * Panelists in a webinar can view and send video, screen share, annotate, and do much more compared to attendees in a webinar.    [Add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.           **Prerequisites:** * Pro or a higher plan with the [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPanelistsTest() throws ApiException {
        Long webinarId = null;
        List<WebinarsAddPanelistsRequestPanelistsInner> panelists = null;
        WebinarsAddPanelistsResponse response = api.addPanelists(webinarId)
                .panelists(panelists)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a webinar registrant
     *
     * Create and submit a user&#39;s registration for a webinar. Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow hosts to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addRegistrantTest() throws ApiException {
        String firstName = null;
        String email = null;
        Long webinarId = null;
        String lastName = null;
        String address = null;
        String city = null;
        String state = null;
        String zip = null;
        String country = null;
        String phone = null;
        String comments = null;
        List<WebinarsAddRegistrantRequestCustomQuestionsInner> customQuestions = null;
        String industry = null;
        String jobTitle = null;
        String noOfEmployees = null;
        String org = null;
        String purchasingTimeFrame = null;
        String roleInPurchaseProcess = null;
        String language = null;
        String sourceId = null;
        String occurrenceIds = null;
        WebinarsAddRegistrantResponse response = api.addRegistrant(firstName, email, webinarId)
                .lastName(lastName)
                .address(address)
                .city(city)
                .state(state)
                .zip(zip)
                .country(country)
                .phone(phone)
                .comments(comments)
                .customQuestions(customQuestions)
                .industry(industry)
                .jobTitle(jobTitle)
                .noOfEmployees(noOfEmployees)
                .org(org)
                .purchasingTimeFrame(purchasingTimeFrame)
                .roleInPurchaseProcess(roleInPurchaseProcess)
                .language(language)
                .sourceId(sourceId)
                .occurrenceIds(occurrenceIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform batch registration
     *
     * Register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration).       **Prerequisites:**     * The webinar host must be a licensed user. * The webinar should be type &#x60;5&#x60;, a scheduled webinar. Other types of webinars are not supported by this API.            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBatchRegistrantsTest() throws ApiException {
        String webinarId = null;
        Boolean autoApprove = null;
        List<WebinarsCreateBatchRegistrantsRequestRegistrantsInner> registrants = null;
        WebinarsCreateBatchRegistrantsResponse response = api.createBatchRegistrants(webinarId)
                .autoApprove(autoApprove)
                .registrants(registrants)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a webinar&#39;s branding name tag
     *
     * Use this API to create a webinar&#39;s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. There&#39;s a limit of 20 name tags per webinar. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBrandingNameTagTest() throws ApiException {
        String name = null;
        String textColor = null;
        String accentColor = null;
        String backgroundColor = null;
        Long webinarId = null;
        Boolean isDefault = null;
        Boolean setDefaultForAllPanelists = null;
        WebinarsCreateBrandingNameTagResponse response = api.createBrandingNameTag(name, textColor, accentColor, backgroundColor, webinarId)
                .isDefault(isDefault)
                .setDefaultForAllPanelists(setDefaultForAllPanelists)
                .execute();
        // TODO: test validations
    }

    /**
     * Create webinar&#39;s invite links
     *
     * Create a batch of invitation links for a webinar.  **Prerequisites:**  * Business, Education or API Plan with the Webinar add-on.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInviteLinksTest() throws ApiException {
        Long webinarId = null;
        List<WebinarsCreateInviteLinksRequestAttendeesInner> attendees = null;
        Long ttl = null;
        WebinarsCreateInviteLinksResponse response = api.createInviteLinks(webinarId)
                .attendees(attendees)
                .ttl(ttl)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a webinar&#39;s poll
     *
     * Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPollTest() throws ApiException {
        Long webinarId = null;
        String title = null;
        Boolean anonymous = null;
        Integer pollType = null;
        List<WebinarsCreatePollRequestQuestionsInner> questions = null;
        WebinarsCreatePollResponse response = api.createPoll(webinarId)
                .title(title)
                .anonymous(anonymous)
                .pollType(pollType)
                .questions(questions)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a webinar
     *
     * Schedule a webinar for a user who is a webinar host. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.    Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees.   **Rate limit:** Up to a maximum of **100 requests per day**. The rate limit is applied to the &#x60;userId&#x60; of the **webinar host** used to make the request.   **Prerequisites:**  * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebinarTest() throws ApiException {
        String userId = null;
        String agenda = null;
        Integer duration = null;
        String password = null;
        RecurrenceWebinarProperty recurrence = null;
        String scheduleFor = null;
        WebinarsCreateWebinarRequestSettings settings = null;
        OffsetDateTime startTime = null;
        String templateId = null;
        String timezone = null;
        String topic = null;
        List<WebinarsCreateWebinarRequestTrackingFieldsInner> trackingFields = null;
        Integer type = null;
        Boolean isSimulive = null;
        String recordFileId = null;
        WebinarsCreateWebinarResponse response = api.createWebinar(userId)
                .agenda(agenda)
                .duration(duration)
                .password(password)
                .recurrence(recurrence)
                .scheduleFor(scheduleFor)
                .settings(settings)
                .startTime(startTime)
                .templateId(templateId)
                .timezone(timezone)
                .topic(topic)
                .trackingFields(trackingFields)
                .type(type)
                .isSimulive(isSimulive)
                .recordFileId(recordFileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a webinar template
     *
     * Use this API to create a webinar template from an existing webinar.     **Scopes:** &#x60;webinar:write:admin&#x60;,&#x60;webinar:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebinarTemplateTest() throws ApiException {
        String userId = null;
        Long webinarId = null;
        String name = null;
        Boolean saveRecurrence = null;
        Boolean overwrite = null;
        WebinarsCreateWebinarTemplateResponse response = api.createWebinarTemplate(userId)
                .webinarId(webinarId)
                .name(name)
                .saveRecurrence(saveRecurrence)
                .overwrite(overwrite)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a webinar&#39;s branding name tag
     *
     * Use this API to delete a webinar&#39;s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBrandingNameTagTest() throws ApiException {
        Long webinarId = null;
        String nameTagIds = null;
        api.deleteBrandingNameTag(webinarId)
                .nameTagIds(nameTagIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a webinar&#39;s branding Virtual Backgrounds
     *
     * Use this API to delete a webinar&#39;s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBrandingVirtualBackgroundTest() throws ApiException {
        Long webinarId = null;
        String ids = null;
        api.deleteBrandingVirtualBackground(webinarId)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a webinar&#39;s branding wallpaper
     *
     * Use this API to delete a webinar&#39;s session branding wallpaper file.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBrandingWallpaperTest() throws ApiException {
        Long webinarId = null;
        api.deleteBrandingWallpaper(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a live webinar message
     *
     * Deletes a message in a live webinar based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMessageByIdTest() throws ApiException {
        Long webinarId = null;
        String messageId = null;
        String fileIds = null;
        api.deleteMessageById(webinarId, messageId)
                .fileIds(fileIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a webinar poll
     *
     * Delete a webinar&#39;s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePollTest() throws ApiException {
        Long webinarId = null;
        String pollId = null;
        api.deletePoll(webinarId, pollId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a webinar registrant
     *
     * Delete a webinar registrant.            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRegistrantTest() throws ApiException {
        Integer webinarId = null;
        String registrantId = null;
        String occurrenceId = null;
        api.deleteRegistrant(webinarId, registrantId)
                .occurrenceId(occurrenceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a webinar survey
     *
     * Use this API to delete a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar Add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host&#39;s account.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSurveyTest() throws ApiException {
        Long webinarId = null;
        api.deleteSurvey(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webinar
     *
     * Get details for a scheduled Zoom Webinar.            **Prerequisites:** * Pro or higher plan with a Webinar add-on.  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String webinarId = null;
        String occurrenceId = null;
        Boolean showPreviousOccurrences = null;
        WebinarsGetDetailsResponse response = api.getDetails(webinarId)
                .occurrenceId(occurrenceId)
                .showPreviousOccurrences(showPreviousOccurrences)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webinar&#39;s join token for local recording
     *
     * Use this API to get a webinar&#39;s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom webinar. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** &#x60;webinar_token:read:admin:local_recording&#x60;,&#x60;webinar_token:read:local_recording&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJoinTokenLocalRecordingTest() throws ApiException {
        Long webinarId = null;
        WebinarsGetJoinTokenLocalRecordingResponse response = api.getJoinTokenLocalRecording(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get live stream details
     *
     * Get a webinar&#39;s live stream configuration details, such as Stream URL, Stream Key and Page URL.  Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.       **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLiveStreamDetailsTest() throws ApiException {
        String webinarId = null;
        WebinarsGetLiveStreamDetailsResponse response = api.getLiveStreamDetails(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webinar&#39;s archive token for local archiving
     *
     * Use this API to get a webinar&#39;s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the webinar&#39;s raw audio and video media stream in real-time.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** &#x60;webinar_token:read:admin:local_archiving&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingArchiveTokenForLocalArchivingTest() throws ApiException {
        Long webinarId = null;
        WebinarsGetMeetingArchiveTokenForLocalArchivingResponse response = api.getMeetingArchiveTokenForLocalArchiving(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webinar poll
     *
     * Get a webinar&#39;s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.            **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPollDetailsTest() throws ApiException {
        Long webinarId = null;
        String pollId = null;
        WebinarsGetPollDetailsResponse response = api.getPollDetails(webinarId, pollId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webinar&#39;s session branding
     *
     * Use this API to get the webinar&#39;s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) information. Session branding lets hosts visually customize a webinar by setting a webinar wallpaper that displays behind video tiles. Session branding also lets hosts set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:read&#x60;,&#x60;webinar:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSessionBrandingTest() throws ApiException {
        Long webinarId = null;
        WebinarsGetSessionBrandingResponse response = api.getSessionBranding(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webinar SIP URI with Passcode
     *
     * Get a webinar&#39;s SIP URI. The URI consists of the webinar ID, an optional user-supplied passcode, and participant identifier code. The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period in seconds.   **Scopes:** &#x60;webinar:write:admin:sip_dialing&#x60;,&#x60;webinar:write:sip_dialing&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSipUriWithPasscodeTest() throws ApiException {
        Long webinarId = null;
        String passcode = null;
        WebinarsGetSipUriWithPasscodeResponse response = api.getSipUriWithPasscode(webinarId)
                .passcode(passcode)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webinar survey
     *
     * Return information about a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host&#39;s account.  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSurveyTest() throws ApiException {
        Long webinarId = null;
        WebinarsGetSurveyResponse response = api.getSurvey(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webinar&#39;s token
     *
     * Use this API to get a webinar&#39;s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Closed captioning** setting enabled in the Zoom web portal.  *  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** &#x60;webinar:read&#x60;,&#x60;webinar:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebinarTokenTest() throws ApiException {
        Long webinarId = null;
        String type = null;
        WebinarsGetWebinarTokenResponse response = api.getWebinarToken(webinarId)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webinar&#39;s join token for live streaming
     *
     * Use this API to get a webinar&#39;s archive token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &amp;quot;hosted by the issuer of the token&amp;quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Allow livestreaming of webinars** user setting enabled in the Zoom web portal.  **Scopes:** &#x60;webinar_token:read:admin:live_streaming&#x60;,&#x60;webinar_token:read:live_streaming&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void joinTokenLiveStreamingTest() throws ApiException {
        Long webinarId = null;
        WebinarsJoinTokenLiveStreamingResponse response = api.joinTokenLiveStreaming(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webinar absentees
     *
     * List absentees of a webinar.            **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAbsenteesTest() throws ApiException {
        String webinarId = null;
        String occurrenceId = null;
        Integer pageSize = null;
        String nextPageToken = null;
        WebinarsListAbsenteesResponse response = api.listAbsentees(webinarId)
                .occurrenceId(occurrenceId)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List panelists
     *
     * List all of a webinar&#39;s panelists.    Webinar panelists can view and send video, screen share, annotate, and do much more compared to webinar attendees.    **Prerequisites:**     * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPanelistsTest() throws ApiException {
        Long webinarId = null;
        WebinarsListPanelistsResponse response = api.listPanelists(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * List webinar participants
     *
     * Retrieve a list of all the participants who attended a webinar hosted in the past.   **Prerequisites:**  * A Pro or higher plan with a webinar add-on.  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listParticipantsTest() throws ApiException {
        String webinarId = null;
        Integer pageSize = null;
        String nextPageToken = null;
        WebinarsListParticipantsResponse response = api.listParticipants(webinarId)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List past webinar instances
     *
     * List past webinar instances.            **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPastInstancesTest() throws ApiException {
        Long webinarId = null;
        WebinarsListPastInstancesResponse response = api.listPastInstances(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Q&amp;As of a past webinar
     *
     * List the Q&amp;amp;A of a specific past webinar.   The [question &amp;amp; answer (Q&amp;amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for webinars lets attendees ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.   **Prerequisites**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPastWebinarQaTest() throws ApiException {
        String webinarId = null;
        WebinarsListPastWebinarQaResponse response = api.listPastWebinarQa(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * List past webinar poll results
     *
     * The polling feature for webinar lets you create single-choice or multiple-choice polling questions for your webinars. This API endpoint retrieves the results for webinar polls of a specific webinar.  **Prerequisites:**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPollResultsTest() throws ApiException {
        String webinarId = null;
        WebinarsListPollResultsResponse response = api.listPollResults(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * List a webinar&#39;s polls 
     *
     * List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.            **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPollsTest() throws ApiException {
        Long webinarId = null;
        Boolean anonymous = null;
        WebinarsListPollsResponse response = api.listPolls(webinarId)
                .anonymous(anonymous)
                .execute();
        // TODO: test validations
    }

    /**
     * List webinar registrants
     *
     * List all users that have registered for a given webinar. Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar functionality lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.     **Prerequisites** * Pro or higher plan with a Webinar Add-on.       **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRegistrantsTest() throws ApiException {
        Long webinarId = null;
        String occurrenceId = null;
        String status = null;
        String trackingSourceId = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        String nextPageToken = null;
        WebinarsListRegistrantsResponse response = api.listRegistrants(webinarId)
                .occurrenceId(occurrenceId)
                .status(status)
                .trackingSourceId(trackingSourceId)
                .pageSize(pageSize)
                .pageNumber(pageNumber)
                .nextPageToken(nextPageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List registration questions
     *
     * List registration questions and fields that are to be answered by users while registering for a webinar.    Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.       **Prerequisites:**      * Pro or higher plan with the webinar add-on.   **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRegistrationQuestionsTest() throws ApiException {
        Long webinarId = null;
        WebinarsListRegistrationQuestionsResponse response = api.listRegistrationQuestions(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webinar tracking sources
     *
     * [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.     Use this API to list information on all the tracking sources of a Webinar.      **Prerequisites**:     * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.   **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrackingSourcesTest() throws ApiException {
        Long webinarId = null;
        WebinarsListTrackingSourcesResponse response = api.listTrackingSources(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * List webinar templates
     *
     * Display a list of a user&#39;s [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us) instead of the &#x60;userId&#x60; parameter. When you schedule a webinar, save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the &#x60;id&#x60; value in this API response in the &#x60;template_id&#x60; field of the [**Create a webinar**](https://developers.zoom.us) API. **Prerequisites:** * A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar).  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWebinarTemplatesTest() throws ApiException {
        String userId = null;
        WebinarsListWebinarTemplatesResponse response = api.listWebinarTemplates(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * List webinars
     *
     * List all the webinars scheduled by or on behalf a webinar host. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.    Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars let a host broadcast a Zoom meeting to up to 10,000 attendees.   **Note** This API only returns a user&#39;s [unexpired webinars](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).    **Prerequisites**  * A Pro or higher plan with the webinar add-on.  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWebinarsTest() throws ApiException {
        String userId = null;
        String type = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        WebinarsListWebinarsResponse response = api.listWebinars(userId)
                .type(type)
                .pageSize(pageSize)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webinar registrant
     *
     * Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar feature lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.    Use this API to get details on a specific user who has registered for the webinar.           **Prerequisites:**     * The account must have a webinar plan.  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registrantDetailsTest() throws ApiException {
        Long webinarId = null;
        String registrantId = null;
        String occurrenceId = null;
        WebinarsRegistrantDetailsResponse response = api.registrantDetails(webinarId, registrantId)
                .occurrenceId(occurrenceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a panelist
     *
     * [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.     Retrieve the &#x60;panelistId&#x60; by calling **List Panelists API**.           **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePanelistTest() throws ApiException {
        Long webinarId = null;
        String panelistId = null;
        api.removePanelist(webinarId, panelistId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove webinar panelists
     *
     * Remove all the panelists from a webinar.     **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePanelistsTest() throws ApiException {
        Long webinarId = null;
        api.removePanelists(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a webinar
     *
     * Delete a webinar.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeWebinarTest() throws ApiException {
        Long webinarId = null;
        String occurrenceId = null;
        Boolean cancelWebinarReminder = null;
        api.removeWebinar(webinarId)
                .occurrenceId(occurrenceId)
                .cancelWebinarReminder(cancelWebinarReminder)
                .execute();
        // TODO: test validations
    }

    /**
     * Set webinar&#39;s default branding Virtual Background
     *
     * Use this API to set a webinar&#39;s default session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDefaultBrandingVirtualBackgroundTest() throws ApiException {
        Long webinarId = null;
        String id = null;
        Boolean setDefaultForAllPanelists = null;
        api.setDefaultBrandingVirtualBackground(webinarId)
                .id(id)
                .setDefaultForAllPanelists(setDefaultForAllPanelists)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a webinar&#39;s branding name tag
     *
     * Use this API to update a webinar&#39;s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBrandingNameTagTest() throws ApiException {
        Long webinarId = null;
        String nameTagId = null;
        String name = null;
        String textColor = null;
        String accentColor = null;
        String backgroundColor = null;
        Boolean isDefault = null;
        Boolean setDefaultForAllPanelists = null;
        api.updateBrandingNameTag(webinarId, nameTagId)
                .name(name)
                .textColor(textColor)
                .accentColor(accentColor)
                .backgroundColor(backgroundColor)
                .isDefault(isDefault)
                .setDefaultForAllPanelists(setDefaultForAllPanelists)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a live stream
     *
     * Update a webinar&#39;s live stream information.         **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLiveStreamTest() throws ApiException {
        URI pageUrl = null;
        String streamKey = null;
        String streamUrl = null;
        Long webinarId = null;
        String resolution = null;
        api.updateLiveStream(pageUrl, streamKey, streamUrl, webinarId)
                .resolution(resolution)
                .execute();
        // TODO: test validations
    }

    /**
     * Update live stream status
     *
     * Let users [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a webinar&#39;s live stream.          **Prerequisites:**     * Pro or higher plan with a Webinar Add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLiveStreamStatusTest() throws ApiException {
        Long webinarId = null;
        String action = null;
        WebinarsUpdateLiveStreamStatusRequestSettings settings = null;
        api.updateLiveStreamStatus(webinarId)
                .action(action)
                .settings(settings)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a webinar poll
     *
     * Update a webinar&#39;s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePollTest() throws ApiException {
        Long webinarId = null;
        String pollId = null;
        String title = null;
        Boolean anonymous = null;
        Integer pollType = null;
        List<WebinarsUpdatePollRequestQuestionsInner> questions = null;
        api.updatePoll(webinarId, pollId)
                .title(title)
                .anonymous(anonymous)
                .pollType(pollType)
                .questions(questions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update registrant&#39;s status
     *
     * Update webinar registrants&#39; registration status. You can approve or deny a registrant, or revoke a registrant&#39;s approval.   **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRegistrantStatusTest() throws ApiException {
        String action = null;
        Long webinarId = null;
        List<WebinarsUpdateRegistrantStatusRequestRegistrantsInner> registrants = null;
        String occurrenceId = null;
        api.updateRegistrantStatus(action, webinarId)
                .registrants(registrants)
                .occurrenceId(occurrenceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update registration questions
     *
     * Update registration questions and fields of a scheduled webinar for users to answer during webinar registration. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.          **Prerequisites:**       * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.    **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRegistrationQuestionsTest() throws ApiException {
        Long webinarId = null;
        List<WebinarsUpdateRegistrationQuestionsRequestCustomQuestionsInner> customQuestions = null;
        List<WebinarsUpdateRegistrationQuestionsRequestQuestionsInner> questions = null;
        api.updateRegistrationQuestions(webinarId)
                .customQuestions(customQuestions)
                .questions(questions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a webinar
     *
     * Make updates to a scheduled webinar.   **100 requests per day**. The rate limit is applied to the &#x60;userId&#x60; of the **webinar host** used to make the request.   **Prerequisites**  * A Pro or higher plan with a webinar add-on.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScheduledWebinarTest() throws ApiException {
        Long webinarId = null;
        String agenda = null;
        Integer duration = null;
        String password = null;
        String scheduleFor = null;
        WebinarsUpdateScheduledWebinarRequestRecurrence recurrence = null;
        WebinarsUpdateScheduledWebinarRequestSettings settings = null;
        OffsetDateTime startTime = null;
        String timezone = null;
        String topic = null;
        List<WebinarsUpdateScheduledWebinarRequestTrackingFieldsInner> trackingFields = null;
        Integer type = null;
        Boolean isSimulive = null;
        String recordFileId = null;
        String occurrenceId = null;
        api.updateScheduledWebinar(webinarId)
                .agenda(agenda)
                .duration(duration)
                .password(password)
                .scheduleFor(scheduleFor)
                .recurrence(recurrence)
                .settings(settings)
                .startTime(startTime)
                .timezone(timezone)
                .topic(topic)
                .trackingFields(trackingFields)
                .type(type)
                .isSimulive(isSimulive)
                .recordFileId(recordFileId)
                .occurrenceId(occurrenceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update webinar status
     *
     * Update a webinar&#39;s status. Use this API to end an ongoing webinar.          **Prerequisites:**     * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStatusTest() throws ApiException {
        Long webinarId = null;
        String action = null;
        Object response = api.updateStatus(webinarId)
                .action(action)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a webinar survey
     *
     * Update a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).  **Prerequisites:** * A Pro or higher plan with the Webinar add-on. * Enable the [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature in the host&#39;s account.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSurveyTest() throws ApiException {
        Long webinarId = null;
        WebinarsUpdateSurveyRequestCustomSurvey customSurvey = null;
        Boolean showInTheBrowser = null;
        Boolean showInTheFollowUpEmail = null;
        String thirdPartySurvey = null;
        api.updateSurvey(webinarId)
                .customSurvey(customSurvey)
                .showInTheBrowser(showInTheBrowser)
                .showInTheFollowUpEmail(showInTheFollowUpEmail)
                .thirdPartySurvey(thirdPartySurvey)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload a webinar&#39;s branding Virtual Background
     *
     * Use this API to upload a webinar&#39;s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). Hosts and panelists can select and use these Virtual Backgrounds during the webinar. Branding Virtual Background files have the following restrictions:  * A webinar cannot exceed more than 10 Virtual Background files.  * You can only upload image files that are in JPG/JPEG, GIF or PNG format.  * The Virtual Background file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadBrandingVirtualBackgroundTest() throws ApiException {
        Long webinarId = null;
        File _file = null;
        Boolean _default = null;
        Boolean setDefaultForAllPanelists = null;
        WebinarsUploadBrandingVirtualBackgroundResponse response = api.uploadBrandingVirtualBackground(webinarId, _file)
                ._default(_default)
                .setDefaultForAllPanelists(setDefaultForAllPanelists)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload a webinar&#39;s branding wallpaper
     *
     * Use this API to upload a webinar&#39;s session branding wallpaper file. Webinar branding wallpaper files have the following requirements:  * A webinar can only have one wallpaper file.  * You can only upload image files that are in JPG/JPEG, GIF, or PNG format.  * Image files must be 16:9 ratio. The recommended image size is 1920 x 1080 pixels (px).  * The wallpaper file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadBrandingWallpaperTest() throws ApiException {
        Long webinarId = null;
        File _file = null;
        WebinarsUploadBrandingWallpaperResponse response = api.uploadBrandingWallpaper(webinarId, _file)
                .execute();
        // TODO: test validations
    }

}
