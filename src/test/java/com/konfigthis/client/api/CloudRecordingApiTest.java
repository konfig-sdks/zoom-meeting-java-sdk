/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AnalyticsDetailsResponse;
import com.konfigthis.client.model.AnalyticsSummaryResponse;
import com.konfigthis.client.model.CloudRecordingCreateRegistrantRequest;
import com.konfigthis.client.model.CloudRecordingCreateRegistrantRequestCustomQuestionsInner;
import com.konfigthis.client.model.CloudRecordingCreateRegistrantResponse;
import com.konfigthis.client.model.CloudRecordingGetMeetingRecordingsResponse;
import com.konfigthis.client.model.CloudRecordingGetSettingsResponse;
import com.konfigthis.client.model.CloudRecordingListRecordingsResponse;
import com.konfigthis.client.model.CloudRecordingListRegistrantsResponse;
import com.konfigthis.client.model.CloudRecordingListRegistrationQuestionsResponse;
import com.konfigthis.client.model.CloudRecordingRecoverRecordingStatusRequest;
import com.konfigthis.client.model.CloudRecordingRecoverStatusRequest;
import com.konfigthis.client.model.CloudRecordingUpdateRegistrantStatusRequest;
import com.konfigthis.client.model.CloudRecordingUpdateRegistrantStatusRequestRegistrantsInner;
import com.konfigthis.client.model.CloudRecordingUpdateRegistrationQuestionsRequest;
import com.konfigthis.client.model.CloudRecordingUpdateRegistrationQuestionsRequestCustomQuestionsInner;
import com.konfigthis.client.model.CloudRecordingUpdateRegistrationQuestionsRequestQuestionsInner;
import com.konfigthis.client.model.CloudRecordingUpdateSettingsRequest;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudRecordingApi
 */
@Disabled
public class CloudRecordingApiTest {

    private static CloudRecordingApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CloudRecordingApi(apiClient);
    }

    /**
     * Create a recording registrant
     *
     * Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://developers.zoom.us) to view these recordings.  Use this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.       **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRegistrantTest() throws ApiException {
        String email = null;
        String firstName = null;
        Long meetingId = null;
        String address = null;
        String city = null;
        String comments = null;
        String country = null;
        List<CloudRecordingCreateRegistrantRequestCustomQuestionsInner> customQuestions = null;
        String industry = null;
        String jobTitle = null;
        String lastName = null;
        String noOfEmployees = null;
        String org = null;
        String phone = null;
        String purchasingTimeFrame = null;
        String roleInPurchaseProcess = null;
        String state = null;
        String status = null;
        String zip = null;
        CloudRecordingCreateRegistrantResponse response = api.createRegistrant(email, firstName, meetingId)
                .address(address)
                .city(city)
                .comments(comments)
                .country(country)
                .customQuestions(customQuestions)
                .industry(industry)
                .jobTitle(jobTitle)
                .lastName(lastName)
                .noOfEmployees(noOfEmployees)
                .org(org)
                .phone(phone)
                .purchasingTimeFrame(purchasingTimeFrame)
                .roleInPurchaseProcess(roleInPurchaseProcess)
                .state(state)
                .status(status)
                .zip(zip)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete meeting recordings
     *
     * Delete all recording files of a meeting.           **Prerequisites**: * Cloud Recording should be enabled on the user&#39;s account.       **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMeetingRecordingsTest() throws ApiException {
        String meetingId = null;
        String action = null;
        api.deleteMeetingRecordings(meetingId)
                .action(action)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a meeting recording file
     *
     * Delete a specific recording file from a meeting.&amp;lt;p style&#x3D;&amp;quot;background-color:#e1f5fe; color:#01579b; padding:8px&amp;quot;&amp;gt; &amp;lt;b&amp;gt;Note:&amp;lt;/b&amp;gt; To use this API, you must enable the &amp;lt;b&amp;gt;The host can delete cloud recordings&amp;lt;/b&amp;gt; setting. You can find this setting in the &amp;lt;b&amp;gt;Recording&amp;lt;/b&amp;gt; tab of the &amp;lt;b&amp;gt;Settings&amp;lt;/b&amp;gt; interface in the [Zoom web portal](https://zoom.us/).&amp;lt;/p&amp;gt;    **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRecordingTest() throws ApiException {
        String meetingId = null;
        String recordingId = null;
        String action = null;
        api.deleteRecording(meetingId, recordingId)
                .action(action)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Meeting Recording&#39;s Analytics Details
     *
     * Use this API to return a meeting recording&#39;s [analytics details](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user&#39;s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    &#x60;curl -H &amp;quot;Authorization: Bearer &amp;lt;ACCESS_TOKEN&amp;gt;&amp;quot; https://{{base-domain}}/rec/archive/download/xyz&#x60;       **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detailsTest() throws ApiException {
        String meetingId = null;
        Integer pageSize = null;
        String nextPageToken = null;
        LocalDate from = null;
        LocalDate to = null;
        String type = null;
        AnalyticsDetailsResponse response = api.details(meetingId)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .from(from)
                .to(to)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Get meeting recordings
     *
     * Returns all of a meeting&#39;s [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4).   Use the &#x60;download_url&#x60; property listed in the response to download the recording files.  To access a passcode-protected cloud recording, send the user&#39;s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header.     Example:  &#x60;curl -H &#39;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&#39; https://{{base-domain}}/rec/archive/download/xyz&#x60;    **Scopes:** &#x60;recording:read&#x60;,&#x60;phone_recording:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingRecordingsTest() throws ApiException {
        String meetingId = null;
        String includeFields = null;
        Integer ttl = null;
        CloudRecordingGetMeetingRecordingsResponse response = api.getMeetingRecordings(meetingId)
                .includeFields(includeFields)
                .ttl(ttl)
                .execute();
        // TODO: test validations
    }

    /**
     * Get meeting recording settings
     *
     * Retrieves settings applied to a meeting&#39;s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).            **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettingsTest() throws ApiException {
        String meetingId = null;
        CloudRecordingGetSettingsResponse response = api.getSettings(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all recordings
     *
     * Lists all [cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) for a user.    For user-level apps, pass the [&#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.  To access a user&#39;s passcode protected cloud recording, send the user&#39;s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a bearer token in the authorization header.    Example:  &#x60;curl -H \&quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;\&quot; https://{{base-domain}}/rec/archive/download/xyz&#x60;    **Prerequisites:**   * Must have a Pro or a higher plan.   * Must enable Cloud Recording on the user&#39;s account.  **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecordingsTest() throws ApiException {
        String userId = null;
        Integer pageSize = null;
        String nextPageToken = null;
        String mc = null;
        Boolean trash = null;
        LocalDate from = null;
        LocalDate to = null;
        String trashType = null;
        Integer meetingId = null;
        CloudRecordingListRecordingsResponse response = api.listRecordings(userId)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .mc(mc)
                .trash(trash)
                .from(from)
                .to(to)
                .trashType(trashType)
                .meetingId(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * List recording registrants
     *
     * Use this API to list registrants of a past meeting&#39;s [on-demand cloud recordings](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-recordings). Users must [register](https://developers.zoom.us) to view the recordings.      **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRegistrantsTest() throws ApiException {
        Long meetingId = null;
        String status = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        String nextPageToken = null;
        CloudRecordingListRegistrantsResponse response = api.listRegistrants(meetingId)
                .status(status)
                .pageSize(pageSize)
                .pageNumber(pageNumber)
                .nextPageToken(nextPageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Get registration questions
     *
     * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.       **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRegistrationQuestionsTest() throws ApiException {
        String meetingId = null;
        CloudRecordingListRegistrationQuestionsResponse response = api.listRegistrationQuestions(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Recover meeting recordings
     *
     * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.          **Prerequisites**:     * A Pro user with Cloud Recording enabled.  **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverRecordingStatusTest() throws ApiException {
        String meetingUUID = null;
        String action = null;
        api.recoverRecordingStatus(meetingUUID)
                .action(action)
                .execute();
        // TODO: test validations
    }

    /**
     * Recover a single recording
     *
     * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.       **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverStatusTest() throws ApiException {
        String meetingId = null;
        String recordingId = null;
        String action = null;
        api.recoverStatus(meetingId, recordingId)
                .action(action)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Meeting Recording&#39;s Analytics Summary
     *
     * Use this API to return a meeting recording&#39;s [analytics summary](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user&#39;s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    &#x60;curl -H &amp;quot;Authorization: Bearer &amp;lt;ACCESS_TOKEN&amp;gt;&amp;quot; https://{{base-domain}}/rec/archive/download/xyz&#x60;       **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void summaryTest() throws ApiException {
        String meetingId = null;
        LocalDate from = null;
        LocalDate to = null;
        AnalyticsSummaryResponse response = api.summary(meetingId)
                .from(from)
                .to(to)
                .execute();
        // TODO: test validations
    }

    /**
     * Update registrant&#39;s status
     *
     * A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording.  Use this API to update a registrant&#39;s status.    **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRegistrantStatusTest() throws ApiException {
        String action = null;
        Long meetingId = null;
        List<CloudRecordingUpdateRegistrantStatusRequestRegistrantsInner> registrants = null;
        api.updateRegistrantStatus(action, meetingId)
                .registrants(registrants)
                .execute();
        // TODO: test validations
    }

    /**
     * Update registration questions
     *
     * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to update registration questions that are to be answered by users while registering to view a recording.       **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRegistrationQuestionsTest() throws ApiException {
        String meetingId = null;
        List<CloudRecordingUpdateRegistrationQuestionsRequestCustomQuestionsInner> customQuestions = null;
        List<CloudRecordingUpdateRegistrationQuestionsRequestQuestionsInner> questions = null;
        api.updateRegistrationQuestions(meetingId)
                .customQuestions(customQuestions)
                .questions(questions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update meeting recording settings
     *
     * Updates settings applied to a meeting&#39;s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).        **Scopes:** &#x60;recording:write&#x60;,&#x60;recording:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSettingsTest() throws ApiException {
        String meetingId = null;
        Integer approvalType = null;
        String authenticationDomains = null;
        String authenticationOption = null;
        Boolean onDemand = null;
        String password = null;
        Boolean recordingAuthentication = null;
        Boolean sendEmailToHost = null;
        String shareRecording = null;
        Boolean showSocialShareButtons = null;
        String topic = null;
        Boolean viewerDownload = null;
        api.updateSettings(meetingId)
                .approvalType(approvalType)
                .authenticationDomains(authenticationDomains)
                .authenticationOption(authenticationOption)
                .onDemand(onDemand)
                .password(password)
                .recordingAuthentication(recordingAuthentication)
                .sendEmailToHost(sendEmailToHost)
                .shareRecording(shareRecording)
                .showSocialShareButtons(showSocialShareButtons)
                .topic(topic)
                .viewerDownload(viewerDownload)
                .execute();
        // TODO: test validations
    }

}
