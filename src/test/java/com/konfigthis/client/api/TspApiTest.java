/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TspAddUserTspAccountRequest;
import com.konfigthis.client.model.TspAddUserTspAccountRequestDialInNumbersInner;
import com.konfigthis.client.model.TspAddUserTspAccountResponse;
import com.konfigthis.client.model.TspGetAccountInfoResponse;
import com.konfigthis.client.model.TspGetUserTspAccountResponse;
import com.konfigthis.client.model.TspListUserTspAccountsResponse;
import com.konfigthis.client.model.TspSetGlobalDialInUrlRequest;
import com.konfigthis.client.model.TspUpdateAccountTspInformationRequest;
import com.konfigthis.client.model.TspUpdateUserTspAccountRequest;
import com.konfigthis.client.model.TspUpdateUserTspAccountRequestDialInNumbersInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TspApi
 */
@Disabled
public class TspApiTest {

    private static TspApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TspApi(apiClient);
    }

    /**
     * Add a user&#39;s TSP account
     *
     * Add a user&#39;s TSP account.            **Scopes:** &#x60;tsp:write:admin&#x60;,&#x60;tsp:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserTspAccountTest() throws ApiException {
        String conferenceCode = null;
        String leaderPin = null;
        Object userId = null;
        List<TspAddUserTspAccountRequestDialInNumbersInner> dialInNumbers = null;
        String tspBridge = null;
        TspAddUserTspAccountResponse response = api.addUserTspAccount(conferenceCode, leaderPin, userId)
                .dialInNumbers(dialInNumbers)
                .tspBridge(tspBridge)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a user&#39;s TSP account
     *
     * Delete a user&#39;s TSP account.            **Scopes:** &#x60;tsp:write:admin&#x60;,&#x60;tsp:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTspAccountTest() throws ApiException {
        Object userId = null;
        String tspId = null;
        api.deleteUserTspAccount(userId, tspId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get account&#39;s TSP information
     *
     * Get information on Telephony Service Provider on an account level.          **Prerequisites:**     * A Pro or a higher plan.  **Scopes:** &#x60;tsp:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountInfoTest() throws ApiException {
        TspGetAccountInfoResponse response = api.getAccountInfo()
                .execute();
        // TODO: test validations
    }

    /**
     * Get a user&#39;s TSP account
     *
     * Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.            **Scopes:** &#x60;tsp:read:admin&#x60;,&#x60;tsp:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTspAccountTest() throws ApiException {
        Object userId = null;
        String tspId = null;
        TspGetUserTspAccountResponse response = api.getUserTspAccount(userId, tspId)
                .execute();
        // TODO: test validations
    }

    /**
     * List user&#39;s TSP accounts
     *
     * A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.            **Scopes:** &#x60;tsp:read:admin&#x60;,&#x60;tsp:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserTspAccountsTest() throws ApiException {
        Object userId = null;
        TspListUserTspAccountsResponse response = api.listUserTspAccounts(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set global dial-in URL for a TSP user
     *
     * A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;   **Scopes:** &#x60;tsp:write:admin&#x60;,&#x60;tsp:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setGlobalDialInUrlTest() throws ApiException {
        String userId = null;
        String audioUrl = null;
        api.setGlobalDialInUrl(userId)
                .audioUrl(audioUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Update account&#39;s TSP information
     *
     * Update information of the Telephony Service Provider set up on an account.     **Prerequisites**:     TSP account option should be enabled.       **Scopes:** &#x60;tsp:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountTspInformationTest() throws ApiException {
        Boolean dialInNumberUnrestricted = null;
        Boolean enable = null;
        Boolean masterAccountSettingExtended = null;
        Boolean modifyCredentialForbidden = null;
        String tspBridge = null;
        Boolean tspEnabled = null;
        String tspProvider = null;
        api.updateAccountTspInformation()
                .dialInNumberUnrestricted(dialInNumberUnrestricted)
                .enable(enable)
                .masterAccountSettingExtended(masterAccountSettingExtended)
                .modifyCredentialForbidden(modifyCredentialForbidden)
                .tspBridge(tspBridge)
                .tspEnabled(tspEnabled)
                .tspProvider(tspProvider)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a TSP account
     *
     * Update a user&#39;s TSP account.            **Scopes:** &#x60;tsp:write:admin&#x60;,&#x60;tsp:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTspAccountTest() throws ApiException {
        String conferenceCode = null;
        String leaderPin = null;
        Object userId = null;
        String tspId = null;
        List<TspUpdateUserTspAccountRequestDialInNumbersInner> dialInNumbers = null;
        String tspBridge = null;
        api.updateUserTspAccount(conferenceCode, leaderPin, userId, tspId)
                .dialInNumbers(dialInNumbers)
                .tspBridge(tspBridge)
                .execute();
        // TODO: test validations
    }

}
