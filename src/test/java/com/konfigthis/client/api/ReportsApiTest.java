/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.LocalDate;
import com.konfigthis.client.model.ReportsGetActiveInactiveHostReportsResponse;
import com.konfigthis.client.model.ReportsGetBillingDepartmentReportsResponse;
import com.konfigthis.client.model.ReportsGetBillingInvoicesResponse;
import com.konfigthis.client.model.ReportsGetCloudRecordingUsageReportResponse;
import com.konfigthis.client.model.ReportsGetDailyUsageReportResponse;
import com.konfigthis.client.model.ReportsGetMeetingDetailReportsResponse;
import com.konfigthis.client.model.ReportsGetMeetingParticipantReportsResponse;
import com.konfigthis.client.model.ReportsGetMeetingPollReportsResponse;
import com.konfigthis.client.model.ReportsGetMeetingQaReportResponse;
import com.konfigthis.client.model.ReportsGetMeetingReportsResponse;
import com.konfigthis.client.model.ReportsGetMeetingSurveyReportResponse;
import com.konfigthis.client.model.ReportsGetOperationLogsReportResponse;
import com.konfigthis.client.model.ReportsGetTelephoneReportsResponse;
import com.konfigthis.client.model.ReportsGetWebinarDetailsReportResponse;
import com.konfigthis.client.model.ReportsGetWebinarPollReportsResponse;
import com.konfigthis.client.model.ReportsGetWebinarQaReportResponse;
import com.konfigthis.client.model.ReportsGetWebinarSurveyReportResponse;
import com.konfigthis.client.model.ReportsListSignInSignOutActivitiesResponse;
import com.konfigthis.client.model.ReportsListUpcomingEventsReportResponse;
import com.konfigthis.client.model.ReportsWebinarParticipantsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Disabled
public class ReportsApiTest {

    private static ReportsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ReportsApi(apiClient);
    }

    /**
     * Get active/inactive host reports
     *
     * Retrieve a host report for a specified period of time within the last six months.   The report time range is limited to a month.   You can specify the type of report and date range using the query parameters.     * The **Active Hosts** report displays a list of meetings, participants, and meeting minutes. An **active host** is defined as any user who has hosted at least one meeting during the during the month specified in the &#x60;from&#x60; and &#x60;to&#x60; range.   * The **Inactive Hosts** report pulls a list of users who were not active during a specific period of time.    An **inactive host** is defined as any user who has not hosted any meetings during the specified period of time for the report. to be inactive.               **Prerequisites:**     * Pro or higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActiveInactiveHostReportsTest() throws ApiException {
        LocalDate from = null;
        LocalDate to = null;
        String type = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        String nextPageToken = null;
        String groupId = null;
        ReportsGetActiveInactiveHostReportsResponse response = api.getActiveInactiveHostReports(from, to)
                .type(type)
                .pageSize(pageSize)
                .pageNumber(pageNumber)
                .nextPageToken(nextPageToken)
                .groupId(groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get billing reports
     *
     * Get department billing reports of a Zoom account.  **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact Zoom Support team for details.    **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBillingDepartmentReportsTest() throws ApiException {
        ReportsGetBillingDepartmentReportsResponse response = api.getBillingDepartmentReports()
                .execute();
        // TODO: test validations
    }

    /**
     * Get billing invoice reports
     *
     * Get department billing invoices reports for a specific billing period. Provide the &#x60;billing_id&#x60; of the billing period for which you would like to retrieve the invoices for. This ID can be retrieved from **Get Billing Reports** API.   **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact the Zoom Support team to enable this feature.    **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBillingInvoicesTest() throws ApiException {
        String billingId = null;
        ReportsGetBillingInvoicesResponse response = api.getBillingInvoices(billingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get cloud recording usage report
     *
     * Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day earlier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days.      **Prerequisites**     * Pro or higher plan.       **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCloudRecordingUsageReportTest() throws ApiException {
        LocalDate from = null;
        LocalDate to = null;
        String groupId = null;
        ReportsGetCloudRecordingUsageReportResponse response = api.getCloudRecordingUsageReport(from, to)
                .groupId(groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get daily usage report
     *
     * Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.     **Prerequisites**     * Pro or higher plan.       **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDailyUsageReportTest() throws ApiException {
        Integer year = null;
        Integer month = null;
        String groupId = null;
        ReportsGetDailyUsageReportResponse response = api.getDailyUsageReport()
                .year(year)
                .month(month)
                .groupId(groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get meeting detail reports
     *
     * Get a detailed report for a past meeting.      **Prerequisites:**     * Pro or a higher plan.         **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingDetailReportsTest() throws ApiException {
        Object meetingId = null;
        ReportsGetMeetingDetailReportsResponse response = api.getMeetingDetailReports(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get meeting participant reports
     *
     * Return a report of a past meeting with two or more participants, including the host. To return a report for past meeting with only **one** participant, use the [**List meeting participants**](https://developers.zoom.us) API.   **Note:**   This API may return empty values for participants&#39; &#x60;user_name&#x60;, &#x60;ip_address&#x60;, &#x60;location&#x60;, and &#x60;email&#x60; responses when the account calling this API:  * Does **not** have a signed HIPAA business associate agreement (BAA).  * Is a [**legacy** HIPAA BAA account](https://developers.zoom.us).   **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingParticipantReportsTest() throws ApiException {
        String meetingId = null;
        Integer pageSize = null;
        String nextPageToken = null;
        String includeFields = null;
        ReportsGetMeetingParticipantReportsResponse response = api.getMeetingParticipantReports(meetingId)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .includeFields(includeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get meeting poll reports
     *
     * Use this API to get a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting.    **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingPollReportsTest() throws ApiException {
        Object meetingId = null;
        ReportsGetMeetingPollReportsResponse response = api.getMeetingPollReports(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get meeting Q&amp;A report
     *
     * Retrieve a report on questions asked and answered by participants from past meetings.             **Prerequisites:**     * Pro plan or higher.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingQaReportTest() throws ApiException {
        String meetingId = null;
        ReportsGetMeetingQaReportResponse response = api.getMeetingQaReport(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get meeting reports
     *
     * Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on past meetings and webinars for a specified time period. The time range for the report is limited to a month and the month must fall within the past six months.  Meetings and webinars are returned only if they have two or more unique participants.            **Prerequisites:**     * Pro or higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingReportsTest() throws ApiException {
        Object userId = null;
        LocalDate from = null;
        LocalDate to = null;
        Integer pageSize = null;
        String nextPageToken = null;
        String type = null;
        ReportsGetMeetingReportsResponse response = api.getMeetingReports(userId, from, to)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Get meeting survey report
     *
     * Retrieve a report on past [meeting survey](https://support.zoom.com/hc/en/article?id&#x3D;zm_kb&amp;sysparm_article&#x3D;KB0057559).          **Prerequisites:**     * Pro or a higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingSurveyReportTest() throws ApiException {
        String meetingId = null;
        ReportsGetMeetingSurveyReportResponse response = api.getMeetingSurveyReport(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get operation logs report
     *
     * The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.     Use this API to retrieve operation logs report for a specified period of time.     **Prerequisites:**     * Pro or higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOperationLogsReportTest() throws ApiException {
        LocalDate from = null;
        LocalDate to = null;
        Integer pageSize = null;
        String nextPageToken = null;
        String categoryType = null;
        ReportsGetOperationLogsReportResponse response = api.getOperationLogsReport(from, to)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .categoryType(categoryType)
                .execute();
        // TODO: test validations
    }

    /**
     * Get telephone reports
     *
     * The [telephone report](https://support.zoom.us/hc/en-us/articles/206514816-Telephone-reports) allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.  **Prerequisites:**     * Pro or higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTelephoneReportsTest() throws ApiException {
        LocalDate from = null;
        LocalDate to = null;
        String type = null;
        String queryDateType = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        String nextPageToken = null;
        ReportsGetTelephoneReportsResponse response = api.getTelephoneReports(from, to)
                .type(type)
                .queryDateType(queryDateType)
                .pageSize(pageSize)
                .pageNumber(pageNumber)
                .nextPageToken(nextPageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webinar detail reports
     *
     * Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.            **Prerequisites:**     * Pro or higher plan with Webinar add-on.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebinarDetailsReportTest() throws ApiException {
        String webinarId = null;
        ReportsGetWebinarDetailsReportResponse response = api.getWebinarDetailsReport(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webinar poll reports
     *
     * Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebinarPollReportsTest() throws ApiException {
        String webinarId = null;
        ReportsGetWebinarPollReportsResponse response = api.getWebinarPollReports(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webinar Q&amp;A report
     *
     * Retrieve a report on questions asked by participants and answered by panelists, co-hosts and hosts from past webinars.             **Prerequisites:**     * Pro or a higher plan with the Webinar add-on enabled.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebinarQAReportTest() throws ApiException {
        String webinarId = null;
        ReportsGetWebinarQaReportResponse response = api.getWebinarQAReport(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webinar survey report
     *
     * Retrieve a report on past [webinar survey](https://support.zoom.com/hc/en/article?id&#x3D;zm_kb&amp;sysparm_article&#x3D;KB0057559).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebinarSurveyReportTest() throws ApiException {
        String webinarId = null;
        ReportsGetWebinarSurveyReportResponse response = api.getWebinarSurveyReport(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sign In / sign out activity report
     *
     * Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.     **Prerequisites**     * Pro or higher plan.       **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSignInSignOutActivitiesTest() throws ApiException {
        LocalDate from = null;
        LocalDate to = null;
        Integer pageSize = null;
        String nextPageToken = null;
        ReportsListSignInSignOutActivitiesResponse response = api.listSignInSignOutActivities()
                .from(from)
                .to(to)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Get upcoming events report
     *
     * Use this API to list upcoming meeting and/or webinar events within a specified period of time. The report&#39;s time range is limited to one month.  **Prerequisites:**  * A Pro or higher plan  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUpcomingEventsReportTest() throws ApiException {
        LocalDate from = null;
        LocalDate to = null;
        Integer pageSize = null;
        String nextPageToken = null;
        String type = null;
        String groupId = null;
        ReportsListUpcomingEventsReportResponse response = api.listUpcomingEventsReport(from, to)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .type(type)
                .groupId(groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webinar participant reports
     *
     * Get a detailed report on each webinar attendee. You can get webinar participant reports for the last 6 months.    **Prerequisites:**  * A Pro or a higher plan with Webinar add-on enabled.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webinarParticipantsListTest() throws ApiException {
        String webinarId = null;
        Integer pageSize = null;
        String nextPageToken = null;
        String includeFields = null;
        ReportsWebinarParticipantsListResponse response = api.webinarParticipantsList(webinarId)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .includeFields(includeFields)
                .execute();
        // TODO: test validations
    }

}
