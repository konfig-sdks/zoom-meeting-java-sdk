/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DevicesAssignDeviceZpaAssignmentRequest;
import com.konfigthis.client.model.DevicesChangeDeviceAssociationRequest;
import com.konfigthis.client.model.DevicesCreateNewDeviceRequest;
import com.konfigthis.client.model.DevicesGetDetailResponse;
import com.konfigthis.client.model.DevicesGetZpaVersionInfoResponse;
import com.konfigthis.client.model.DevicesListResponse;
import com.konfigthis.client.model.DevicesListZdmGroupInfoResponse;
import com.konfigthis.client.model.DevicesUpdateDeviceNameRequest;
import com.konfigthis.client.model.DevicesUpgradeZpaOsAppRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private static DevicesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DevicesApi(apiClient);
    }

    /**
     * Assign a device to a user or commonarea
     *
     * Assign a device to a user or common area, or move a device to another user or common area, or remove a device.  **Prerequisites:** * Device must be enrolled in Zoom Device Management (ZDM).  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignDeviceZpaAssignmentTest() throws ApiException {
        String macAddress = null;
        String vendor = null;
        String extensionNumber = null;
        api.assignDeviceZpaAssignment(macAddress, vendor)
                .extensionNumber(extensionNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Change device association
     *
     * This Device API lets you change device association from one Zoom Room to another.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)     **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeDeviceAssociationTest() throws ApiException {
        String deviceId = null;
        String roomId = null;
        String appType = null;
        api.changeDeviceAssociation(deviceId)
                .roomId(roomId)
                .appType(appType)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a new device
     *
     * Add a new device to Zoom account.   **Scope:** &#x60;device:write:admin&#x60;       **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** &#x60;Medium&#x60;  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewDeviceTest() throws ApiException {
        String deviceName = null;
        String macAddress = null;
        String serialNumber = null;
        String vendor = null;
        String model = null;
        Integer deviceType = null;
        String roomId = null;
        String userEmail = null;
        String tag = null;
        String zdmGroupId = null;
        String extensionNumber = null;
        api.createNewDevice(deviceName, macAddress, serialNumber, vendor, model, deviceType)
                .roomId(roomId)
                .userEmail(userEmail)
                .tag(tag)
                .zdmGroupId(zdmGroupId)
                .extensionNumber(extensionNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Get device detail
     *
     * Retrieve a device&#39;s details.  **Scopes:** &#x60;device:read:admin&#x60;,&#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailTest() throws ApiException {
        String deviceId = null;
        DevicesGetDetailResponse response = api.getDetail(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get ZPA version info
     *
     * Get ZPA firmware and app version information that can be upgraded for devices.  **Scopes:** &#x60;device:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getZpaVersionInfoTest() throws ApiException {
        String zdmGroupId = null;
        DevicesGetZpaVersionInfoResponse response = api.getZpaVersionInfo(zdmGroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * List devices
     *
     * This API lets you list devices.     **Scopes:** &#x60;device:read:admin&#x60;,&#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String searchText = null;
        String platformOs = null;
        Boolean isEnrolledInZdm = null;
        Integer deviceType = null;
        String deviceVendor = null;
        String deviceModel = null;
        Integer deviceStatus = null;
        Integer pageSize = null;
        String nextPageToken = null;
        DevicesListResponse response = api.list()
                .searchText(searchText)
                .platformOs(platformOs)
                .isEnrolledInZdm(isEnrolledInZdm)
                .deviceType(deviceType)
                .deviceVendor(deviceVendor)
                .deviceModel(deviceModel)
                .deviceStatus(deviceStatus)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Get zdm group info
     *
     * Get Zoom Device Manager (ZDM) group information for an account.  **Scopes:** &#x60;device:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listZdmGroupInfoTest() throws ApiException {
        Integer pageSize = null;
        String nextPageToken = null;
        DevicesListZdmGroupInfoResponse response = api.listZdmGroupInfo()
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete device
     *
     * Delete a device from a Zoom account.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeDeviceZMDTest() throws ApiException {
        String deviceId = null;
        api.removeDeviceZMD(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete ZPA device by vendor and mac address
     *
     * Remove a ZPA device from the device manager, by vendor and mac address.  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeZpaDeviceByVendorAndMacAddressTest() throws ApiException {
        String vendor = null;
        String macAddress = null;
        api.removeZpaDeviceByVendorAndMacAddress(vendor, macAddress)
                .execute();
        // TODO: test validations
    }

    /**
     * Change device 
     *
     * Change device name.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceNameTest() throws ApiException {
        String deviceName = null;
        String deviceId = null;
        String tag = null;
        String roomId = null;
        Integer deviceType = null;
        api.updateDeviceName(deviceName, deviceId)
                .tag(tag)
                .roomId(roomId)
                .deviceType(deviceType)
                .execute();
        // TODO: test validations
    }

    /**
     * upgrade zpa os/app
     *
     * Upgrade ZPA firmware or app by Zoom Device Manager (ZDM) group ID.  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upgradeZpaOsAppTest() throws ApiException {
        String zdmGroupId = null;
        Object data = null;
        api.upgradeZpaOsApp(zdmGroupId, data)
                .execute();
        // TODO: test validations
    }

}
