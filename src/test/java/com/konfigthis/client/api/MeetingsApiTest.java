/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.LocalDate;
import com.konfigthis.client.model.MeetingsAddRegistrantRequest;
import com.konfigthis.client.model.MeetingsAddRegistrantRequestCustomQuestionsInner;
import com.konfigthis.client.model.MeetingsAddRegistrantResponse;
import com.konfigthis.client.model.MeetingsBatchRegistrantsCreateRequest;
import com.konfigthis.client.model.MeetingsBatchRegistrantsCreateRequestRegistrantsInner;
import com.konfigthis.client.model.MeetingsBatchRegistrantsCreateResponse;
import com.konfigthis.client.model.MeetingsControlInMeetingFeaturesRequest;
import com.konfigthis.client.model.MeetingsControlInMeetingFeaturesRequestParams;
import com.konfigthis.client.model.MeetingsCreateBatchPollsRequest;
import com.konfigthis.client.model.MeetingsCreateBatchPollsRequestPollsInner;
import com.konfigthis.client.model.MeetingsCreateBatchPollsResponse;
import com.konfigthis.client.model.MeetingsCreateInviteLinksRequest;
import com.konfigthis.client.model.MeetingsCreateInviteLinksRequestAttendeesInner;
import com.konfigthis.client.model.MeetingsCreateInviteLinksResponse;
import com.konfigthis.client.model.MeetingsCreateMeetingRequest;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestRecurrence;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestSettings;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestTrackingFieldsInner;
import com.konfigthis.client.model.MeetingsCreateMeetingResponse;
import com.konfigthis.client.model.MeetingsCreatePollRequest;
import com.konfigthis.client.model.MeetingsCreatePollRequestQuestionsInner;
import com.konfigthis.client.model.MeetingsCreatePollResponse;
import com.konfigthis.client.model.MeetingsCreateTemplateFromMeetingRequest;
import com.konfigthis.client.model.MeetingsCreateTemplateFromMeetingResponse;
import com.konfigthis.client.model.MeetingsGetDetails200Response;
import com.konfigthis.client.model.MeetingsGetDetailsResponse;
import com.konfigthis.client.model.MeetingsGetInvitationNoteResponse;
import com.konfigthis.client.model.MeetingsGetJoinTokenLocalRecordingResponse;
import com.konfigthis.client.model.MeetingsGetJoinTokenResponse;
import com.konfigthis.client.model.MeetingsGetLivestreamDetailsResponse;
import com.konfigthis.client.model.MeetingsGetMeetingArchiveTokenForLocalArchivingResponse;
import com.konfigthis.client.model.MeetingsGetMeetingSummaryResponse;
import com.konfigthis.client.model.MeetingsGetMeetingSurveyResponse;
import com.konfigthis.client.model.MeetingsGetMeetingTokenResponse;
import com.konfigthis.client.model.MeetingsGetPastMeetingParticipantsResponse;
import com.konfigthis.client.model.MeetingsGetPollResponse;
import com.konfigthis.client.model.MeetingsGetRegistrantDetailsResponse;
import com.konfigthis.client.model.MeetingsGetSipUriWithPasscodeRequest;
import com.konfigthis.client.model.MeetingsGetSipUriWithPasscodeResponse;
import com.konfigthis.client.model.MeetingsListHostScheduledResponse;
import com.konfigthis.client.model.MeetingsListMeetingPollsResponse;
import com.konfigthis.client.model.MeetingsListMeetingSummariesResponse;
import com.konfigthis.client.model.MeetingsListMeetingTemplatesResponse;
import com.konfigthis.client.model.MeetingsListPastMeetingInstancesResponse;
import com.konfigthis.client.model.MeetingsListPastMeetingPollsResponse;
import com.konfigthis.client.model.MeetingsListPastMeetingQaResponse;
import com.konfigthis.client.model.MeetingsListRegistrantsResponse;
import com.konfigthis.client.model.MeetingsListRegistrationQuestionsResponse;
import com.konfigthis.client.model.MeetingsListUpcomingMeetingsResponse;
import com.konfigthis.client.model.MeetingsLivestreamStatusUpdateRequest;
import com.konfigthis.client.model.MeetingsLivestreamStatusUpdateRequestSettings;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequest;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestRecurrence;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettings;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestTrackingFieldsInner;
import com.konfigthis.client.model.MeetingsUpdateLivestreamRequest;
import com.konfigthis.client.model.MeetingsUpdateMeetingPollRequest;
import com.konfigthis.client.model.MeetingsUpdateMeetingPollRequestQuestionsInner;
import com.konfigthis.client.model.MeetingsUpdateMeetingStatusRequest;
import com.konfigthis.client.model.MeetingsUpdateMessageRequest;
import com.konfigthis.client.model.MeetingsUpdateRegistrantStatusRequest;
import com.konfigthis.client.model.MeetingsUpdateRegistrantStatusRequestRegistrantsInner;
import com.konfigthis.client.model.MeetingsUpdateRegistrationQuestionsRequest;
import com.konfigthis.client.model.MeetingsUpdateRegistrationQuestionsRequestCustomQuestionsInner;
import com.konfigthis.client.model.MeetingsUpdateRegistrationQuestionsRequestQuestionsInner;
import com.konfigthis.client.model.MeetingsUpdateSurveyRequest;
import com.konfigthis.client.model.MeetingsUpdateSurveyRequestCustomSurvey;
import java.time.OffsetDateTime;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeetingsApi
 */
@Disabled
public class MeetingsApiTest {

    private static MeetingsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MeetingsApi(apiClient);
    }

    /**
     * Add a meeting registrant
     *
     * Create and submit a user&#39;s registration to a meeting. See [Customizing webinar registration](https://support.zoom.us/hc/en-us/articles/202835649-Customizing-webinar-registration) for details on how to set the requirements for these fields. Note that there is a maximum limit of 4,999 registrants per meeting and users will see an error if the meeting&#39;s capacity is reached.    **Prerequisites:**  * The host must be a **Licensed** user type.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addRegistrantTest() throws ApiException {
        String firstName = null;
        String email = null;
        Long meetingId = null;
        String lastName = null;
        String address = null;
        String city = null;
        String state = null;
        String zip = null;
        String country = null;
        String phone = null;
        String comments = null;
        List<MeetingsAddRegistrantRequestCustomQuestionsInner> customQuestions = null;
        String industry = null;
        String jobTitle = null;
        String noOfEmployees = null;
        String org = null;
        String purchasingTimeFrame = null;
        String roleInPurchaseProcess = null;
        String language = null;
        Boolean autoApprove = null;
        String occurrenceIds = null;
        MeetingsAddRegistrantResponse response = api.addRegistrant(firstName, email, meetingId)
                .lastName(lastName)
                .address(address)
                .city(city)
                .state(state)
                .zip(zip)
                .country(country)
                .phone(phone)
                .comments(comments)
                .customQuestions(customQuestions)
                .industry(industry)
                .jobTitle(jobTitle)
                .noOfEmployees(noOfEmployees)
                .org(org)
                .purchasingTimeFrame(purchasingTimeFrame)
                .roleInPurchaseProcess(roleInPurchaseProcess)
                .language(language)
                .autoApprove(autoApprove)
                .occurrenceIds(occurrenceIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform batch registration
     *
     * Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).       **Prerequisites:**     * The meeting host must be a Licensed user. * The meeting must require registration and should be of type &#x60;2&#x60;, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.            **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchRegistrantsCreateTest() throws ApiException {
        String meetingId = null;
        Boolean autoApprove = null;
        Boolean registrantsConfirmationEmail = null;
        List<MeetingsBatchRegistrantsCreateRequestRegistrantsInner> registrants = null;
        MeetingsBatchRegistrantsCreateResponse response = api.batchRegistrantsCreate(meetingId)
                .autoApprove(autoApprove)
                .registrantsConfirmationEmail(registrantsConfirmationEmail)
                .registrants(registrants)
                .execute();
        // TODO: test validations
    }

    /**
     * Use in-meeting controls
     *
     * Control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants.   **Note:** This API&#39;s recording control only works for cloud recordings. It does **not** work for local recordings.   **Prerequisites:** * The meeting **must** be a live meeting **except** inviting participants to the meeting through [call out (phone)/(room system)].  * Recording control: [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account.  * The user calling this API must be the host or an alternative meeting host.     **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;,&#x60;meeting:master&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void controlInMeetingFeaturesTest() throws ApiException {
        String meetingId = null;
        String method = null;
        MeetingsControlInMeetingFeaturesRequestParams params = null;
        api.controlInMeetingFeatures(meetingId)
                .method(method)
                .params(params)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform batch poll creation
     *
     * Polls allow the meeting host to survey attendees. Create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host&#39;s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBatchPollsTest() throws ApiException {
        String meetingId = null;
        List<MeetingsCreateBatchPollsRequestPollsInner> polls = null;
        MeetingsCreateBatchPollsResponse response = api.createBatchPolls(meetingId)
                .polls(polls)
                .execute();
        // TODO: test validations
    }

    /**
     * Create meeting&#39;s invite links
     *
     * Create a batch of invitation links for a meeting.    **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInviteLinksTest() throws ApiException {
        Long meetingId = null;
        List<MeetingsCreateInviteLinksRequestAttendeesInner> attendees = null;
        Long ttl = null;
        MeetingsCreateInviteLinksResponse response = api.createInviteLinks(meetingId)
                .attendees(attendees)
                .ttl(ttl)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a meeting
     *
     * [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.  * A meeting&#39;s &#x60;start_url&#x60; value is the URL a host or an alternative host can use to start a meeting. The expiration time for the &#x60;start_url&#x60; value is **two hours** for all regular users. * For &#x60;custCreate&#x60; meeting hosts (users created with the &#x60;custCreate&#x60; parameter via the [**Create users**](https://developers.zoom.us/docs/api/rest/reference/zoom-api/methods/#operation/userCreate) API), the expiration time of the &#x60;start_url&#x60; parameter is **90 days** from the generation of the &#x60;start_url&#x60;.  **Note:**   For security reasons, the recommended way to programmatically get the updated &#x60;start_url&#x60; value after expiry is to call the [**Get a meeting**](/api-reference/zoom-api/methods#operation/meeting) API. Refer to the &#x60;start_url&#x60; value in the response.    **100 requests per day**. The rate limit is applied against the &#x60;userId&#x60; of the **meeting host** used to make the request.  **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMeetingTest() throws ApiException {
        String userId = null;
        String agenda = null;
        Boolean defaultPassword = null;
        Integer duration = null;
        String password = null;
        Boolean preSchedule = null;
        MeetingsCreateMeetingRequestRecurrence recurrence = null;
        String scheduleFor = null;
        MeetingsCreateMeetingRequestSettings settings = null;
        OffsetDateTime startTime = null;
        String templateId = null;
        String timezone = null;
        String topic = null;
        List<MeetingsCreateMeetingRequestTrackingFieldsInner> trackingFields = null;
        Integer type = null;
        MeetingsCreateMeetingResponse response = api.createMeeting(userId)
                .agenda(agenda)
                .defaultPassword(defaultPassword)
                .duration(duration)
                .password(password)
                .preSchedule(preSchedule)
                .recurrence(recurrence)
                .scheduleFor(scheduleFor)
                .settings(settings)
                .startTime(startTime)
                .templateId(templateId)
                .timezone(timezone)
                .topic(topic)
                .trackingFields(trackingFields)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a meeting poll
     *
     * Polls allow the meeting host to survey attendees. Create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host&#39;s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPollTest() throws ApiException {
        Long meetingId = null;
        String title = null;
        Boolean anonymous = null;
        Integer pollType = null;
        List<MeetingsCreatePollRequestQuestionsInner> questions = null;
        MeetingsCreatePollResponse response = api.createPoll(meetingId)
                .title(title)
                .anonymous(anonymous)
                .pollType(pollType)
                .questions(questions)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a meeting template from an existing meeting
     *
     * Create a meeting template from an existing meeting.     **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTemplateFromMeetingTest() throws ApiException {
        String userId = null;
        Long meetingId = null;
        String name = null;
        Boolean saveRecurrence = null;
        Boolean overwrite = null;
        MeetingsCreateTemplateFromMeetingResponse response = api.createTemplateFromMeeting(userId)
                .meetingId(meetingId)
                .name(name)
                .saveRecurrence(saveRecurrence)
                .overwrite(overwrite)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a live meeting message
     *
     * Delete a message in a live meeting, based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMeetingChatMessageTest() throws ApiException {
        Long meetingId = null;
        String messageId = null;
        String fileIds = null;
        api.deleteMeetingChatMessage(meetingId, messageId)
                .fileIds(fileIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a meeting survey
     *
     * Delete a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).    **Prerequisites:**  * The host must be a **Pro** user type.  * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host&#39;s account.  * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMeetingSurveyTest() throws ApiException {
        Long meetingId = null;
        api.deleteMeetingSurvey(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a meeting registrant
     *
     * Delete a meeting registrant.            **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRegistrantTest() throws ApiException {
        Integer meetingId = null;
        String registrantId = null;
        String occurrenceId = null;
        api.deleteRegistrant(meetingId, registrantId)
                .occurrenceId(occurrenceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a meeting
     *
     * Retrieve the given meeting&#39;s details.         **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        Long meetingId = null;
        String occurrenceId = null;
        Boolean showPreviousOccurrences = null;
        MeetingsGetDetailsResponse response = api.getDetails(meetingId)
                .occurrenceId(occurrenceId)
                .showPreviousOccurrences(showPreviousOccurrences)
                .execute();
        // TODO: test validations
    }

    /**
     * Get past meeting details
     *
     * Get information about a past meeting.      **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetails_0Test() throws ApiException {
        Object meetingId = null;
        MeetingsGetDetails200Response response = api.getDetails_0(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get meeting invitation
     *
     * Retrieve the meeting invitation note for a specific meeting.  **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvitationNoteTest() throws ApiException {
        Long meetingId = null;
        MeetingsGetInvitationNoteResponse response = api.getInvitationNote(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a meeting&#39;s join token for live streaming
     *
     * Get a meeting&#39;s join token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &amp;quot;hosted by the issuer of the token&amp;quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Allow livestreaming of meetings** user setting enabled in the Zoom web portal.  **Scopes:** &#x60;meeting_token:read:admin:live_streaming&#x60;,&#x60;meeting_token:read:live_streaming&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJoinTokenTest() throws ApiException {
        Long meetingId = null;
        MeetingsGetJoinTokenResponse response = api.getJoinToken(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a meeting&#39;s join token for local recording
     *
     * Get a meeting&#39;s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom meeting. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.   **Prerequisites:**  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** &#x60;meeting_token:read:local_recording&#x60;,&#x60;meeting_token:read:admin:local_recording&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJoinTokenLocalRecordingTest() throws ApiException {
        Long meetingId = null;
        Boolean bypassWaitingRoom = null;
        MeetingsGetJoinTokenLocalRecordingResponse response = api.getJoinTokenLocalRecording(meetingId)
                .bypassWaitingRoom(bypassWaitingRoom)
                .execute();
        // TODO: test validations
    }

    /**
     * Get livestream details
     *
     * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Get a meeting&#39;s livestream configuration details such as Stream URL, Stream Key and Page URL.          **Prerequisites:**     * Meeting host must be a licensed user with a Pro or higher plan.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.            **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLivestreamDetailsTest() throws ApiException {
        String meetingId = null;
        MeetingsGetLivestreamDetailsResponse response = api.getLivestreamDetails(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a meeting&#39;s archive token for local archiving
     *
     * Get a meeting&#39;s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the meeting&#39;s raw audio and video media stream in real-time.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** &#x60;meeting_token:read:admin:local_archiving&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingArchiveTokenForLocalArchivingTest() throws ApiException {
        Long meetingId = null;
        MeetingsGetMeetingArchiveTokenForLocalArchivingResponse response = api.getMeetingArchiveTokenForLocalArchiving(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a meeting summary
     *
     * Displays information about a meeting summary.  **Prerequisites**: * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host&#39;s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** &#x60;meeting_summary:read:admin&#x60;,&#x60;meeting_summary:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingSummaryTest() throws ApiException {
        String meetingId = null;
        MeetingsGetMeetingSummaryResponse response = api.getMeetingSummary()
                .meetingId(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a meeting survey
     *
     * Display information about a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host has a **Pro** license. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled on the host&#39;s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingSurveyTest() throws ApiException {
        Long meetingId = null;
        MeetingsGetMeetingSurveyResponse response = api.getMeetingSurvey(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get meeting&#39;s token
     *
     * Get a meeting&#39;s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom meeting.   **Prerequisites:**  * The **Closed captioning** setting enabled in the Zoom web portal.  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeetingTokenTest() throws ApiException {
        Long meetingId = null;
        String type = null;
        MeetingsGetMeetingTokenResponse response = api.getMeetingToken(meetingId)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Get past meeting participants
     *
     * Retrieve information on participants from a past meeting. Note the API doesn&#39;t return results if there&#39;s only one participant in a meeting.          **Prerequisites:**     * Paid account on a Pro or higher plan.             **Note**: Please double encode your UUID when using this API if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.   **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPastMeetingParticipantsTest() throws ApiException {
        String meetingId = null;
        Integer pageSize = null;
        String nextPageToken = null;
        MeetingsGetPastMeetingParticipantsResponse response = api.getPastMeetingParticipants(meetingId)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a meeting poll
     *
     * Polls allow the meeting host to survey attendees. Retrieve information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).            **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPollTest() throws ApiException {
        Long meetingId = null;
        String pollId = null;
        MeetingsGetPollResponse response = api.getPoll(meetingId, pollId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a meeting registrant
     *
     * Retrieve details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).  **Prerequisites:**  * The account must have a Meeting plan  **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegistrantDetailsTest() throws ApiException {
        Long meetingId = null;
        String registrantId = null;
        MeetingsGetRegistrantDetailsResponse response = api.getRegistrantDetails(meetingId, registrantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a meeting SIP URI with Passcode
     *
     * Get a meeting&#39;s SIP URI.  The URI consists of the meeting ID, (optional, user-supplied) passcode and participant identifier code.  The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period (in seconds).     **Scopes:** &#x60;meeting:write:sip_dialing&#x60;,&#x60;meeting:write:admin:sip_dialing&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSipUriWithPasscodeTest() throws ApiException {
        Long meetingId = null;
        String passcode = null;
        MeetingsGetSipUriWithPasscodeResponse response = api.getSipUriWithPasscode(meetingId)
                .passcode(passcode)
                .execute();
        // TODO: test validations
    }

    /**
     * List meetings
     *
     * List a meeting host user&#39;s scheduled meetings. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.   **Note**  * This API **only** supports scheduled meetings. This API does not return information about instant meetings.  * This API only returns a user&#39;s [unexpired meetings](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).      **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHostScheduledTest() throws ApiException {
        String userId = null;
        String type = null;
        Integer pageSize = null;
        String nextPageToken = null;
        Integer pageNumber = null;
        LocalDate from = null;
        LocalDate to = null;
        String timezone = null;
        MeetingsListHostScheduledResponse response = api.listHostScheduled(userId)
                .type(type)
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .pageNumber(pageNumber)
                .from(from)
                .to(to)
                .timezone(timezone)
                .execute();
        // TODO: test validations
    }

    /**
     * List meeting polls
     *
     * Polls allow the meeting host to survey attendees. List all [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMeetingPollsTest() throws ApiException {
        Long meetingId = null;
        Boolean anonymous = null;
        MeetingsListMeetingPollsResponse response = api.listMeetingPolls(meetingId)
                .anonymous(anonymous)
                .execute();
        // TODO: test validations
    }

    /**
     * List meeting summaries of an account
     *
     * Generates a list of all meeting summaries for an account.  **Prerequisites** * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host&#39;s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** &#x60;meeting_summary:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMeetingSummariesTest() throws ApiException {
        Integer pageSize = null;
        String nextPageToken = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        MeetingsListMeetingSummariesResponse response = api.listMeetingSummaries()
                .pageSize(pageSize)
                .nextPageToken(nextPageToken)
                .from(from)
                .to(to)
                .execute();
        // TODO: test validations
    }

    /**
     * List meeting templates
     *
     * List available [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) for a user. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.    **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMeetingTemplatesTest() throws ApiException {
        String userId = null;
        MeetingsListMeetingTemplatesResponse response = api.listMeetingTemplates(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * List past meeting instances
     *
     * Return a list of past meeting instances.      **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPastMeetingInstancesTest() throws ApiException {
        Long meetingId = null;
        MeetingsListPastMeetingInstancesResponse response = api.listPastMeetingInstances(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * List past meeting&#39;s poll results
     *
     * [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. List poll results of a meeting.           **Prerequisites**:     * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPastMeetingPollsTest() throws ApiException {
        String meetingId = null;
        MeetingsListPastMeetingPollsResponse response = api.listPastMeetingPolls(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * List past meetings&#39; Q&amp;A
     *
     * The question &amp;amp; answer (Q&amp;amp;A) feature for Zoom Meetings lets attendees ask questions during a meeting and lets the other attendees answer those questions.     List Q&amp;amp;A of a specific meeting.  **Prerequisites:**     *   **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPastMeetingQATest() throws ApiException {
        String meetingId = null;
        MeetingsListPastMeetingQaResponse response = api.listPastMeetingQA(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * List meeting registrants
     *
     * A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). List users that have registered for a meeting.            **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRegistrantsTest() throws ApiException {
        Long meetingId = null;
        String occurrenceId = null;
        String status = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        String nextPageToken = null;
        MeetingsListRegistrantsResponse response = api.listRegistrants(meetingId)
                .occurrenceId(occurrenceId)
                .status(status)
                .pageSize(pageSize)
                .pageNumber(pageNumber)
                .nextPageToken(nextPageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List registration questions 
     *
     * List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).        **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRegistrationQuestionsTest() throws ApiException {
        Long meetingId = null;
        MeetingsListRegistrationQuestionsResponse response = api.listRegistrationQuestions(meetingId)
                .execute();
        // TODO: test validations
    }

    /**
     * List upcoming meetings
     *
     * List a Zoom user&#39;s upcoming meetings. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.  **Note** * This API includes the meetings that Zoom users schedule and the meetings they are invited to join. * This API **only** includes upcoming meetings within the next 24 hours.  **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUpcomingMeetingsTest() throws ApiException {
        String userId = null;
        MeetingsListUpcomingMeetingsResponse response = api.listUpcomingMeetings(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Live Stream Status
     *
     * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a meeting&#39;s livestream.          **Prerequisites:**     * Meeting host must have a Pro license.       **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void livestreamStatusUpdateTest() throws ApiException {
        Long meetingId = null;
        String action = null;
        MeetingsLivestreamStatusUpdateRequestSettings settings = null;
        api.livestreamStatusUpdate(meetingId)
                .action(action)
                .settings(settings)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a meeting poll
     *
     * Polls allow the meeting host to survey attendees. Delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).     **Prerequisites**:     * Host user type must be **Pro**. * Polling feature should be enabled in the host&#39;s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pollDeleteTest() throws ApiException {
        Long meetingId = null;
        String pollId = null;
        api.pollDelete(meetingId, pollId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a meeting
     *
     * Delete a meeting.            **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMeetingTest() throws ApiException {
        Long meetingId = null;
        String occurrenceId = null;
        Boolean scheduleForReminder = null;
        Boolean cancelMeetingReminder = null;
        api.removeMeeting(meetingId)
                .occurrenceId(occurrenceId)
                .scheduleForReminder(scheduleForReminder)
                .cancelMeetingReminder(cancelMeetingReminder)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a meeting
     *
     * Update meeting details.  **Note**  * The &#x60;start_time&#x60; value **must** be a future date. If the value is omitted or a date is in the past, the API ignores this value and does **not** update any recurring meetings.  * The &#x60;recurrence&#x60; object is **required**. * This API has a rate limit of **100 requests per day**. You can update a meeting for a maximum of **100 times within a 24-hour period**.      **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDetailsTest() throws ApiException {
        Long meetingId = null;
        String agenda = null;
        Integer duration = null;
        String password = null;
        Boolean preSchedule = null;
        String scheduleFor = null;
        MeetingsUpdateDetailsRequestRecurrence recurrence = null;
        MeetingsUpdateDetailsRequestSettings settings = null;
        OffsetDateTime startTime = null;
        String templateId = null;
        String timezone = null;
        String topic = null;
        List<MeetingsUpdateDetailsRequestTrackingFieldsInner> trackingFields = null;
        Integer type = null;
        String occurrenceId = null;
        api.updateDetails(meetingId)
                .agenda(agenda)
                .duration(duration)
                .password(password)
                .preSchedule(preSchedule)
                .scheduleFor(scheduleFor)
                .recurrence(recurrence)
                .settings(settings)
                .startTime(startTime)
                .templateId(templateId)
                .timezone(timezone)
                .topic(topic)
                .trackingFields(trackingFields)
                .type(type)
                .occurrenceId(occurrenceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a livestream
     *
     * Update a meeting&#39;s livestream information. Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.  **Prerequisites:**  * Meeting host must have a Pro license.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLivestreamTest() throws ApiException {
        URI pageUrl = null;
        String streamKey = null;
        String streamUrl = null;
        Long meetingId = null;
        String resolution = null;
        api.updateLivestream(pageUrl, streamKey, streamUrl, meetingId)
                .resolution(resolution)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a meeting poll
     *
     * Polls allow the meeting host to survey attendees. Update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)            **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMeetingPollTest() throws ApiException {
        Long meetingId = null;
        String pollId = null;
        String title = null;
        Boolean anonymous = null;
        Integer pollType = null;
        List<MeetingsUpdateMeetingPollRequestQuestionsInner> questions = null;
        api.updateMeetingPoll(meetingId, pollId)
                .title(title)
                .anonymous(anonymous)
                .pollType(pollType)
                .questions(questions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update meeting status
     *
     * Update the status of a meeting.            **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMeetingStatusTest() throws ApiException {
        Long meetingId = null;
        String action = null;
        api.updateMeetingStatus(meetingId)
                .action(action)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a live meeting message
     *
     * Update a message in a live meeting, based on ID. **Prerequisites:** * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMessageTest() throws ApiException {
        String messageContent = null;
        Long meetingId = null;
        String messageId = null;
        api.updateMessage(messageContent, meetingId, messageId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update registrant&#39;s status
     *
     * Update a meeting registrant&#39;s status by either approving, cancelling or denying a registrant from joining the meeting.            **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRegistrantStatusTest() throws ApiException {
        String action = null;
        Long meetingId = null;
        List<MeetingsUpdateRegistrantStatusRequestRegistrantsInner> registrants = null;
        String occurrenceId = null;
        api.updateRegistrantStatus(action, meetingId)
                .registrants(registrants)
                .occurrenceId(occurrenceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update registration questions
     *
     * Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).            **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRegistrationQuestionsTest() throws ApiException {
        Long meetingId = null;
        List<MeetingsUpdateRegistrationQuestionsRequestCustomQuestionsInner> customQuestions = null;
        List<MeetingsUpdateRegistrationQuestionsRequestQuestionsInner> questions = null;
        api.updateRegistrationQuestions(meetingId)
                .customQuestions(customQuestions)
                .questions(questions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a meeting survey
     *
     * Update a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host must be a **Pro** user type. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled in the host&#39;s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSurveyTest() throws ApiException {
        Long meetingId = null;
        MeetingsUpdateSurveyRequestCustomSurvey customSurvey = null;
        Boolean showInTheBrowser = null;
        String thirdPartySurvey = null;
        api.updateSurvey(meetingId)
                .customSurvey(customSurvey)
                .showInTheBrowser(showInTheBrowser)
                .thirdPartySurvey(thirdPartySurvey)
                .execute();
        // TODO: test validations
    }

}
