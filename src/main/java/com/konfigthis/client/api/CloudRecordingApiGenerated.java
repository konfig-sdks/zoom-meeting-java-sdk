/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AnalyticsDetailsResponse;
import com.konfigthis.client.model.AnalyticsSummaryResponse;
import com.konfigthis.client.model.CloudRecordingCreateRegistrantRequest;
import com.konfigthis.client.model.CloudRecordingCreateRegistrantRequestCustomQuestionsInner;
import com.konfigthis.client.model.CloudRecordingCreateRegistrantResponse;
import com.konfigthis.client.model.CloudRecordingGetMeetingRecordingsResponse;
import com.konfigthis.client.model.CloudRecordingGetSettingsResponse;
import com.konfigthis.client.model.CloudRecordingListRecordingsResponse;
import com.konfigthis.client.model.CloudRecordingListRegistrantsResponse;
import com.konfigthis.client.model.CloudRecordingListRegistrationQuestionsResponse;
import com.konfigthis.client.model.CloudRecordingRecoverRecordingStatusRequest;
import com.konfigthis.client.model.CloudRecordingRecoverStatusRequest;
import com.konfigthis.client.model.CloudRecordingUpdateRegistrantStatusRequest;
import com.konfigthis.client.model.CloudRecordingUpdateRegistrantStatusRequestRegistrantsInner;
import com.konfigthis.client.model.CloudRecordingUpdateRegistrationQuestionsRequest;
import com.konfigthis.client.model.CloudRecordingUpdateRegistrationQuestionsRequestCustomQuestionsInner;
import com.konfigthis.client.model.CloudRecordingUpdateRegistrationQuestionsRequestQuestionsInner;
import com.konfigthis.client.model.CloudRecordingUpdateSettingsRequest;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CloudRecordingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CloudRecordingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CloudRecordingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getOpenapiAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setOpenapiAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRegistrantCall(Long meetingId, CloudRecordingCreateRegistrantRequest cloudRecordingCreateRegistrantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRecordingCreateRegistrantRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings/registrants"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRegistrantValidateBeforeCall(Long meetingId, CloudRecordingCreateRegistrantRequest cloudRecordingCreateRegistrantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling createRegistrant(Async)");
        }

        return createRegistrantCall(meetingId, cloudRecordingCreateRegistrantRequest, _callback);

    }


    private ApiResponse<CloudRecordingCreateRegistrantResponse> createRegistrantWithHttpInfo(Long meetingId, CloudRecordingCreateRegistrantRequest cloudRecordingCreateRegistrantRequest) throws ApiException {
        okhttp3.Call localVarCall = createRegistrantValidateBeforeCall(meetingId, cloudRecordingCreateRegistrantRequest, null);
        Type localVarReturnType = new TypeToken<CloudRecordingCreateRegistrantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRegistrantAsync(Long meetingId, CloudRecordingCreateRegistrantRequest cloudRecordingCreateRegistrantRequest, final ApiCallback<CloudRecordingCreateRegistrantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRegistrantValidateBeforeCall(meetingId, cloudRecordingCreateRegistrantRequest, _callback);
        Type localVarReturnType = new TypeToken<CloudRecordingCreateRegistrantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRegistrantRequestBuilder {
        private final String email;
        private final String firstName;
        private final Long meetingId;
        private String address;
        private String city;
        private String comments;
        private String country;
        private List<CloudRecordingCreateRegistrantRequestCustomQuestionsInner> customQuestions;
        private String industry;
        private String jobTitle;
        private String lastName;
        private String noOfEmployees;
        private String org;
        private String phone;
        private String purchasingTimeFrame;
        private String roleInPurchaseProcess;
        private String state;
        private String status;
        private String zip;

        private CreateRegistrantRequestBuilder(String email, String firstName, Long meetingId) {
            this.email = email;
            this.firstName = firstName;
            this.meetingId = meetingId;
        }

        /**
         * Set address
         * @param address The registrant&#39;s address. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set city
         * @param city The registrant&#39;s city. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set comments
         * @param comments The registrant&#39;s questions and comments. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Set country
         * @param country The registrant&#39;s two-letter [country code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries). (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set customQuestions
         * @param customQuestions Information about custom questions. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder customQuestions(List<CloudRecordingCreateRegistrantRequestCustomQuestionsInner> customQuestions) {
            this.customQuestions = customQuestions;
            return this;
        }
        
        /**
         * Set industry
         * @param industry The registrant&#39;s industry. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder industry(String industry) {
            this.industry = industry;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle The registrant&#39;s job title. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The registrant&#39;s last name. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set noOfEmployees
         * @param noOfEmployees The registrant&#39;s number of employees:  * &#x60;1-20&#x60;  * &#x60;21-50&#x60;  * &#x60;51-100&#x60;  * &#x60;101-250&#x60;  * &#x60;251-500&#x60;  * &#x60;501-1,000&#x60;  * &#x60;1,001-5,000&#x60;  * &#x60;5,001-10,000&#x60;  * &#x60;More than 10,000&#x60; (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder noOfEmployees(String noOfEmployees) {
            this.noOfEmployees = noOfEmployees;
            return this;
        }
        
        /**
         * Set org
         * @param org The registrant&#39;s organization. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder org(String org) {
            this.org = org;
            return this;
        }
        
        /**
         * Set phone
         * @param phone The registrant&#39;s phone number. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set purchasingTimeFrame
         * @param purchasingTimeFrame The registrant&#39;s purchasing time frame:  * &#x60;Within a month&#x60;  * &#x60;1-3 months&#x60;  * &#x60;4-6 months&#x60;  * &#x60;More than 6 months&#x60;  * &#x60;No timeframe&#x60; (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder purchasingTimeFrame(String purchasingTimeFrame) {
            this.purchasingTimeFrame = purchasingTimeFrame;
            return this;
        }
        
        /**
         * Set roleInPurchaseProcess
         * @param roleInPurchaseProcess The registrant&#39;s role in the purchase process:  * &#x60;Decision Maker&#x60;  * &#x60;Evaluator/Recommender&#x60;  * &#x60;Influencer&#x60;  * &#x60;Not involved&#x60; (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder roleInPurchaseProcess(String roleInPurchaseProcess) {
            this.roleInPurchaseProcess = roleInPurchaseProcess;
            return this;
        }
        
        /**
         * Set state
         * @param state The registrant&#39;s state or province. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set status
         * @param status The registrant&#39;s status:  * &#x60;approved&#x60; &amp;mdash; Registrant is approved.  * &#x60;denied&#x60; &amp;mdash; Registrant is denied.  * &#x60;pending&#x60; &amp;mdash; Registrant is waiting for approval. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set zip
         * @param zip The registrant&#39;s ZIP or postal code. (optional)
         * @return CreateRegistrantRequestBuilder
         */
        public CreateRegistrantRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Build call for createRegistrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Registration submitted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CloudRecordingCreateRegistrantRequest cloudRecordingCreateRegistrantRequest = buildBodyParams();
            return createRegistrantCall(meetingId, cloudRecordingCreateRegistrantRequest, _callback);
        }

        private CloudRecordingCreateRegistrantRequest buildBodyParams() {
            CloudRecordingCreateRegistrantRequest cloudRecordingCreateRegistrantRequest = new CloudRecordingCreateRegistrantRequest();
            cloudRecordingCreateRegistrantRequest.address(this.address);
            cloudRecordingCreateRegistrantRequest.city(this.city);
            cloudRecordingCreateRegistrantRequest.comments(this.comments);
            cloudRecordingCreateRegistrantRequest.country(this.country);
            cloudRecordingCreateRegistrantRequest.customQuestions(this.customQuestions);
            cloudRecordingCreateRegistrantRequest.email(this.email);
            cloudRecordingCreateRegistrantRequest.firstName(this.firstName);
            cloudRecordingCreateRegistrantRequest.industry(this.industry);
            cloudRecordingCreateRegistrantRequest.jobTitle(this.jobTitle);
            cloudRecordingCreateRegistrantRequest.lastName(this.lastName);
            if (this.noOfEmployees != null)
            cloudRecordingCreateRegistrantRequest.noOfEmployees(CloudRecordingCreateRegistrantRequest.NoOfEmployeesEnum.fromValue(this.noOfEmployees));
            cloudRecordingCreateRegistrantRequest.org(this.org);
            cloudRecordingCreateRegistrantRequest.phone(this.phone);
            if (this.purchasingTimeFrame != null)
            cloudRecordingCreateRegistrantRequest.purchasingTimeFrame(CloudRecordingCreateRegistrantRequest.PurchasingTimeFrameEnum.fromValue(this.purchasingTimeFrame));
            if (this.roleInPurchaseProcess != null)
            cloudRecordingCreateRegistrantRequest.roleInPurchaseProcess(CloudRecordingCreateRegistrantRequest.RoleInPurchaseProcessEnum.fromValue(this.roleInPurchaseProcess));
            cloudRecordingCreateRegistrantRequest.state(this.state);
            if (this.status != null)
            cloudRecordingCreateRegistrantRequest.status(CloudRecordingCreateRegistrantRequest.StatusEnum.fromValue(this.status));
            cloudRecordingCreateRegistrantRequest.zip(this.zip);
            return cloudRecordingCreateRegistrantRequest;
        }

        /**
         * Execute createRegistrant request
         * @return CloudRecordingCreateRegistrantResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Registration submitted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public CloudRecordingCreateRegistrantResponse execute() throws ApiException {
            CloudRecordingCreateRegistrantRequest cloudRecordingCreateRegistrantRequest = buildBodyParams();
            ApiResponse<CloudRecordingCreateRegistrantResponse> localVarResp = createRegistrantWithHttpInfo(meetingId, cloudRecordingCreateRegistrantRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRegistrant request with HTTP info returned
         * @return ApiResponse&lt;CloudRecordingCreateRegistrantResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Registration submitted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CloudRecordingCreateRegistrantResponse> executeWithHttpInfo() throws ApiException {
            CloudRecordingCreateRegistrantRequest cloudRecordingCreateRegistrantRequest = buildBodyParams();
            return createRegistrantWithHttpInfo(meetingId, cloudRecordingCreateRegistrantRequest);
        }

        /**
         * Execute createRegistrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Registration submitted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CloudRecordingCreateRegistrantResponse> _callback) throws ApiException {
            CloudRecordingCreateRegistrantRequest cloudRecordingCreateRegistrantRequest = buildBodyParams();
            return createRegistrantAsync(meetingId, cloudRecordingCreateRegistrantRequest, _callback);
        }
    }

    /**
     * Create a recording registrant
     * Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://developers.zoom.us) to view these recordings.  Use this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.       **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return CreateRegistrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Registration submitted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public CreateRegistrantRequestBuilder createRegistrant(String email, String firstName, Long meetingId) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new CreateRegistrantRequestBuilder(email, firstName, meetingId);
    }
    private okhttp3.Call deleteMeetingRecordingsCall(String meetingId, String action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeetingRecordingsValidateBeforeCall(String meetingId, String action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling deleteMeetingRecordings(Async)");
        }

        return deleteMeetingRecordingsCall(meetingId, action, _callback);

    }


    private ApiResponse<Void> deleteMeetingRecordingsWithHttpInfo(String meetingId, String action) throws ApiException {
        okhttp3.Call localVarCall = deleteMeetingRecordingsValidateBeforeCall(meetingId, action, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMeetingRecordingsAsync(String meetingId, String action, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeetingRecordingsValidateBeforeCall(meetingId, action, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMeetingRecordingsRequestBuilder {
        private final String meetingId;
        private String action;

        private DeleteMeetingRecordingsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set action
         * @param action The recording delete actions:    &#x60;trash&#x60; - Move recording to trash.    &#x60;delete&#x60; - Delete recording permanently. (optional, default to trash)
         * @return DeleteMeetingRecordingsRequestBuilder
         */
        public DeleteMeetingRecordingsRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Build call for deleteMeetingRecordings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recordings deleted.   **Error Code:** &#x60;200&#x60;      You do not have the right permission. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}. &lt;br/&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; This recording was selected for a simulive webinar. You cannot delete or trash it.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMeetingRecordingsCall(meetingId, action, _callback);
        }


        /**
         * Execute deleteMeetingRecordings request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recordings deleted.   **Error Code:** &#x60;200&#x60;      You do not have the right permission. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}. &lt;br/&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; This recording was selected for a simulive webinar. You cannot delete or trash it.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMeetingRecordingsWithHttpInfo(meetingId, action);
        }

        /**
         * Execute deleteMeetingRecordings request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recordings deleted.   **Error Code:** &#x60;200&#x60;      You do not have the right permission. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}. &lt;br/&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; This recording was selected for a simulive webinar. You cannot delete or trash it.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMeetingRecordingsWithHttpInfo(meetingId, action);
        }

        /**
         * Execute deleteMeetingRecordings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recordings deleted.   **Error Code:** &#x60;200&#x60;      You do not have the right permission. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}. &lt;br/&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; This recording was selected for a simulive webinar. You cannot delete or trash it.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMeetingRecordingsAsync(meetingId, action, _callback);
        }
    }

    /**
     * Delete meeting recordings
     * Delete all recording files of a meeting.           **Prerequisites**: * Cloud Recording should be enabled on the user&#39;s account.       **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.  (required)
     * @return DeleteMeetingRecordingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recordings deleted.   **Error Code:** &#x60;200&#x60;      You do not have the right permission. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}. &lt;br/&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; This recording was selected for a simulive webinar. You cannot delete or trash it.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMeetingRecordingsRequestBuilder deleteMeetingRecordings(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new DeleteMeetingRecordingsRequestBuilder(meetingId);
    }
    private okhttp3.Call deleteRecordingCall(String meetingId, String recordingId, String action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings/{recordingId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "recordingId" + "}", localVarApiClient.escapeString(recordingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRecordingValidateBeforeCall(String meetingId, String recordingId, String action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling deleteRecording(Async)");
        }

        // verify the required parameter 'recordingId' is set
        if (recordingId == null) {
            throw new ApiException("Missing the required parameter 'recordingId' when calling deleteRecording(Async)");
        }

        return deleteRecordingCall(meetingId, recordingId, action, _callback);

    }


    private ApiResponse<Void> deleteRecordingWithHttpInfo(String meetingId, String recordingId, String action) throws ApiException {
        okhttp3.Call localVarCall = deleteRecordingValidateBeforeCall(meetingId, recordingId, action, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRecordingAsync(String meetingId, String recordingId, String action, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRecordingValidateBeforeCall(meetingId, recordingId, action, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRecordingRequestBuilder {
        private final String meetingId;
        private final String recordingId;
        private String action;

        private DeleteRecordingRequestBuilder(String meetingId, String recordingId) {
            this.meetingId = meetingId;
            this.recordingId = recordingId;
        }

        /**
         * Set action
         * @param action The recording delete actions:    &#x60;trash&#x60; - Move recording to trash.    &#x60;delete&#x60; - Delete recording permanently. (optional, default to trash)
         * @return DeleteRecordingRequestBuilder
         */
        public DeleteRecordingRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Build call for deleteRecording
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recording deleted.   **Error Code:** &#x60;200&#x60;     You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording file deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3303&#x60; &lt;br&gt; You can not delete an uncompleted meeting. &lt;br/&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; This recording was selected for a simulive webinar. You cannot delete or trash it. &lt;br&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; Unable to delete this file because this recording is being used for Zoom IQ for Sales.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRecordingCall(meetingId, recordingId, action, _callback);
        }


        /**
         * Execute deleteRecording request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recording deleted.   **Error Code:** &#x60;200&#x60;     You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording file deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3303&#x60; &lt;br&gt; You can not delete an uncompleted meeting. &lt;br/&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; This recording was selected for a simulive webinar. You cannot delete or trash it. &lt;br&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; Unable to delete this file because this recording is being used for Zoom IQ for Sales.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteRecordingWithHttpInfo(meetingId, recordingId, action);
        }

        /**
         * Execute deleteRecording request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recording deleted.   **Error Code:** &#x60;200&#x60;     You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording file deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3303&#x60; &lt;br&gt; You can not delete an uncompleted meeting. &lt;br/&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; This recording was selected for a simulive webinar. You cannot delete or trash it. &lt;br&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; Unable to delete this file because this recording is being used for Zoom IQ for Sales.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRecordingWithHttpInfo(meetingId, recordingId, action);
        }

        /**
         * Execute deleteRecording request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recording deleted.   **Error Code:** &#x60;200&#x60;     You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording file deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3303&#x60; &lt;br&gt; You can not delete an uncompleted meeting. &lt;br/&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; This recording was selected for a simulive webinar. You cannot delete or trash it. &lt;br&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; Unable to delete this file because this recording is being used for Zoom IQ for Sales.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRecordingAsync(meetingId, recordingId, action, _callback);
        }
    }

    /**
     * Delete a meeting recording file
     * Delete a specific recording file from a meeting.&amp;lt;p style&#x3D;&amp;quot;background-color:#e1f5fe; color:#01579b; padding:8px&amp;quot;&amp;gt; &amp;lt;b&amp;gt;Note:&amp;lt;/b&amp;gt; To use this API, you must enable the &amp;lt;b&amp;gt;The host can delete cloud recordings&amp;lt;/b&amp;gt; setting. You can find this setting in the &amp;lt;b&amp;gt;Recording&amp;lt;/b&amp;gt; tab of the &amp;lt;b&amp;gt;Settings&amp;lt;/b&amp;gt; interface in the [Zoom web portal](https://zoom.us/).&amp;lt;/p&amp;gt;    **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.  (required)
     * @param recordingId The recording ID. (required)
     * @return DeleteRecordingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recording deleted.   **Error Code:** &#x60;200&#x60;     You do not have the right permissions. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording file deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3303&#x60; &lt;br&gt; You can not delete an uncompleted meeting. &lt;br/&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; This recording was selected for a simulive webinar. You cannot delete or trash it. &lt;br&gt;  **Error Code:** &#x60;3332&#x60; &lt;br&gt; Unable to delete this file because this recording is being used for Zoom IQ for Sales.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRecordingRequestBuilder deleteRecording(String meetingId, String recordingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        if (recordingId == null) throw new IllegalArgumentException("\"recordingId\" is required but got null");
            

        return new DeleteRecordingRequestBuilder(meetingId, recordingId);
    }
    private okhttp3.Call detailsCall(String meetingId, Integer pageSize, String nextPageToken, LocalDate from, LocalDate to, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings/analytics_details"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detailsValidateBeforeCall(String meetingId, Integer pageSize, String nextPageToken, LocalDate from, LocalDate to, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling details(Async)");
        }

        return detailsCall(meetingId, pageSize, nextPageToken, from, to, type, _callback);

    }


    private ApiResponse<AnalyticsDetailsResponse> detailsWithHttpInfo(String meetingId, Integer pageSize, String nextPageToken, LocalDate from, LocalDate to, String type) throws ApiException {
        okhttp3.Call localVarCall = detailsValidateBeforeCall(meetingId, pageSize, nextPageToken, from, to, type, null);
        Type localVarReturnType = new TypeToken<AnalyticsDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call detailsAsync(String meetingId, Integer pageSize, String nextPageToken, LocalDate from, LocalDate to, String type, final ApiCallback<AnalyticsDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detailsValidateBeforeCall(meetingId, pageSize, nextPageToken, from, to, type, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DetailsRequestBuilder {
        private final String meetingId;
        private Integer pageSize;
        private String nextPageToken;
        private LocalDate from;
        private LocalDate to;
        private String type;

        private DetailsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return DetailsRequestBuilder
         */
        public DetailsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return DetailsRequestBuilder
         */
        public DetailsRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Set from
         * @param from The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date. (optional)
         * @return DetailsRequestBuilder
         */
        public DetailsRequestBuilder from(LocalDate from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to The end date for the monthly range to query. The maximum range can be a month. (optional)
         * @return DetailsRequestBuilder
         */
        public DetailsRequestBuilder to(LocalDate to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of analytics details:  * &#x60;by_view&#x60; &amp;mdash; by_view.  * &#x60;by_download&#x60; &amp;mdash; by_download. (optional)
         * @return DetailsRequestBuilder
         */
        public DetailsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for details
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Analytics Detail listed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User not found on this account: {accountId}   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return detailsCall(meetingId, pageSize, nextPageToken, from, to, type, _callback);
        }


        /**
         * Execute details request
         * @return AnalyticsDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Analytics Detail listed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User not found on this account: {accountId}   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public AnalyticsDetailsResponse execute() throws ApiException {
            ApiResponse<AnalyticsDetailsResponse> localVarResp = detailsWithHttpInfo(meetingId, pageSize, nextPageToken, from, to, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute details request with HTTP info returned
         * @return ApiResponse&lt;AnalyticsDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Analytics Detail listed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User not found on this account: {accountId}   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnalyticsDetailsResponse> executeWithHttpInfo() throws ApiException {
            return detailsWithHttpInfo(meetingId, pageSize, nextPageToken, from, to, type);
        }

        /**
         * Execute details request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Analytics Detail listed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User not found on this account: {accountId}   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnalyticsDetailsResponse> _callback) throws ApiException {
            return detailsAsync(meetingId, pageSize, nextPageToken, from, to, type, _callback);
        }
    }

    /**
     * Get Meeting Recording&#39;s Analytics Details
     * Use this API to return a meeting recording&#39;s [analytics details](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user&#39;s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    &#x60;curl -H &amp;quot;Authorization: Bearer &amp;lt;ACCESS_TOKEN&amp;gt;&amp;quot; https://{{base-domain}}/rec/archive/download/xyz&#x60;       **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.  (required)
     * @return DetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Analytics Detail listed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User not found on this account: {accountId}   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
     </table>
     */
    public DetailsRequestBuilder details(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new DetailsRequestBuilder(meetingId);
    }
    private okhttp3.Call getMeetingRecordingsCall(String meetingId, String includeFields, Integer ttl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_fields", includeFields));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingRecordingsValidateBeforeCall(String meetingId, String includeFields, Integer ttl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getMeetingRecordings(Async)");
        }

        return getMeetingRecordingsCall(meetingId, includeFields, ttl, _callback);

    }


    private ApiResponse<CloudRecordingGetMeetingRecordingsResponse> getMeetingRecordingsWithHttpInfo(String meetingId, String includeFields, Integer ttl) throws ApiException {
        okhttp3.Call localVarCall = getMeetingRecordingsValidateBeforeCall(meetingId, includeFields, ttl, null);
        Type localVarReturnType = new TypeToken<CloudRecordingGetMeetingRecordingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingRecordingsAsync(String meetingId, String includeFields, Integer ttl, final ApiCallback<CloudRecordingGetMeetingRecordingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingRecordingsValidateBeforeCall(meetingId, includeFields, ttl, _callback);
        Type localVarReturnType = new TypeToken<CloudRecordingGetMeetingRecordingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingRecordingsRequestBuilder {
        private final String meetingId;
        private String includeFields;
        private Integer ttl;

        private GetMeetingRecordingsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set includeFields
         * @param includeFields The &#x60;download_access_token&#x60; value for downloading the meeting&#39;s recordings. (optional)
         * @return GetMeetingRecordingsRequestBuilder
         */
        public GetMeetingRecordingsRequestBuilder includeFields(String includeFields) {
            this.includeFields = includeFields;
            return this;
        }
        
        /**
         * Set ttl
         * @param ttl The &#x60;download_access_token&#x60; Time to Live (TTL) value. This parameter is only valid if the &#x60;include_fields&#x60; query parameter contains the &#x60;download_access_token&#x60; value. (optional)
         * @return GetMeetingRecordingsRequestBuilder
         */
        public GetMeetingRecordingsRequestBuilder ttl(Integer ttl) {
            this.ttl = ttl;
            return this;
        }
        
        /**
         * Build call for getMeetingRecordings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recording object returned.   **Error Code:** &#x60;200&#x60;      You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User not found on this account: {accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User \&quot;{userId}\&quot; does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3301&#x60; &lt;br&gt;  There is no recording for this meeting. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingRecordingsCall(meetingId, includeFields, ttl, _callback);
        }


        /**
         * Execute getMeetingRecordings request
         * @return CloudRecordingGetMeetingRecordingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recording object returned.   **Error Code:** &#x60;200&#x60;      You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User not found on this account: {accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User \&quot;{userId}\&quot; does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3301&#x60; &lt;br&gt;  There is no recording for this meeting. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public CloudRecordingGetMeetingRecordingsResponse execute() throws ApiException {
            ApiResponse<CloudRecordingGetMeetingRecordingsResponse> localVarResp = getMeetingRecordingsWithHttpInfo(meetingId, includeFields, ttl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingRecordings request with HTTP info returned
         * @return ApiResponse&lt;CloudRecordingGetMeetingRecordingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recording object returned.   **Error Code:** &#x60;200&#x60;      You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User not found on this account: {accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User \&quot;{userId}\&quot; does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3301&#x60; &lt;br&gt;  There is no recording for this meeting. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CloudRecordingGetMeetingRecordingsResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingRecordingsWithHttpInfo(meetingId, includeFields, ttl);
        }

        /**
         * Execute getMeetingRecordings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recording object returned.   **Error Code:** &#x60;200&#x60;      You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User not found on this account: {accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User \&quot;{userId}\&quot; does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3301&#x60; &lt;br&gt;  There is no recording for this meeting. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CloudRecordingGetMeetingRecordingsResponse> _callback) throws ApiException {
            return getMeetingRecordingsAsync(meetingId, includeFields, ttl, _callback);
        }
    }

    /**
     * Get meeting recordings
     * Returns all of a meeting&#39;s [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4).   Use the &#x60;download_url&#x60; property listed in the response to download the recording files.  To access a passcode-protected cloud recording, send the user&#39;s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header.     Example:  &#x60;curl -H &#39;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&#39; https://{{base-domain}}/rec/archive/download/xyz&#x60;    **Scopes:** &#x60;recording:read&#x60;,&#x60;phone_recording:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param meetingId To get a meeting&#39;s cloud recordings, provide the meeting ID or UUID. If providing the meeting ID instead of UUID, the response will be for the latest meeting instance.   To get a webinar&#39;s cloud recordings, provide the webinar&#39;s ID or UUID. If providing the webinar ID instead of UUID, the response will be for the latest webinar instance.   If a UUID starts with &#x60;/&#x60; or contains &#x60;//&#x60; (example: &#x60;/ajXp112QmuoKj4854875&#x3D;&#x3D;&#x60;), **[double encode](https://developers.zoom.us) the UUID** before making an API request.  (required)
     * @return GetMeetingRecordingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recording object returned.   **Error Code:** &#x60;200&#x60;      You do not have the right permissions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User not found on this account: {accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User \&quot;{userId}\&quot; does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3301&#x60; &lt;br&gt;  There is no recording for this meeting. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingRecordingsRequestBuilder getMeetingRecordings(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new GetMeetingRecordingsRequestBuilder(meetingId);
    }
    private okhttp3.Call getSettingsCall(String meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings/settings"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(String meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getSettings(Async)");
        }

        return getSettingsCall(meetingId, _callback);

    }


    private ApiResponse<CloudRecordingGetSettingsResponse> getSettingsWithHttpInfo(String meetingId) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<CloudRecordingGetSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(String meetingId, final ApiCallback<CloudRecordingGetSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<CloudRecordingGetSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSettingsRequestBuilder {
        private final String meetingId;

        private GetSettingsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;    Meeting recording settings returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(meetingId, _callback);
        }


        /**
         * Execute getSettings request
         * @return CloudRecordingGetSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;    Meeting recording settings returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public CloudRecordingGetSettingsResponse execute() throws ApiException {
            ApiResponse<CloudRecordingGetSettingsResponse> localVarResp = getSettingsWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;CloudRecordingGetSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;    Meeting recording settings returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CloudRecordingGetSettingsResponse> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo(meetingId);
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;    Meeting recording settings returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CloudRecordingGetSettingsResponse> _callback) throws ApiException {
            return getSettingsAsync(meetingId, _callback);
        }
    }

    /**
     * Get meeting recording settings
     * Retrieves settings applied to a meeting&#39;s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).            **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param meetingId The meeting ID enables you to get cloud recording of a: - Meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   - Webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **double encode** the UUID before making an API request.  (required)
     * @return GetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;    Meeting recording settings returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsRequestBuilder getSettings(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new GetSettingsRequestBuilder(meetingId);
    }
    private okhttp3.Call listRecordingsCall(String userId, Integer pageSize, String nextPageToken, String mc, Boolean trash, LocalDate from, LocalDate to, String trashType, Integer meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/recordings"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        if (mc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mc", mc));
        }

        if (trash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trash", trash));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (trashType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trash_type", trashType));
        }

        if (meetingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meeting_id", meetingId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRecordingsValidateBeforeCall(String userId, Integer pageSize, String nextPageToken, String mc, Boolean trash, LocalDate from, LocalDate to, String trashType, Integer meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listRecordings(Async)");
        }

        return listRecordingsCall(userId, pageSize, nextPageToken, mc, trash, from, to, trashType, meetingId, _callback);

    }


    private ApiResponse<CloudRecordingListRecordingsResponse> listRecordingsWithHttpInfo(String userId, Integer pageSize, String nextPageToken, String mc, Boolean trash, LocalDate from, LocalDate to, String trashType, Integer meetingId) throws ApiException {
        okhttp3.Call localVarCall = listRecordingsValidateBeforeCall(userId, pageSize, nextPageToken, mc, trash, from, to, trashType, meetingId, null);
        Type localVarReturnType = new TypeToken<CloudRecordingListRecordingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRecordingsAsync(String userId, Integer pageSize, String nextPageToken, String mc, Boolean trash, LocalDate from, LocalDate to, String trashType, Integer meetingId, final ApiCallback<CloudRecordingListRecordingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRecordingsValidateBeforeCall(userId, pageSize, nextPageToken, mc, trash, from, to, trashType, meetingId, _callback);
        Type localVarReturnType = new TypeToken<CloudRecordingListRecordingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRecordingsRequestBuilder {
        private final String userId;
        private Integer pageSize;
        private String nextPageToken;
        private String mc;
        private Boolean trash;
        private LocalDate from;
        private LocalDate to;
        private String trashType;
        private Integer meetingId;

        private ListRecordingsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListRecordingsRequestBuilder
         */
        public ListRecordingsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes. (optional)
         * @return ListRecordingsRequestBuilder
         */
        public ListRecordingsRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Set mc
         * @param mc The query metadata of the recording if using an on-premise meeting connector for the meeting. (optional, default to false)
         * @return ListRecordingsRequestBuilder
         */
        public ListRecordingsRequestBuilder mc(String mc) {
            this.mc = mc;
            return this;
        }
        
        /**
         * Set trash
         * @param trash The query trash. * &#x60;true&#x60; - List recordings from trash.   * &#x60;false&#x60; - Do not list recordings from the trash.    The default value is &#x60;false&#x60;. If you set it to &#x60;true&#x60;, you can use the &#x60;trash_type&#x60; property to indicate the type of Cloud recording that you need to retrieve.  (optional, default to false)
         * @return ListRecordingsRequestBuilder
         */
        public ListRecordingsRequestBuilder trash(Boolean trash) {
            this.trash = trash;
            return this;
        }
        
        /**
         * Set from
         * @param from The start date in &#39;yyyy-mm-dd&#39; UTC format for the date range where you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date.   For example, if you make the API request on June 30, 2020, without providing the &#x60;from&#x60; and &#x60;to&#x60; parameters, by default the value of &#39;from&#39; field will be &#x60;2020-06-30&#x60; and the value of the &#39;to&#39; field will be &#x60;2020-07-01&#x60;.   **Note**: The &#x60;trash&#x60; files cannot be filtered by date range and thus, the &#x60;from&#x60; and &#x60;to&#x60; fields should not be used for trash files. (optional)
         * @return ListRecordingsRequestBuilder
         */
        public ListRecordingsRequestBuilder from(LocalDate from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to The end date in &#39;yyyy-mm-dd&#39; &#39;yyyy-mm-dd&#39; UTC format.  (optional)
         * @return ListRecordingsRequestBuilder
         */
        public ListRecordingsRequestBuilder to(LocalDate to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set trashType
         * @param trashType The type of cloud recording to retrieve from the trash.     *   &#x60;meeting_recordings&#x60;: List all meeting recordings from the trash.    *  &#x60;recording_file&#x60;: List all individual recording files from the trash.  (optional, default to meeting_recordings)
         * @return ListRecordingsRequestBuilder
         */
        public ListRecordingsRequestBuilder trashType(String trashType) {
            this.trashType = trashType;
            return this;
        }
        
        /**
         * Set meetingId
         * @param meetingId The meeting ID. (optional)
         * @return ListRecordingsRequestBuilder
         */
        public ListRecordingsRequestBuilder meetingId(Integer meetingId) {
            this.meetingId = meetingId;
            return this;
        }
        
        /**
         * Build call for listRecordings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of recording objects returned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized     **Error Code:** &#x60;124&#x60; &lt;br&gt;  Requires an access token. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist, or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3301&#x60; &lt;br&gt;  There is no recording for this session. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRecordingsCall(userId, pageSize, nextPageToken, mc, trash, from, to, trashType, meetingId, _callback);
        }


        /**
         * Execute listRecordings request
         * @return CloudRecordingListRecordingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of recording objects returned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized     **Error Code:** &#x60;124&#x60; &lt;br&gt;  Requires an access token. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist, or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3301&#x60; &lt;br&gt;  There is no recording for this session. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public CloudRecordingListRecordingsResponse execute() throws ApiException {
            ApiResponse<CloudRecordingListRecordingsResponse> localVarResp = listRecordingsWithHttpInfo(userId, pageSize, nextPageToken, mc, trash, from, to, trashType, meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRecordings request with HTTP info returned
         * @return ApiResponse&lt;CloudRecordingListRecordingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of recording objects returned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized     **Error Code:** &#x60;124&#x60; &lt;br&gt;  Requires an access token. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist, or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3301&#x60; &lt;br&gt;  There is no recording for this session. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CloudRecordingListRecordingsResponse> executeWithHttpInfo() throws ApiException {
            return listRecordingsWithHttpInfo(userId, pageSize, nextPageToken, mc, trash, from, to, trashType, meetingId);
        }

        /**
         * Execute listRecordings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of recording objects returned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized     **Error Code:** &#x60;124&#x60; &lt;br&gt;  Requires an access token. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist, or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3301&#x60; &lt;br&gt;  There is no recording for this session. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CloudRecordingListRecordingsResponse> _callback) throws ApiException {
            return listRecordingsAsync(userId, pageSize, nextPageToken, mc, trash, from, to, trashType, meetingId, _callback);
        }
    }

    /**
     * List all recordings
     * Lists all [cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) for a user.    For user-level apps, pass the [&#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.  To access a user&#39;s passcode protected cloud recording, send the user&#39;s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a bearer token in the authorization header.    Example:  &#x60;curl -H \&quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;\&quot; https://{{base-domain}}/rec/archive/download/xyz&#x60;    **Prerequisites:**   * Must have a Pro or a higher plan.   * Must enable Cloud Recording on the user&#39;s account.  **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param userId The user&#39;s ID or email address. For user-level apps, pass the &#x60;me&#x60; value. (required)
     * @return ListRecordingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of recording objects returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized     **Error Code:** &#x60;124&#x60; &lt;br&gt;  Requires an access token. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist, or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3301&#x60; &lt;br&gt;  There is no recording for this session. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListRecordingsRequestBuilder listRecordings(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListRecordingsRequestBuilder(userId);
    }
    private okhttp3.Call listRegistrantsCall(Long meetingId, String status, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings/registrants"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRegistrantsValidateBeforeCall(Long meetingId, String status, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling listRegistrants(Async)");
        }

        return listRegistrantsCall(meetingId, status, pageSize, pageNumber, nextPageToken, _callback);

    }


    private ApiResponse<CloudRecordingListRegistrantsResponse> listRegistrantsWithHttpInfo(Long meetingId, String status, Integer pageSize, Integer pageNumber, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = listRegistrantsValidateBeforeCall(meetingId, status, pageSize, pageNumber, nextPageToken, null);
        Type localVarReturnType = new TypeToken<CloudRecordingListRegistrantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRegistrantsAsync(Long meetingId, String status, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback<CloudRecordingListRegistrantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRegistrantsValidateBeforeCall(meetingId, status, pageSize, pageNumber, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<CloudRecordingListRegistrantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRegistrantsRequestBuilder {
        private final Long meetingId;
        private String status;
        private Integer pageSize;
        private Integer pageNumber;
        private String nextPageToken;

        private ListRegistrantsRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set status
         * @param status Query by the registrant&#39;s status:  * &#x60;pending&#x60; &amp;mdash; The registration is pending.  * &#x60;approved&#x60; &amp;mdash; The registrant is approved.  * &#x60;denied&#x60; &amp;mdash; The registration is denied. (optional, default to approved)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber **Deprecated.** We will no longer support this field in a future release. Instead, use the &#x60;next_page_token&#x60; for pagination. (optional, default to 1)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for listRegistrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Registrants returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRegistrantsCall(meetingId, status, pageSize, pageNumber, nextPageToken, _callback);
        }


        /**
         * Execute listRegistrants request
         * @return CloudRecordingListRegistrantsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Registrants returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public CloudRecordingListRegistrantsResponse execute() throws ApiException {
            ApiResponse<CloudRecordingListRegistrantsResponse> localVarResp = listRegistrantsWithHttpInfo(meetingId, status, pageSize, pageNumber, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRegistrants request with HTTP info returned
         * @return ApiResponse&lt;CloudRecordingListRegistrantsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Registrants returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CloudRecordingListRegistrantsResponse> executeWithHttpInfo() throws ApiException {
            return listRegistrantsWithHttpInfo(meetingId, status, pageSize, pageNumber, nextPageToken);
        }

        /**
         * Execute listRegistrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Registrants returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CloudRecordingListRegistrantsResponse> _callback) throws ApiException {
            return listRegistrantsAsync(meetingId, status, pageSize, pageNumber, nextPageToken, _callback);
        }
    }

    /**
     * List recording registrants
     * Use this API to list registrants of a past meeting&#39;s [on-demand cloud recordings](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-recordings). Users must [register](https://developers.zoom.us) to view the recordings.      **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return ListRegistrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Registrants returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public ListRegistrantsRequestBuilder listRegistrants(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new ListRegistrantsRequestBuilder(meetingId);
    }
    private okhttp3.Call listRegistrationQuestionsCall(String meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings/registrants/questions"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRegistrationQuestionsValidateBeforeCall(String meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling listRegistrationQuestions(Async)");
        }

        return listRegistrationQuestionsCall(meetingId, _callback);

    }


    private ApiResponse<CloudRecordingListRegistrationQuestionsResponse> listRegistrationQuestionsWithHttpInfo(String meetingId) throws ApiException {
        okhttp3.Call localVarCall = listRegistrationQuestionsValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<CloudRecordingListRegistrationQuestionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRegistrationQuestionsAsync(String meetingId, final ApiCallback<CloudRecordingListRegistrationQuestionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRegistrationQuestionsValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<CloudRecordingListRegistrationQuestionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRegistrationQuestionsRequestBuilder {
        private final String meetingId;

        private ListRegistrationQuestionsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for listRegistrationQuestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Recording Registrant Question object returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRegistrationQuestionsCall(meetingId, _callback);
        }


        /**
         * Execute listRegistrationQuestions request
         * @return CloudRecordingListRegistrationQuestionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Recording Registrant Question object returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public CloudRecordingListRegistrationQuestionsResponse execute() throws ApiException {
            ApiResponse<CloudRecordingListRegistrationQuestionsResponse> localVarResp = listRegistrationQuestionsWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRegistrationQuestions request with HTTP info returned
         * @return ApiResponse&lt;CloudRecordingListRegistrationQuestionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Recording Registrant Question object returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CloudRecordingListRegistrationQuestionsResponse> executeWithHttpInfo() throws ApiException {
            return listRegistrationQuestionsWithHttpInfo(meetingId);
        }

        /**
         * Execute listRegistrationQuestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Recording Registrant Question object returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CloudRecordingListRegistrationQuestionsResponse> _callback) throws ApiException {
            return listRegistrationQuestionsAsync(meetingId, _callback);
        }
    }

    /**
     * Get registration questions
     * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.       **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.  (required)
     * @return ListRegistrationQuestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Recording Registrant Question object returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public ListRegistrationQuestionsRequestBuilder listRegistrationQuestions(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new ListRegistrationQuestionsRequestBuilder(meetingId);
    }
    private okhttp3.Call recoverRecordingStatusCall(String meetingUUID, CloudRecordingRecoverRecordingStatusRequest cloudRecordingRecoverRecordingStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRecordingRecoverRecordingStatusRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingUUID}/recordings/status"
            .replace("{" + "meetingUUID" + "}", localVarApiClient.escapeString(meetingUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recoverRecordingStatusValidateBeforeCall(String meetingUUID, CloudRecordingRecoverRecordingStatusRequest cloudRecordingRecoverRecordingStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingUUID' is set
        if (meetingUUID == null) {
            throw new ApiException("Missing the required parameter 'meetingUUID' when calling recoverRecordingStatus(Async)");
        }

        return recoverRecordingStatusCall(meetingUUID, cloudRecordingRecoverRecordingStatusRequest, _callback);

    }


    private ApiResponse<Void> recoverRecordingStatusWithHttpInfo(String meetingUUID, CloudRecordingRecoverRecordingStatusRequest cloudRecordingRecoverRecordingStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = recoverRecordingStatusValidateBeforeCall(meetingUUID, cloudRecordingRecoverRecordingStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call recoverRecordingStatusAsync(String meetingUUID, CloudRecordingRecoverRecordingStatusRequest cloudRecordingRecoverRecordingStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recoverRecordingStatusValidateBeforeCall(meetingUUID, cloudRecordingRecoverRecordingStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RecoverRecordingStatusRequestBuilder {
        private final String meetingUUID;
        private String action;

        private RecoverRecordingStatusRequestBuilder(String meetingUUID) {
            this.meetingUUID = meetingUUID;
        }

        /**
         * Set action
         * @param action  (optional)
         * @return RecoverRecordingStatusRequestBuilder
         */
        public RecoverRecordingStatusRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Build call for recoverRecordingStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recordings recovered.   **Error Code:** &#x60;200&#x60;     You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Deleted recordings of the meeting recovered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3309&#x60; &lt;br&gt; Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CloudRecordingRecoverRecordingStatusRequest cloudRecordingRecoverRecordingStatusRequest = buildBodyParams();
            return recoverRecordingStatusCall(meetingUUID, cloudRecordingRecoverRecordingStatusRequest, _callback);
        }

        private CloudRecordingRecoverRecordingStatusRequest buildBodyParams() {
            CloudRecordingRecoverRecordingStatusRequest cloudRecordingRecoverRecordingStatusRequest = new CloudRecordingRecoverRecordingStatusRequest();
            if (this.action != null)
            cloudRecordingRecoverRecordingStatusRequest.action(CloudRecordingRecoverRecordingStatusRequest.ActionEnum.fromValue(this.action));
            return cloudRecordingRecoverRecordingStatusRequest;
        }

        /**
         * Execute recoverRecordingStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recordings recovered.   **Error Code:** &#x60;200&#x60;     You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Deleted recordings of the meeting recovered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3309&#x60; &lt;br&gt; Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CloudRecordingRecoverRecordingStatusRequest cloudRecordingRecoverRecordingStatusRequest = buildBodyParams();
            recoverRecordingStatusWithHttpInfo(meetingUUID, cloudRecordingRecoverRecordingStatusRequest);
        }

        /**
         * Execute recoverRecordingStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recordings recovered.   **Error Code:** &#x60;200&#x60;     You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Deleted recordings of the meeting recovered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3309&#x60; &lt;br&gt; Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CloudRecordingRecoverRecordingStatusRequest cloudRecordingRecoverRecordingStatusRequest = buildBodyParams();
            return recoverRecordingStatusWithHttpInfo(meetingUUID, cloudRecordingRecoverRecordingStatusRequest);
        }

        /**
         * Execute recoverRecordingStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recordings recovered.   **Error Code:** &#x60;200&#x60;     You do not have the right permissions. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Deleted recordings of the meeting recovered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3309&#x60; &lt;br&gt; Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CloudRecordingRecoverRecordingStatusRequest cloudRecordingRecoverRecordingStatusRequest = buildBodyParams();
            return recoverRecordingStatusAsync(meetingUUID, cloudRecordingRecoverRecordingStatusRequest, _callback);
        }
    }

    /**
     * Recover meeting recordings
     * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.          **Prerequisites**:     * A Pro user with Cloud Recording enabled.  **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingUUID The meeting&#39;s universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.  If the meeting UUID begins with a &#x60;/&#x60; character or contains a &#x60;//&#x60; character, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls. (required)
     * @return RecoverRecordingStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Recordings recovered.   **Error Code:** &#x60;200&#x60;     You do not have the right permissions. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Deleted recordings of the meeting recovered. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3309&#x60; &lt;br&gt; Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
     </table>
     */
    public RecoverRecordingStatusRequestBuilder recoverRecordingStatus(String meetingUUID) throws IllegalArgumentException {
        if (meetingUUID == null) throw new IllegalArgumentException("\"meetingUUID\" is required but got null");
            

        return new RecoverRecordingStatusRequestBuilder(meetingUUID);
    }
    private okhttp3.Call recoverStatusCall(String meetingId, String recordingId, CloudRecordingRecoverStatusRequest cloudRecordingRecoverStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRecordingRecoverStatusRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings/{recordingId}/status"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "recordingId" + "}", localVarApiClient.escapeString(recordingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recoverStatusValidateBeforeCall(String meetingId, String recordingId, CloudRecordingRecoverStatusRequest cloudRecordingRecoverStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling recoverStatus(Async)");
        }

        // verify the required parameter 'recordingId' is set
        if (recordingId == null) {
            throw new ApiException("Missing the required parameter 'recordingId' when calling recoverStatus(Async)");
        }

        return recoverStatusCall(meetingId, recordingId, cloudRecordingRecoverStatusRequest, _callback);

    }


    private ApiResponse<Void> recoverStatusWithHttpInfo(String meetingId, String recordingId, CloudRecordingRecoverStatusRequest cloudRecordingRecoverStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = recoverStatusValidateBeforeCall(meetingId, recordingId, cloudRecordingRecoverStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call recoverStatusAsync(String meetingId, String recordingId, CloudRecordingRecoverStatusRequest cloudRecordingRecoverStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recoverStatusValidateBeforeCall(meetingId, recordingId, cloudRecordingRecoverStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RecoverStatusRequestBuilder {
        private final String meetingId;
        private final String recordingId;
        private String action;

        private RecoverStatusRequestBuilder(String meetingId, String recordingId) {
            this.meetingId = meetingId;
            this.recordingId = recordingId;
        }

        /**
         * Set action
         * @param action  (optional)
         * @return RecoverStatusRequestBuilder
         */
        public RecoverStatusRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Build call for recoverStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording recovered.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3309&#x60; &lt;br&gt; Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CloudRecordingRecoverStatusRequest cloudRecordingRecoverStatusRequest = buildBodyParams();
            return recoverStatusCall(meetingId, recordingId, cloudRecordingRecoverStatusRequest, _callback);
        }

        private CloudRecordingRecoverStatusRequest buildBodyParams() {
            CloudRecordingRecoverStatusRequest cloudRecordingRecoverStatusRequest = new CloudRecordingRecoverStatusRequest();
            if (this.action != null)
            cloudRecordingRecoverStatusRequest.action(CloudRecordingRecoverStatusRequest.ActionEnum.fromValue(this.action));
            return cloudRecordingRecoverStatusRequest;
        }

        /**
         * Execute recoverStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording recovered.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3309&#x60; &lt;br&gt; Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CloudRecordingRecoverStatusRequest cloudRecordingRecoverStatusRequest = buildBodyParams();
            recoverStatusWithHttpInfo(meetingId, recordingId, cloudRecordingRecoverStatusRequest);
        }

        /**
         * Execute recoverStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording recovered.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3309&#x60; &lt;br&gt; Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CloudRecordingRecoverStatusRequest cloudRecordingRecoverStatusRequest = buildBodyParams();
            return recoverStatusWithHttpInfo(meetingId, recordingId, cloudRecordingRecoverStatusRequest);
        }

        /**
         * Execute recoverStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording recovered.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3309&#x60; &lt;br&gt; Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CloudRecordingRecoverStatusRequest cloudRecordingRecoverStatusRequest = buildBodyParams();
            return recoverStatusAsync(meetingId, recordingId, cloudRecordingRecoverStatusRequest, _callback);
        }
    }

    /**
     * Recover a single recording
     * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.       **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.  (required)
     * @param recordingId The recording ID. (required)
     * @return RecoverStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting recording recovered.   </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3309&#x60; &lt;br&gt; Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
     </table>
     */
    public RecoverStatusRequestBuilder recoverStatus(String meetingId, String recordingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        if (recordingId == null) throw new IllegalArgumentException("\"recordingId\" is required but got null");
            

        return new RecoverStatusRequestBuilder(meetingId, recordingId);
    }
    private okhttp3.Call summaryCall(String meetingId, LocalDate from, LocalDate to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings/analytics_summary"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call summaryValidateBeforeCall(String meetingId, LocalDate from, LocalDate to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling summary(Async)");
        }

        return summaryCall(meetingId, from, to, _callback);

    }


    private ApiResponse<AnalyticsSummaryResponse> summaryWithHttpInfo(String meetingId, LocalDate from, LocalDate to) throws ApiException {
        okhttp3.Call localVarCall = summaryValidateBeforeCall(meetingId, from, to, null);
        Type localVarReturnType = new TypeToken<AnalyticsSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call summaryAsync(String meetingId, LocalDate from, LocalDate to, final ApiCallback<AnalyticsSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = summaryValidateBeforeCall(meetingId, from, to, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SummaryRequestBuilder {
        private final String meetingId;
        private LocalDate from;
        private LocalDate to;

        private SummaryRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set from
         * @param from The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date. (optional)
         * @return SummaryRequestBuilder
         */
        public SummaryRequestBuilder from(LocalDate from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to The end date for the monthly range to query. The maximum range can be a month. (optional)
         * @return SummaryRequestBuilder
         */
        public SummaryRequestBuilder to(LocalDate to) {
            this.to = to;
            return this;
        }
        
        /**
         * Build call for summary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Analytics Summary listed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User not found on this account: {accountId}   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return summaryCall(meetingId, from, to, _callback);
        }


        /**
         * Execute summary request
         * @return AnalyticsSummaryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Analytics Summary listed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User not found on this account: {accountId}   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public AnalyticsSummaryResponse execute() throws ApiException {
            ApiResponse<AnalyticsSummaryResponse> localVarResp = summaryWithHttpInfo(meetingId, from, to);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute summary request with HTTP info returned
         * @return ApiResponse&lt;AnalyticsSummaryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Analytics Summary listed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User not found on this account: {accountId}   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnalyticsSummaryResponse> executeWithHttpInfo() throws ApiException {
            return summaryWithHttpInfo(meetingId, from, to);
        }

        /**
         * Execute summary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Analytics Summary listed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User not found on this account: {accountId}   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnalyticsSummaryResponse> _callback) throws ApiException {
            return summaryAsync(meetingId, from, to, _callback);
        }
    }

    /**
     * Get Meeting Recording&#39;s Analytics Summary
     * Use this API to return a meeting recording&#39;s [analytics summary](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user&#39;s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    &#x60;curl -H &amp;quot;Authorization: Bearer &amp;lt;ACCESS_TOKEN&amp;gt;&amp;quot; https://{{base-domain}}/rec/archive/download/xyz&#x60;       **Scopes:** &#x60;recording:read:admin&#x60;,&#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.  (required)
     * @return SummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Analytics Summary listed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User not found on this account: {accountId}   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3301&#x60; &lt;br&gt; There is no recording for this meeting.   </td><td>  -  </td></tr>
     </table>
     */
    public SummaryRequestBuilder summary(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new SummaryRequestBuilder(meetingId);
    }
    private okhttp3.Call updateRegistrantStatusCall(Long meetingId, CloudRecordingUpdateRegistrantStatusRequest cloudRecordingUpdateRegistrantStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRecordingUpdateRegistrantStatusRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings/registrants/status"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegistrantStatusValidateBeforeCall(Long meetingId, CloudRecordingUpdateRegistrantStatusRequest cloudRecordingUpdateRegistrantStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling updateRegistrantStatus(Async)");
        }

        return updateRegistrantStatusCall(meetingId, cloudRecordingUpdateRegistrantStatusRequest, _callback);

    }


    private ApiResponse<Void> updateRegistrantStatusWithHttpInfo(Long meetingId, CloudRecordingUpdateRegistrantStatusRequest cloudRecordingUpdateRegistrantStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRegistrantStatusValidateBeforeCall(meetingId, cloudRecordingUpdateRegistrantStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRegistrantStatusAsync(Long meetingId, CloudRecordingUpdateRegistrantStatusRequest cloudRecordingUpdateRegistrantStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegistrantStatusValidateBeforeCall(meetingId, cloudRecordingUpdateRegistrantStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRegistrantStatusRequestBuilder {
        private final String action;
        private final Long meetingId;
        private List<CloudRecordingUpdateRegistrantStatusRequestRegistrantsInner> registrants;

        private UpdateRegistrantStatusRequestBuilder(String action, Long meetingId) {
            this.action = action;
            this.meetingId = meetingId;
        }

        /**
         * Set registrants
         * @param registrants List of registrants (optional)
         * @return UpdateRegistrantStatusRequestBuilder
         */
        public UpdateRegistrantStatusRequestBuilder registrants(List<CloudRecordingUpdateRegistrantStatusRequestRegistrantsInner> registrants) {
            this.registrants = registrants;
            return this;
        }
        
        /**
         * Build call for updateRegistrantStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CloudRecordingUpdateRegistrantStatusRequest cloudRecordingUpdateRegistrantStatusRequest = buildBodyParams();
            return updateRegistrantStatusCall(meetingId, cloudRecordingUpdateRegistrantStatusRequest, _callback);
        }

        private CloudRecordingUpdateRegistrantStatusRequest buildBodyParams() {
            CloudRecordingUpdateRegistrantStatusRequest cloudRecordingUpdateRegistrantStatusRequest = new CloudRecordingUpdateRegistrantStatusRequest();
            if (this.action != null)
            cloudRecordingUpdateRegistrantStatusRequest.action(CloudRecordingUpdateRegistrantStatusRequest.ActionEnum.fromValue(this.action));
            cloudRecordingUpdateRegistrantStatusRequest.registrants(this.registrants);
            return cloudRecordingUpdateRegistrantStatusRequest;
        }

        /**
         * Execute updateRegistrantStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CloudRecordingUpdateRegistrantStatusRequest cloudRecordingUpdateRegistrantStatusRequest = buildBodyParams();
            updateRegistrantStatusWithHttpInfo(meetingId, cloudRecordingUpdateRegistrantStatusRequest);
        }

        /**
         * Execute updateRegistrantStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CloudRecordingUpdateRegistrantStatusRequest cloudRecordingUpdateRegistrantStatusRequest = buildBodyParams();
            return updateRegistrantStatusWithHttpInfo(meetingId, cloudRecordingUpdateRegistrantStatusRequest);
        }

        /**
         * Execute updateRegistrantStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CloudRecordingUpdateRegistrantStatusRequest cloudRecordingUpdateRegistrantStatusRequest = buildBodyParams();
            return updateRegistrantStatusAsync(meetingId, cloudRecordingUpdateRegistrantStatusRequest, _callback);
        }
    }

    /**
     * Update registrant&#39;s status
     * A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording.  Use this API to update a registrant&#39;s status.    **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return UpdateRegistrantStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Registrant status updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRegistrantStatusRequestBuilder updateRegistrantStatus(String action, Long meetingId) throws IllegalArgumentException {
        if (action == null) throw new IllegalArgumentException("\"action\" is required but got null");
            

        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new UpdateRegistrantStatusRequestBuilder(action, meetingId);
    }
    private okhttp3.Call updateRegistrationQuestionsCall(String meetingId, CloudRecordingUpdateRegistrationQuestionsRequest cloudRecordingUpdateRegistrationQuestionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRecordingUpdateRegistrationQuestionsRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings/registrants/questions"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegistrationQuestionsValidateBeforeCall(String meetingId, CloudRecordingUpdateRegistrationQuestionsRequest cloudRecordingUpdateRegistrationQuestionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling updateRegistrationQuestions(Async)");
        }

        return updateRegistrationQuestionsCall(meetingId, cloudRecordingUpdateRegistrationQuestionsRequest, _callback);

    }


    private ApiResponse<Void> updateRegistrationQuestionsWithHttpInfo(String meetingId, CloudRecordingUpdateRegistrationQuestionsRequest cloudRecordingUpdateRegistrationQuestionsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRegistrationQuestionsValidateBeforeCall(meetingId, cloudRecordingUpdateRegistrationQuestionsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRegistrationQuestionsAsync(String meetingId, CloudRecordingUpdateRegistrationQuestionsRequest cloudRecordingUpdateRegistrationQuestionsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegistrationQuestionsValidateBeforeCall(meetingId, cloudRecordingUpdateRegistrationQuestionsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRegistrationQuestionsRequestBuilder {
        private final String meetingId;
        private List<CloudRecordingUpdateRegistrationQuestionsRequestCustomQuestionsInner> customQuestions;
        private List<CloudRecordingUpdateRegistrationQuestionsRequestQuestionsInner> questions;

        private UpdateRegistrationQuestionsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set customQuestions
         * @param customQuestions Array of Registrant Custom Questions (optional)
         * @return UpdateRegistrationQuestionsRequestBuilder
         */
        public UpdateRegistrationQuestionsRequestBuilder customQuestions(List<CloudRecordingUpdateRegistrationQuestionsRequestCustomQuestionsInner> customQuestions) {
            this.customQuestions = customQuestions;
            return this;
        }
        
        /**
         * Set questions
         * @param questions Array of Registrant Questions (optional)
         * @return UpdateRegistrationQuestionsRequestBuilder
         */
        public UpdateRegistrationQuestionsRequestBuilder questions(List<CloudRecordingUpdateRegistrationQuestionsRequestQuestionsInner> questions) {
            this.questions = questions;
            return this;
        }
        
        /**
         * Build call for updateRegistrationQuestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Recording Registrant Questions Updated </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CloudRecordingUpdateRegistrationQuestionsRequest cloudRecordingUpdateRegistrationQuestionsRequest = buildBodyParams();
            return updateRegistrationQuestionsCall(meetingId, cloudRecordingUpdateRegistrationQuestionsRequest, _callback);
        }

        private CloudRecordingUpdateRegistrationQuestionsRequest buildBodyParams() {
            CloudRecordingUpdateRegistrationQuestionsRequest cloudRecordingUpdateRegistrationQuestionsRequest = new CloudRecordingUpdateRegistrationQuestionsRequest();
            cloudRecordingUpdateRegistrationQuestionsRequest.customQuestions(this.customQuestions);
            cloudRecordingUpdateRegistrationQuestionsRequest.questions(this.questions);
            return cloudRecordingUpdateRegistrationQuestionsRequest;
        }

        /**
         * Execute updateRegistrationQuestions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Recording Registrant Questions Updated </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CloudRecordingUpdateRegistrationQuestionsRequest cloudRecordingUpdateRegistrationQuestionsRequest = buildBodyParams();
            updateRegistrationQuestionsWithHttpInfo(meetingId, cloudRecordingUpdateRegistrationQuestionsRequest);
        }

        /**
         * Execute updateRegistrationQuestions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Recording Registrant Questions Updated </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CloudRecordingUpdateRegistrationQuestionsRequest cloudRecordingUpdateRegistrationQuestionsRequest = buildBodyParams();
            return updateRegistrationQuestionsWithHttpInfo(meetingId, cloudRecordingUpdateRegistrationQuestionsRequest);
        }

        /**
         * Execute updateRegistrationQuestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Recording Registrant Questions Updated </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CloudRecordingUpdateRegistrationQuestionsRequest cloudRecordingUpdateRegistrationQuestionsRequest = buildBodyParams();
            return updateRegistrationQuestionsAsync(meetingId, cloudRecordingUpdateRegistrationQuestionsRequest, _callback);
        }
    }

    /**
     * Update registration questions
     * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to update registration questions that are to be answered by users while registering to view a recording.       **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.  (required)
     * @return UpdateRegistrationQuestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Recording Registrant Questions Updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRegistrationQuestionsRequestBuilder updateRegistrationQuestions(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new UpdateRegistrationQuestionsRequestBuilder(meetingId);
    }
    private okhttp3.Call updateSettingsCall(String meetingId, CloudRecordingUpdateSettingsRequest cloudRecordingUpdateSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cloudRecordingUpdateSettingsRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/recordings/settings"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingsValidateBeforeCall(String meetingId, CloudRecordingUpdateSettingsRequest cloudRecordingUpdateSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling updateSettings(Async)");
        }

        return updateSettingsCall(meetingId, cloudRecordingUpdateSettingsRequest, _callback);

    }


    private ApiResponse<Void> updateSettingsWithHttpInfo(String meetingId, CloudRecordingUpdateSettingsRequest cloudRecordingUpdateSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(meetingId, cloudRecordingUpdateSettingsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSettingsAsync(String meetingId, CloudRecordingUpdateSettingsRequest cloudRecordingUpdateSettingsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(meetingId, cloudRecordingUpdateSettingsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSettingsRequestBuilder {
        private final String meetingId;
        private Integer approvalType;
        private String authenticationDomains;
        private String authenticationOption;
        private Boolean onDemand;
        private String password;
        private Boolean recordingAuthentication;
        private Boolean sendEmailToHost;
        private String shareRecording;
        private Boolean showSocialShareButtons;
        private String topic;
        private Boolean viewerDownload;

        private UpdateSettingsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set approvalType
         * @param approvalType The approval type for the registration.     &#x60;0&#x60;- Automatically approve the registration when a user registers.     &#x60;1&#x60; - Manually approve or deny the registration of a user.     &#x60;2&#x60; - No registration required to view the recording. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder approvalType(Integer approvalType) {
            this.approvalType = approvalType;
            return this;
        }
        
        /**
         * Set authenticationDomains
         * @param authenticationDomains The authentication domains. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder authenticationDomains(String authenticationDomains) {
            this.authenticationDomains = authenticationDomains;
            return this;
        }
        
        /**
         * Set authenticationOption
         * @param authenticationOption The authentication options. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder authenticationOption(String authenticationOption) {
            this.authenticationOption = authenticationOption;
            return this;
        }
        
        /**
         * Set onDemand
         * @param onDemand This field determines whether the registration is required to view the recording. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder onDemand(Boolean onDemand) {
            this.onDemand = onDemand;
            return this;
        }
        
        /**
         * Set password
         * @param password This field enables passcode protection for the recording by setting a passcode.   The passcode must have a minimum of **eight** characters with a mix of numbers, letters and special characters.          **Note:** If the account owner or the admin has set minimum passcode strength requirements for recordings through Account Settings, the passcode value provided here must meet those requirements.         If the requirements are enabled, you can view those requirements by calling either the [**Get user settings**](/api-reference/zoom-api/methods#operation/userSettings) API or the [**Get account settings**](/api-reference/zoom-api/ma#operation/accountSettings) API. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set recordingAuthentication
         * @param recordingAuthentication This field indicates that only authenticated users can view. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder recordingAuthentication(Boolean recordingAuthentication) {
            this.recordingAuthentication = recordingAuthentication;
            return this;
        }
        
        /**
         * Set sendEmailToHost
         * @param sendEmailToHost This field sends an email to host when someone registers to view the recording. This setting applies for On-demand recordings only. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder sendEmailToHost(Boolean sendEmailToHost) {
            this.sendEmailToHost = sendEmailToHost;
            return this;
        }
        
        /**
         * Set shareRecording
         * @param shareRecording This field determines how the meeting recording is shared. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder shareRecording(String shareRecording) {
            this.shareRecording = shareRecording;
            return this;
        }
        
        /**
         * Set showSocialShareButtons
         * @param showSocialShareButtons This field shows social share buttons on registration page. This setting applies for On-demand recordings only. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder showSocialShareButtons(Boolean showSocialShareButtons) {
            this.showSocialShareButtons = showSocialShareButtons;
            return this;
        }
        
        /**
         * Set topic
         * @param topic The name of the recording. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder topic(String topic) {
            this.topic = topic;
            return this;
        }
        
        /**
         * Set viewerDownload
         * @param viewerDownload This field determines whether a viewer can download the recording file or not. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder viewerDownload(Boolean viewerDownload) {
            this.viewerDownload = viewerDownload;
            return this;
        }
        
        /**
         * Build call for updateSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;    Meeting recording setting&#39;s updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CloudRecordingUpdateSettingsRequest cloudRecordingUpdateSettingsRequest = buildBodyParams();
            return updateSettingsCall(meetingId, cloudRecordingUpdateSettingsRequest, _callback);
        }

        private CloudRecordingUpdateSettingsRequest buildBodyParams() {
            CloudRecordingUpdateSettingsRequest cloudRecordingUpdateSettingsRequest = new CloudRecordingUpdateSettingsRequest();
            if (this.approvalType != null)
            cloudRecordingUpdateSettingsRequest.approvalType(CloudRecordingUpdateSettingsRequest.ApprovalTypeEnum.fromValue(this.approvalType));
            cloudRecordingUpdateSettingsRequest.authenticationDomains(this.authenticationDomains);
            cloudRecordingUpdateSettingsRequest.authenticationOption(this.authenticationOption);
            cloudRecordingUpdateSettingsRequest.onDemand(this.onDemand);
            cloudRecordingUpdateSettingsRequest.password(this.password);
            cloudRecordingUpdateSettingsRequest.recordingAuthentication(this.recordingAuthentication);
            cloudRecordingUpdateSettingsRequest.sendEmailToHost(this.sendEmailToHost);
            if (this.shareRecording != null)
            cloudRecordingUpdateSettingsRequest.shareRecording(CloudRecordingUpdateSettingsRequest.ShareRecordingEnum.fromValue(this.shareRecording));
            cloudRecordingUpdateSettingsRequest.showSocialShareButtons(this.showSocialShareButtons);
            cloudRecordingUpdateSettingsRequest.topic(this.topic);
            cloudRecordingUpdateSettingsRequest.viewerDownload(this.viewerDownload);
            return cloudRecordingUpdateSettingsRequest;
        }

        /**
         * Execute updateSettings request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;    Meeting recording setting&#39;s updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CloudRecordingUpdateSettingsRequest cloudRecordingUpdateSettingsRequest = buildBodyParams();
            updateSettingsWithHttpInfo(meetingId, cloudRecordingUpdateSettingsRequest);
        }

        /**
         * Execute updateSettings request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;    Meeting recording setting&#39;s updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CloudRecordingUpdateSettingsRequest cloudRecordingUpdateSettingsRequest = buildBodyParams();
            return updateSettingsWithHttpInfo(meetingId, cloudRecordingUpdateSettingsRequest);
        }

        /**
         * Execute updateSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;    Meeting recording setting&#39;s updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CloudRecordingUpdateSettingsRequest cloudRecordingUpdateSettingsRequest = buildBodyParams();
            return updateSettingsAsync(meetingId, cloudRecordingUpdateSettingsRequest, _callback);
        }
    }

    /**
     * Update meeting recording settings
     * Updates settings applied to a meeting&#39;s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).        **Scopes:** &#x60;recording:write&#x60;,&#x60;recording:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **double encode** the UUID before making an API request.  (required)
     * @return UpdateSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;    Meeting recording setting&#39;s updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSettingsRequestBuilder updateSettings(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new UpdateSettingsRequestBuilder(meetingId);
    }
}
