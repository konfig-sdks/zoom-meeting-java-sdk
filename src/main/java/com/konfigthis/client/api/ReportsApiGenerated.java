/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.ReportsGetActiveInactiveHostReportsResponse;
import com.konfigthis.client.model.ReportsGetBillingDepartmentReportsResponse;
import com.konfigthis.client.model.ReportsGetBillingInvoicesResponse;
import com.konfigthis.client.model.ReportsGetCloudRecordingUsageReportResponse;
import com.konfigthis.client.model.ReportsGetDailyUsageReportResponse;
import com.konfigthis.client.model.ReportsGetMeetingDetailReportsResponse;
import com.konfigthis.client.model.ReportsGetMeetingParticipantReportsResponse;
import com.konfigthis.client.model.ReportsGetMeetingPollReportsResponse;
import com.konfigthis.client.model.ReportsGetMeetingQaReportResponse;
import com.konfigthis.client.model.ReportsGetMeetingReportsResponse;
import com.konfigthis.client.model.ReportsGetMeetingSurveyReportResponse;
import com.konfigthis.client.model.ReportsGetOperationLogsReportResponse;
import com.konfigthis.client.model.ReportsGetTelephoneReportsResponse;
import com.konfigthis.client.model.ReportsGetWebinarDetailsReportResponse;
import com.konfigthis.client.model.ReportsGetWebinarPollReportsResponse;
import com.konfigthis.client.model.ReportsGetWebinarQaReportResponse;
import com.konfigthis.client.model.ReportsGetWebinarSurveyReportResponse;
import com.konfigthis.client.model.ReportsListSignInSignOutActivitiesResponse;
import com.konfigthis.client.model.ReportsListUpcomingEventsReportResponse;
import com.konfigthis.client.model.ReportsWebinarParticipantsListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getOpenapiAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setOpenapiAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getActiveInactiveHostReportsCall(LocalDate from, LocalDate to, String type, Integer pageSize, Integer pageNumber, String nextPageToken, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveInactiveHostReportsValidateBeforeCall(LocalDate from, LocalDate to, String type, Integer pageSize, Integer pageNumber, String nextPageToken, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getActiveInactiveHostReports(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getActiveInactiveHostReports(Async)");
        }

        return getActiveInactiveHostReportsCall(from, to, type, pageSize, pageNumber, nextPageToken, groupId, _callback);

    }


    private ApiResponse<ReportsGetActiveInactiveHostReportsResponse> getActiveInactiveHostReportsWithHttpInfo(LocalDate from, LocalDate to, String type, Integer pageSize, Integer pageNumber, String nextPageToken, String groupId) throws ApiException {
        okhttp3.Call localVarCall = getActiveInactiveHostReportsValidateBeforeCall(from, to, type, pageSize, pageNumber, nextPageToken, groupId, null);
        Type localVarReturnType = new TypeToken<ReportsGetActiveInactiveHostReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getActiveInactiveHostReportsAsync(LocalDate from, LocalDate to, String type, Integer pageSize, Integer pageNumber, String nextPageToken, String groupId, final ApiCallback<ReportsGetActiveInactiveHostReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveInactiveHostReportsValidateBeforeCall(from, to, type, pageSize, pageNumber, nextPageToken, groupId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetActiveInactiveHostReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetActiveInactiveHostReportsRequestBuilder {
        private final LocalDate from;
        private final LocalDate to;
        private String type;
        private Integer pageSize;
        private Integer pageNumber;
        private String nextPageToken;
        private String groupId;

        private GetActiveInactiveHostReportsRequestBuilder(LocalDate from, LocalDate to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set type
         * @param type Active or inactive hosts.    &#x60;active&#x60; - Active hosts.     &#x60;inactive&#x60; - Inactive hosts. (optional)
         * @return GetActiveInactiveHostReportsRequestBuilder
         */
        public GetActiveInactiveHostReportsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return GetActiveInactiveHostReportsRequestBuilder
         */
        public GetActiveInactiveHostReportsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the current page in the returned records. (optional, default to 1)
         * @return GetActiveInactiveHostReportsRequestBuilder
         */
        public GetActiveInactiveHostReportsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes. (optional)
         * @return GetActiveInactiveHostReportsRequestBuilder
         */
        public GetActiveInactiveHostReportsRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain users who are members of the queried group ID. (optional)
         * @return GetActiveInactiveHostReportsRequestBuilder
         */
        public GetActiveInactiveHostReportsRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Build call for getActiveInactiveHostReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Active or inactive hosts report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; ’ &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getActiveInactiveHostReportsCall(from, to, type, pageSize, pageNumber, nextPageToken, groupId, _callback);
        }


        /**
         * Execute getActiveInactiveHostReports request
         * @return ReportsGetActiveInactiveHostReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Active or inactive hosts report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; ’ &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetActiveInactiveHostReportsResponse execute() throws ApiException {
            ApiResponse<ReportsGetActiveInactiveHostReportsResponse> localVarResp = getActiveInactiveHostReportsWithHttpInfo(from, to, type, pageSize, pageNumber, nextPageToken, groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getActiveInactiveHostReports request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetActiveInactiveHostReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Active or inactive hosts report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; ’ &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetActiveInactiveHostReportsResponse> executeWithHttpInfo() throws ApiException {
            return getActiveInactiveHostReportsWithHttpInfo(from, to, type, pageSize, pageNumber, nextPageToken, groupId);
        }

        /**
         * Execute getActiveInactiveHostReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Active or inactive hosts report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; ’ &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetActiveInactiveHostReportsResponse> _callback) throws ApiException {
            return getActiveInactiveHostReportsAsync(from, to, type, pageSize, pageNumber, nextPageToken, groupId, _callback);
        }
    }

    /**
     * Get active/inactive host reports
     * Retrieve a host report for a specified period of time within the last six months.   The report time range is limited to a month.   You can specify the type of report and date range using the query parameters.     * The **Active Hosts** report displays a list of meetings, participants, and meeting minutes. An **active host** is defined as any user who has hosted at least one meeting during the during the month specified in the &#x60;from&#x60; and &#x60;to&#x60; range.   * The **Inactive Hosts** report pulls a list of users who were not active during a specific period of time.    An **inactive host** is defined as any user who has not hosted any meetings during the specified period of time for the report. to be inactive.               **Prerequisites:**     * Pro or higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     * @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the &#x60;from&#x60; and &#x60;to&#x60; parameters should only be one month as the report includes only one month worth of data at once. (required)
     * @param to End date. (required)
     * @return GetActiveInactiveHostReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Active or inactive hosts report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; ’ &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetActiveInactiveHostReportsRequestBuilder getActiveInactiveHostReports(LocalDate from, LocalDate to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new GetActiveInactiveHostReportsRequestBuilder(from, to);
    }
    private okhttp3.Call getBillingDepartmentReportsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/billing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillingDepartmentReportsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getBillingDepartmentReportsCall(_callback);

    }


    private ApiResponse<ReportsGetBillingDepartmentReportsResponse> getBillingDepartmentReportsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getBillingDepartmentReportsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ReportsGetBillingDepartmentReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBillingDepartmentReportsAsync(final ApiCallback<ReportsGetBillingDepartmentReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillingDepartmentReportsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ReportsGetBillingDepartmentReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBillingDepartmentReportsRequestBuilder {

        private GetBillingDepartmentReportsRequestBuilder() {
        }

        /**
         * Build call for getBillingDepartmentReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Billing report returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBillingDepartmentReportsCall(_callback);
        }


        /**
         * Execute getBillingDepartmentReports request
         * @return ReportsGetBillingDepartmentReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Billing report returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetBillingDepartmentReportsResponse execute() throws ApiException {
            ApiResponse<ReportsGetBillingDepartmentReportsResponse> localVarResp = getBillingDepartmentReportsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBillingDepartmentReports request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetBillingDepartmentReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Billing report returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetBillingDepartmentReportsResponse> executeWithHttpInfo() throws ApiException {
            return getBillingDepartmentReportsWithHttpInfo();
        }

        /**
         * Execute getBillingDepartmentReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Billing report returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetBillingDepartmentReportsResponse> _callback) throws ApiException {
            return getBillingDepartmentReportsAsync(_callback);
        }
    }

    /**
     * Get billing reports
     * Get department billing reports of a Zoom account.  **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact Zoom Support team for details.    **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @return GetBillingDepartmentReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Billing report returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.   </td><td>  -  </td></tr>
     </table>
     */
    public GetBillingDepartmentReportsRequestBuilder getBillingDepartmentReports() throws IllegalArgumentException {
        return new GetBillingDepartmentReportsRequestBuilder();
    }
    private okhttp3.Call getBillingInvoicesCall(String billingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/billing/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (billingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billing_id", billingId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillingInvoicesValidateBeforeCall(String billingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingId' is set
        if (billingId == null) {
            throw new ApiException("Missing the required parameter 'billingId' when calling getBillingInvoices(Async)");
        }

        return getBillingInvoicesCall(billingId, _callback);

    }


    private ApiResponse<ReportsGetBillingInvoicesResponse> getBillingInvoicesWithHttpInfo(String billingId) throws ApiException {
        okhttp3.Call localVarCall = getBillingInvoicesValidateBeforeCall(billingId, null);
        Type localVarReturnType = new TypeToken<ReportsGetBillingInvoicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBillingInvoicesAsync(String billingId, final ApiCallback<ReportsGetBillingInvoicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillingInvoicesValidateBeforeCall(billingId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetBillingInvoicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBillingInvoicesRequestBuilder {
        private final String billingId;

        private GetBillingInvoicesRequestBuilder(String billingId) {
            this.billingId = billingId;
        }

        /**
         * Build call for getBillingInvoices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Billing Invoice reports returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;5010&#x60; &lt;br&gt; Report does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBillingInvoicesCall(billingId, _callback);
        }


        /**
         * Execute getBillingInvoices request
         * @return ReportsGetBillingInvoicesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Billing Invoice reports returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;5010&#x60; &lt;br&gt; Report does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetBillingInvoicesResponse execute() throws ApiException {
            ApiResponse<ReportsGetBillingInvoicesResponse> localVarResp = getBillingInvoicesWithHttpInfo(billingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBillingInvoices request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetBillingInvoicesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Billing Invoice reports returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;5010&#x60; &lt;br&gt; Report does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetBillingInvoicesResponse> executeWithHttpInfo() throws ApiException {
            return getBillingInvoicesWithHttpInfo(billingId);
        }

        /**
         * Execute getBillingInvoices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Billing Invoice reports returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;5010&#x60; &lt;br&gt; Report does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetBillingInvoicesResponse> _callback) throws ApiException {
            return getBillingInvoicesAsync(billingId, _callback);
        }
    }

    /**
     * Get billing invoice reports
     * Get department billing invoices reports for a specific billing period. Provide the &#x60;billing_id&#x60; of the billing period for which you would like to retrieve the invoices for. This ID can be retrieved from **Get Billing Reports** API.   **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact the Zoom Support team to enable this feature.    **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param billingId Unique Identifier of the Billing Report. Retrieve this ID from the response of **Get Billing Reports** API request.    (required)
     * @return GetBillingInvoicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Billing Invoice reports returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;5010&#x60; &lt;br&gt; Report does not exist.   </td><td>  -  </td></tr>
     </table>
     */
    public GetBillingInvoicesRequestBuilder getBillingInvoices(String billingId) throws IllegalArgumentException {
        if (billingId == null) throw new IllegalArgumentException("\"billingId\" is required but got null");
            

        return new GetBillingInvoicesRequestBuilder(billingId);
    }
    private okhttp3.Call getCloudRecordingUsageReportCall(LocalDate from, LocalDate to, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/cloud_recording";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudRecordingUsageReportValidateBeforeCall(LocalDate from, LocalDate to, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getCloudRecordingUsageReport(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getCloudRecordingUsageReport(Async)");
        }

        return getCloudRecordingUsageReportCall(from, to, groupId, _callback);

    }


    private ApiResponse<ReportsGetCloudRecordingUsageReportResponse> getCloudRecordingUsageReportWithHttpInfo(LocalDate from, LocalDate to, String groupId) throws ApiException {
        okhttp3.Call localVarCall = getCloudRecordingUsageReportValidateBeforeCall(from, to, groupId, null);
        Type localVarReturnType = new TypeToken<ReportsGetCloudRecordingUsageReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCloudRecordingUsageReportAsync(LocalDate from, LocalDate to, String groupId, final ApiCallback<ReportsGetCloudRecordingUsageReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudRecordingUsageReportValidateBeforeCall(from, to, groupId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetCloudRecordingUsageReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCloudRecordingUsageReportRequestBuilder {
        private final LocalDate from;
        private final LocalDate to;
        private String groupId;

        private GetCloudRecordingUsageReportRequestBuilder(LocalDate from, LocalDate to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set groupId
         * @param groupId The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain users who are members of the queried group ID. (optional)
         * @return GetCloudRecordingUsageReportRequestBuilder
         */
        public GetCloudRecordingUsageReportRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Build call for getCloudRecordingUsageReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Cloud Recording Report Returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt; ’   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCloudRecordingUsageReportCall(from, to, groupId, _callback);
        }


        /**
         * Execute getCloudRecordingUsageReport request
         * @return ReportsGetCloudRecordingUsageReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Cloud Recording Report Returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt; ’   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetCloudRecordingUsageReportResponse execute() throws ApiException {
            ApiResponse<ReportsGetCloudRecordingUsageReportResponse> localVarResp = getCloudRecordingUsageReportWithHttpInfo(from, to, groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCloudRecordingUsageReport request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetCloudRecordingUsageReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Cloud Recording Report Returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt; ’   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetCloudRecordingUsageReportResponse> executeWithHttpInfo() throws ApiException {
            return getCloudRecordingUsageReportWithHttpInfo(from, to, groupId);
        }

        /**
         * Execute getCloudRecordingUsageReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Cloud Recording Report Returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt; ’   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetCloudRecordingUsageReportResponse> _callback) throws ApiException {
            return getCloudRecordingUsageReportAsync(from, to, groupId, _callback);
        }
    }

    /**
     * Get cloud recording usage report
     * Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day earlier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days.      **Prerequisites**     * Pro or higher plan.       **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the &amp;quot;from&amp;quot; and &amp;quot;to&amp;quot; parameters should only be one month as the report includes only one month worth of data at once. (required)
     * @param to End date. (required)
     * @return GetCloudRecordingUsageReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Cloud Recording Report Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt; ’   </td><td>  -  </td></tr>
     </table>
     */
    public GetCloudRecordingUsageReportRequestBuilder getCloudRecordingUsageReport(LocalDate from, LocalDate to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new GetCloudRecordingUsageReportRequestBuilder(from, to);
    }
    private okhttp3.Call getDailyUsageReportCall(Integer year, Integer month, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/daily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyUsageReportValidateBeforeCall(Integer year, Integer month, String groupId, final ApiCallback _callback) throws ApiException {
        return getDailyUsageReportCall(year, month, groupId, _callback);

    }


    private ApiResponse<ReportsGetDailyUsageReportResponse> getDailyUsageReportWithHttpInfo(Integer year, Integer month, String groupId) throws ApiException {
        okhttp3.Call localVarCall = getDailyUsageReportValidateBeforeCall(year, month, groupId, null);
        Type localVarReturnType = new TypeToken<ReportsGetDailyUsageReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDailyUsageReportAsync(Integer year, Integer month, String groupId, final ApiCallback<ReportsGetDailyUsageReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailyUsageReportValidateBeforeCall(year, month, groupId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetDailyUsageReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDailyUsageReportRequestBuilder {
        private Integer year;
        private Integer month;
        private String groupId;

        private GetDailyUsageReportRequestBuilder() {
        }

        /**
         * Set year
         * @param year Year for this report (optional)
         * @return GetDailyUsageReportRequestBuilder
         */
        public GetDailyUsageReportRequestBuilder year(Integer year) {
            this.year = year;
            return this;
        }
        
        /**
         * Set month
         * @param month Month for this report (optional)
         * @return GetDailyUsageReportRequestBuilder
         */
        public GetDailyUsageReportRequestBuilder month(Integer month) {
            this.month = month;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain users who are members of the queried group ID. (optional)
         * @return GetDailyUsageReportRequestBuilder
         */
        public GetDailyUsageReportRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Build call for getDailyUsageReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Daily report retrieved.     This is only available for paid accounts:{accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Daily report can only be provided for a month that falls within the recent 6 months.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt; ’   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDailyUsageReportCall(year, month, groupId, _callback);
        }


        /**
         * Execute getDailyUsageReport request
         * @return ReportsGetDailyUsageReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Daily report retrieved.     This is only available for paid accounts:{accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Daily report can only be provided for a month that falls within the recent 6 months.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt; ’   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetDailyUsageReportResponse execute() throws ApiException {
            ApiResponse<ReportsGetDailyUsageReportResponse> localVarResp = getDailyUsageReportWithHttpInfo(year, month, groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDailyUsageReport request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetDailyUsageReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Daily report retrieved.     This is only available for paid accounts:{accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Daily report can only be provided for a month that falls within the recent 6 months.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt; ’   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetDailyUsageReportResponse> executeWithHttpInfo() throws ApiException {
            return getDailyUsageReportWithHttpInfo(year, month, groupId);
        }

        /**
         * Execute getDailyUsageReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Daily report retrieved.     This is only available for paid accounts:{accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Daily report can only be provided for a month that falls within the recent 6 months.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt; ’   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetDailyUsageReportResponse> _callback) throws ApiException {
            return getDailyUsageReportAsync(year, month, groupId, _callback);
        }
    }

    /**
     * Get daily usage report
     * Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.     **Prerequisites**     * Pro or higher plan.       **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @return GetDailyUsageReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Daily report retrieved.     This is only available for paid accounts:{accountId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Daily report can only be provided for a month that falls within the recent 6 months.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt; ’   </td><td>  -  </td></tr>
     </table>
     */
    public GetDailyUsageReportRequestBuilder getDailyUsageReport() throws IllegalArgumentException {
        return new GetDailyUsageReportRequestBuilder();
    }
    private okhttp3.Call getMeetingDetailReportsCall(Object meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/meetings/{meetingId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingDetailReportsValidateBeforeCall(Object meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getMeetingDetailReports(Async)");
        }

        return getMeetingDetailReportsCall(meetingId, _callback);

    }


    private ApiResponse<ReportsGetMeetingDetailReportsResponse> getMeetingDetailReportsWithHttpInfo(Object meetingId) throws ApiException {
        okhttp3.Call localVarCall = getMeetingDetailReportsValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingDetailReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingDetailReportsAsync(Object meetingId, final ApiCallback<ReportsGetMeetingDetailReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingDetailReportsValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingDetailReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingDetailReportsRequestBuilder {
        private final Object meetingId;

        private GetMeetingDetailReportsRequestBuilder(Object meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for getMeetingDetailReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting details returned.     This is only available for paid account. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access meeting a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting {meetingId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingDetailReportsCall(meetingId, _callback);
        }


        /**
         * Execute getMeetingDetailReports request
         * @return ReportsGetMeetingDetailReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting details returned.     This is only available for paid account. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access meeting a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting {meetingId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetMeetingDetailReportsResponse execute() throws ApiException {
            ApiResponse<ReportsGetMeetingDetailReportsResponse> localVarResp = getMeetingDetailReportsWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingDetailReports request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetMeetingDetailReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting details returned.     This is only available for paid account. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access meeting a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting {meetingId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetMeetingDetailReportsResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingDetailReportsWithHttpInfo(meetingId);
        }

        /**
         * Execute getMeetingDetailReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting details returned.     This is only available for paid account. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access meeting a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting {meetingId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetMeetingDetailReportsResponse> _callback) throws ApiException {
            return getMeetingDetailReportsAsync(meetingId, _callback);
        }
    }

    /**
     * Get meeting detail reports
     * Get a detailed report for a past meeting.      **Prerequisites:**     * Pro or a higher plan.         **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param meetingId The meeting&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request. (required)
     * @return GetMeetingDetailReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting details returned.     This is only available for paid account. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access meeting a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting {meetingId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingDetailReportsRequestBuilder getMeetingDetailReports(Object meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new GetMeetingDetailReportsRequestBuilder(meetingId);
    }
    private okhttp3.Call getMeetingParticipantReportsCall(String meetingId, Integer pageSize, String nextPageToken, String includeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/meetings/{meetingId}/participants"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        if (includeFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_fields", includeFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingParticipantReportsValidateBeforeCall(String meetingId, Integer pageSize, String nextPageToken, String includeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getMeetingParticipantReports(Async)");
        }

        return getMeetingParticipantReportsCall(meetingId, pageSize, nextPageToken, includeFields, _callback);

    }


    private ApiResponse<ReportsGetMeetingParticipantReportsResponse> getMeetingParticipantReportsWithHttpInfo(String meetingId, Integer pageSize, String nextPageToken, String includeFields) throws ApiException {
        okhttp3.Call localVarCall = getMeetingParticipantReportsValidateBeforeCall(meetingId, pageSize, nextPageToken, includeFields, null);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingParticipantReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingParticipantReportsAsync(String meetingId, Integer pageSize, String nextPageToken, String includeFields, final ApiCallback<ReportsGetMeetingParticipantReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingParticipantReportsValidateBeforeCall(meetingId, pageSize, nextPageToken, includeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingParticipantReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingParticipantReportsRequestBuilder {
        private final String meetingId;
        private Integer pageSize;
        private String nextPageToken;
        private String includeFields;

        private GetMeetingParticipantReportsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return GetMeetingParticipantReportsRequestBuilder
         */
        public GetMeetingParticipantReportsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return GetMeetingParticipantReportsRequestBuilder
         */
        public GetMeetingParticipantReportsRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Set includeFields
         * @param includeFields Provide &#x60;registrant_id&#x60; as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](https://developers.zoom.us). (optional)
         * @return GetMeetingParticipantReportsRequestBuilder
         */
        public GetMeetingParticipantReportsRequestBuilder includeFields(String includeFields) {
            this.includeFields = includeFields;
            return this;
        }
        
        /**
         * Build call for getMeetingParticipantReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting participants report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access meeting a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting  {MeetingId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingParticipantReportsCall(meetingId, pageSize, nextPageToken, includeFields, _callback);
        }


        /**
         * Execute getMeetingParticipantReports request
         * @return ReportsGetMeetingParticipantReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting participants report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access meeting a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting  {MeetingId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetMeetingParticipantReportsResponse execute() throws ApiException {
            ApiResponse<ReportsGetMeetingParticipantReportsResponse> localVarResp = getMeetingParticipantReportsWithHttpInfo(meetingId, pageSize, nextPageToken, includeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingParticipantReports request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetMeetingParticipantReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting participants report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access meeting a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting  {MeetingId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetMeetingParticipantReportsResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingParticipantReportsWithHttpInfo(meetingId, pageSize, nextPageToken, includeFields);
        }

        /**
         * Execute getMeetingParticipantReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting participants report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access meeting a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting  {MeetingId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetMeetingParticipantReportsResponse> _callback) throws ApiException {
            return getMeetingParticipantReportsAsync(meetingId, pageSize, nextPageToken, includeFields, _callback);
        }
    }

    /**
     * Get meeting participant reports
     * Return a report of a past meeting with two or more participants, including the host. To return a report for past meeting with only **one** participant, use the [**List meeting participants**](https://developers.zoom.us) API.   **Note:**   This API may return empty values for participants&#39; &#x60;user_name&#x60;, &#x60;ip_address&#x60;, &#x60;location&#x60;, and &#x60;email&#x60; responses when the account calling this API:  * Does **not** have a signed HIPAA business associate agreement (BAA).  * Is a [**legacy** HIPAA BAA account](https://developers.zoom.us).   **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param meetingId The meeting&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request. (required)
     * @return GetMeetingParticipantReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting participants report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access meeting a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting  {MeetingId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingParticipantReportsRequestBuilder getMeetingParticipantReports(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new GetMeetingParticipantReportsRequestBuilder(meetingId);
    }
    private okhttp3.Call getMeetingPollReportsCall(Object meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/meetings/{meetingId}/polls"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingPollReportsValidateBeforeCall(Object meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getMeetingPollReports(Async)");
        }

        return getMeetingPollReportsCall(meetingId, _callback);

    }


    private ApiResponse<ReportsGetMeetingPollReportsResponse> getMeetingPollReportsWithHttpInfo(Object meetingId) throws ApiException {
        okhttp3.Call localVarCall = getMeetingPollReportsValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingPollReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingPollReportsAsync(Object meetingId, final ApiCallback<ReportsGetMeetingPollReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingPollReportsValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingPollReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingPollReportsRequestBuilder {
        private final Object meetingId;

        private GetMeetingPollReportsRequestBuilder(Object meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for getMeetingPollReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  * Meeting polls report returned.  * This is only available for paid account: {accountId} </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access meeting a year ago.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting \&quot;{meetingId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingPollReportsCall(meetingId, _callback);
        }


        /**
         * Execute getMeetingPollReports request
         * @return ReportsGetMeetingPollReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  * Meeting polls report returned.  * This is only available for paid account: {accountId} </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access meeting a year ago.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting \&quot;{meetingId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetMeetingPollReportsResponse execute() throws ApiException {
            ApiResponse<ReportsGetMeetingPollReportsResponse> localVarResp = getMeetingPollReportsWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingPollReports request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetMeetingPollReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  * Meeting polls report returned.  * This is only available for paid account: {accountId} </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access meeting a year ago.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting \&quot;{meetingId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetMeetingPollReportsResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingPollReportsWithHttpInfo(meetingId);
        }

        /**
         * Execute getMeetingPollReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  * Meeting polls report returned.  * This is only available for paid account: {accountId} </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access meeting a year ago.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting \&quot;{meetingId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetMeetingPollReportsResponse> _callback) throws ApiException {
            return getMeetingPollReportsAsync(meetingId, _callback);
        }
    }

    /**
     * Get meeting poll reports
     * Use this API to get a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting.    **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param meetingId The meeting&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request. (required)
     * @return GetMeetingPollReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  * Meeting polls report returned.  * This is only available for paid account: {accountId} </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access meeting a year ago.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting \&quot;{meetingId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingPollReportsRequestBuilder getMeetingPollReports(Object meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new GetMeetingPollReportsRequestBuilder(meetingId);
    }
    private okhttp3.Call getMeetingQaReportCall(String meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/meetings/{meetingId}/qa"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingQaReportValidateBeforeCall(String meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getMeetingQaReport(Async)");
        }

        return getMeetingQaReportCall(meetingId, _callback);

    }


    private ApiResponse<ReportsGetMeetingQaReportResponse> getMeetingQaReportWithHttpInfo(String meetingId) throws ApiException {
        okhttp3.Call localVarCall = getMeetingQaReportValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingQaReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingQaReportAsync(String meetingId, final ApiCallback<ReportsGetMeetingQaReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingQaReportValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingQaReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingQaReportRequestBuilder {
        private final String meetingId;

        private GetMeetingQaReportRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for getMeetingQaReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting Q&amp;amp;A report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingQaReportCall(meetingId, _callback);
        }


        /**
         * Execute getMeetingQaReport request
         * @return ReportsGetMeetingQaReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting Q&amp;amp;A report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetMeetingQaReportResponse execute() throws ApiException {
            ApiResponse<ReportsGetMeetingQaReportResponse> localVarResp = getMeetingQaReportWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingQaReport request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetMeetingQaReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting Q&amp;amp;A report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetMeetingQaReportResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingQaReportWithHttpInfo(meetingId);
        }

        /**
         * Execute getMeetingQaReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting Q&amp;amp;A report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetMeetingQaReportResponse> _callback) throws ApiException {
            return getMeetingQaReportAsync(meetingId, _callback);
        }
    }

    /**
     * Get meeting Q&amp;A report
     * Retrieve a report on questions asked and answered by participants from past meetings.             **Prerequisites:**     * Pro plan or higher.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     * @param meetingId The meeting&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request. (required)
     * @return GetMeetingQaReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting Q&amp;amp;A report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingQaReportRequestBuilder getMeetingQaReport(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new GetMeetingQaReportRequestBuilder(meetingId);
    }
    private okhttp3.Call getMeetingReportsCall(Object userId, LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/users/{userId}/meetings"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingReportsValidateBeforeCall(Object userId, LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getMeetingReports(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getMeetingReports(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getMeetingReports(Async)");
        }

        return getMeetingReportsCall(userId, from, to, pageSize, nextPageToken, type, _callback);

    }


    private ApiResponse<ReportsGetMeetingReportsResponse> getMeetingReportsWithHttpInfo(Object userId, LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String type) throws ApiException {
        okhttp3.Call localVarCall = getMeetingReportsValidateBeforeCall(userId, from, to, pageSize, nextPageToken, type, null);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingReportsAsync(Object userId, LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String type, final ApiCallback<ReportsGetMeetingReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingReportsValidateBeforeCall(userId, from, to, pageSize, nextPageToken, type, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingReportsRequestBuilder {
        private final Object userId;
        private final LocalDate from;
        private final LocalDate to;
        private Integer pageSize;
        private String nextPageToken;
        private String type;

        private GetMeetingReportsRequestBuilder(Object userId, LocalDate from, LocalDate to) {
            this.userId = userId;
            this.from = from;
            this.to = to;
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return GetMeetingReportsRequestBuilder
         */
        public GetMeetingReportsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return GetMeetingReportsRequestBuilder
         */
        public GetMeetingReportsRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Set type
         * @param type The meeting type to query for:  * &#x60;past&#x60; &amp;mdash; All past meetings.  * &#x60;pastOne&#x60; &amp;mdash; A single past user meeting.  * &#x60;pastJoined&#x60; &amp;mdash; All past meetings the account&#39;s users hosted or joined. (optional, default to past)
         * @return GetMeetingReportsRequestBuilder
         */
        public GetMeetingReportsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for getMeetingReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Active or inactive hosts report returned.      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; This is only available for paid account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The next page token is invalid or expired.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingReportsCall(userId, from, to, pageSize, nextPageToken, type, _callback);
        }


        /**
         * Execute getMeetingReports request
         * @return ReportsGetMeetingReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Active or inactive hosts report returned.      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; This is only available for paid account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The next page token is invalid or expired.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetMeetingReportsResponse execute() throws ApiException {
            ApiResponse<ReportsGetMeetingReportsResponse> localVarResp = getMeetingReportsWithHttpInfo(userId, from, to, pageSize, nextPageToken, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingReports request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetMeetingReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Active or inactive hosts report returned.      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; This is only available for paid account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The next page token is invalid or expired.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetMeetingReportsResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingReportsWithHttpInfo(userId, from, to, pageSize, nextPageToken, type);
        }

        /**
         * Execute getMeetingReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Active or inactive hosts report returned.      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; This is only available for paid account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The next page token is invalid or expired.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetMeetingReportsResponse> _callback) throws ApiException {
            return getMeetingReportsAsync(userId, from, to, pageSize, nextPageToken, type, _callback);
        }
    }

    /**
     * Get meeting reports
     * Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on past meetings and webinars for a specified time period. The time range for the report is limited to a month and the month must fall within the past six months.  Meetings and webinars are returned only if they have two or more unique participants.            **Prerequisites:**     * Pro or higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value. (required)
     * @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the &amp;quot;from&amp;quot; and &amp;quot;to&amp;quot; parameters should only be one month as the report includes only one month worth of data at once. (required)
     * @param to End date. (required)
     * @return GetMeetingReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Active or inactive hosts report returned.      </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; This is only available for paid account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The next page token is invalid or expired.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.   </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingReportsRequestBuilder getMeetingReports(Object userId, LocalDate from, LocalDate to) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new GetMeetingReportsRequestBuilder(userId, from, to);
    }
    private okhttp3.Call getMeetingSurveyReportCall(String meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/meetings/{meetingId}/survey"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingSurveyReportValidateBeforeCall(String meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getMeetingSurveyReport(Async)");
        }

        return getMeetingSurveyReportCall(meetingId, _callback);

    }


    private ApiResponse<ReportsGetMeetingSurveyReportResponse> getMeetingSurveyReportWithHttpInfo(String meetingId) throws ApiException {
        okhttp3.Call localVarCall = getMeetingSurveyReportValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingSurveyReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingSurveyReportAsync(String meetingId, final ApiCallback<ReportsGetMeetingSurveyReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingSurveyReportValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetMeetingSurveyReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingSurveyReportRequestBuilder {
        private final String meetingId;

        private GetMeetingSurveyReportRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for getMeetingSurveyReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting survey report returned.      Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingSurveyReportCall(meetingId, _callback);
        }


        /**
         * Execute getMeetingSurveyReport request
         * @return ReportsGetMeetingSurveyReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting survey report returned.      Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetMeetingSurveyReportResponse execute() throws ApiException {
            ApiResponse<ReportsGetMeetingSurveyReportResponse> localVarResp = getMeetingSurveyReportWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingSurveyReport request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetMeetingSurveyReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting survey report returned.      Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetMeetingSurveyReportResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingSurveyReportWithHttpInfo(meetingId);
        }

        /**
         * Execute getMeetingSurveyReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting survey report returned.      Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetMeetingSurveyReportResponse> _callback) throws ApiException {
            return getMeetingSurveyReportAsync(meetingId, _callback);
        }
    }

    /**
     * Get meeting survey report
     * Retrieve a report on past [meeting survey](https://support.zoom.com/hc/en/article?id&#x3D;zm_kb&amp;sysparm_article&#x3D;KB0057559).          **Prerequisites:**     * Pro or a higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     * @param meetingId The meeting&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request. (required)
     * @return GetMeetingSurveyReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting survey report returned.      Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingSurveyReportRequestBuilder getMeetingSurveyReport(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new GetMeetingSurveyReportRequestBuilder(meetingId);
    }
    private okhttp3.Call getOperationLogsReportCall(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String categoryType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/operationlogs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        if (categoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_type", categoryType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOperationLogsReportValidateBeforeCall(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String categoryType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getOperationLogsReport(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getOperationLogsReport(Async)");
        }

        return getOperationLogsReportCall(from, to, pageSize, nextPageToken, categoryType, _callback);

    }


    private ApiResponse<ReportsGetOperationLogsReportResponse> getOperationLogsReportWithHttpInfo(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String categoryType) throws ApiException {
        okhttp3.Call localVarCall = getOperationLogsReportValidateBeforeCall(from, to, pageSize, nextPageToken, categoryType, null);
        Type localVarReturnType = new TypeToken<ReportsGetOperationLogsReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOperationLogsReportAsync(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String categoryType, final ApiCallback<ReportsGetOperationLogsReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOperationLogsReportValidateBeforeCall(from, to, pageSize, nextPageToken, categoryType, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetOperationLogsReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOperationLogsReportRequestBuilder {
        private final LocalDate from;
        private final LocalDate to;
        private Integer pageSize;
        private String nextPageToken;
        private String categoryType;

        private GetOperationLogsReportRequestBuilder(LocalDate from, LocalDate to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return GetOperationLogsReportRequestBuilder
         */
        public GetOperationLogsReportRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return GetOperationLogsReportRequestBuilder
         */
        public GetOperationLogsReportRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Set categoryType
         * @param categoryType **Optional**     Filter your response by a category type to see reports for a specific category. The value for this field can be one of the following:     &#x60;all&#x60;    &#x60;user&#x60;    &#x60;user_settings&#x60;    &#x60;account&#x60;    &#x60;billing&#x60;    &#x60;im&#x60;    &#x60;recording&#x60;    &#x60;phone_contacts&#x60;    &#x60;webinar&#x60;    &#x60;sub_account&#x60;    &#x60;role&#x60;    &#x60;zoom_rooms&#x60; (optional)
         * @return GetOperationLogsReportRequestBuilder
         */
        public GetOperationLogsReportRequestBuilder categoryType(String categoryType) {
            this.categoryType = categoryType;
            return this;
        }
        
        /**
         * Build call for getOperationLogsReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Operation Logs Report Returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOperationLogsReportCall(from, to, pageSize, nextPageToken, categoryType, _callback);
        }


        /**
         * Execute getOperationLogsReport request
         * @return ReportsGetOperationLogsReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Operation Logs Report Returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetOperationLogsReportResponse execute() throws ApiException {
            ApiResponse<ReportsGetOperationLogsReportResponse> localVarResp = getOperationLogsReportWithHttpInfo(from, to, pageSize, nextPageToken, categoryType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOperationLogsReport request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetOperationLogsReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Operation Logs Report Returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetOperationLogsReportResponse> executeWithHttpInfo() throws ApiException {
            return getOperationLogsReportWithHttpInfo(from, to, pageSize, nextPageToken, categoryType);
        }

        /**
         * Execute getOperationLogsReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Operation Logs Report Returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetOperationLogsReportResponse> _callback) throws ApiException {
            return getOperationLogsReportAsync(from, to, pageSize, nextPageToken, categoryType, _callback);
        }
    }

    /**
     * Get operation logs report
     * The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.     Use this API to retrieve operation logs report for a specified period of time.     **Prerequisites:**     * Pro or higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the &amp;quot;from&amp;quot; and &amp;quot;to&amp;quot; parameters should only be one month as the report includes only one month worth of data at once. (required)
     * @param to End date. (required)
     * @return GetOperationLogsReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Operation Logs Report Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
     </table>
     */
    public GetOperationLogsReportRequestBuilder getOperationLogsReport(LocalDate from, LocalDate to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new GetOperationLogsReportRequestBuilder(from, to);
    }
    private okhttp3.Call getTelephoneReportsCall(LocalDate from, LocalDate to, String type, String queryDateType, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/telephone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (queryDateType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query_date_type", queryDateType));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTelephoneReportsValidateBeforeCall(LocalDate from, LocalDate to, String type, String queryDateType, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getTelephoneReports(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getTelephoneReports(Async)");
        }

        return getTelephoneReportsCall(from, to, type, queryDateType, pageSize, pageNumber, nextPageToken, _callback);

    }


    private ApiResponse<ReportsGetTelephoneReportsResponse> getTelephoneReportsWithHttpInfo(LocalDate from, LocalDate to, String type, String queryDateType, Integer pageSize, Integer pageNumber, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = getTelephoneReportsValidateBeforeCall(from, to, type, queryDateType, pageSize, pageNumber, nextPageToken, null);
        Type localVarReturnType = new TypeToken<ReportsGetTelephoneReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTelephoneReportsAsync(LocalDate from, LocalDate to, String type, String queryDateType, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback<ReportsGetTelephoneReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTelephoneReportsValidateBeforeCall(from, to, type, queryDateType, pageSize, pageNumber, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetTelephoneReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTelephoneReportsRequestBuilder {
        private final LocalDate from;
        private final LocalDate to;
        private String type;
        private String queryDateType;
        private Integer pageSize;
        private Integer pageNumber;
        private String nextPageToken;

        private GetTelephoneReportsRequestBuilder(LocalDate from, LocalDate to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set type
         * @param type Audio types:    &#x60;1&#x60; - Toll-free Call-in &amp;amp; Call-out.    &#x60;2&#x60; - Toll      &#x60;3&#x60; - SIP Connected Audio (optional, default to 1)
         * @return GetTelephoneReportsRequestBuilder
         */
        public GetTelephoneReportsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set queryDateType
         * @param queryDateType The type of date to query.  * &#x60;start_time&#x60; &amp;mdash; Query by call start time.  * &#x60;end_time&#x60; &amp;mdash; Query by call end time.  * &#x60;meeting_start_time&#x60; &amp;mdash; Query by meeting start time.  * &#x60;meeting_end_time&#x60; &amp;mdash; Query by meeting end time.   This value defaults to &#x60;start_time&#x60;. (optional, default to start_time)
         * @return GetTelephoneReportsRequestBuilder
         */
        public GetTelephoneReportsRequestBuilder queryDateType(String queryDateType) {
            this.queryDateType = queryDateType;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return GetTelephoneReportsRequestBuilder
         */
        public GetTelephoneReportsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the current page in the returned records. This field is **not** available if the &#x60;query_date_type&#x60; parameter is the &#x60;meeting_start_time&#x60; or &#x60;meeting_end_time&#x60; value.   This field is deprecated. Use the &#x60;next_page_token&#x60; query parameter for pagination. (optional, default to 1)
         * @return GetTelephoneReportsRequestBuilder
         */
        public GetTelephoneReportsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes. (optional)
         * @return GetTelephoneReportsRequestBuilder
         */
        public GetTelephoneReportsRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for getTelephoneReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Telephone report returned.     This is only available for paid account:{accountId}.     The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.     Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTelephoneReportsCall(from, to, type, queryDateType, pageSize, pageNumber, nextPageToken, _callback);
        }


        /**
         * Execute getTelephoneReports request
         * @return ReportsGetTelephoneReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Telephone report returned.     This is only available for paid account:{accountId}.     The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.     Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help. </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetTelephoneReportsResponse execute() throws ApiException {
            ApiResponse<ReportsGetTelephoneReportsResponse> localVarResp = getTelephoneReportsWithHttpInfo(from, to, type, queryDateType, pageSize, pageNumber, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTelephoneReports request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetTelephoneReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Telephone report returned.     This is only available for paid account:{accountId}.     The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.     Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetTelephoneReportsResponse> executeWithHttpInfo() throws ApiException {
            return getTelephoneReportsWithHttpInfo(from, to, type, queryDateType, pageSize, pageNumber, nextPageToken);
        }

        /**
         * Execute getTelephoneReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Telephone report returned.     This is only available for paid account:{accountId}.     The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.     Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetTelephoneReportsResponse> _callback) throws ApiException {
            return getTelephoneReportsAsync(from, to, type, queryDateType, pageSize, pageNumber, nextPageToken, _callback);
        }
    }

    /**
     * Get telephone reports
     * The [telephone report](https://support.zoom.us/hc/en-us/articles/206514816-Telephone-reports) allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.  **Prerequisites:**     * Pro or higher plan.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the &amp;quot;from&amp;quot; and &amp;quot;to&amp;quot; parameters should only be one month as the report includes only one month worth of data at once. (required)
     * @param to End date. (required)
     * @return GetTelephoneReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Telephone report returned.     This is only available for paid account:{accountId}.     The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.     Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help. </td><td>  -  </td></tr>
     </table>
     */
    public GetTelephoneReportsRequestBuilder getTelephoneReports(LocalDate from, LocalDate to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new GetTelephoneReportsRequestBuilder(from, to);
    }
    private okhttp3.Call getWebinarDetailsReportCall(String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/webinars/{webinarId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebinarDetailsReportValidateBeforeCall(String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getWebinarDetailsReport(Async)");
        }

        return getWebinarDetailsReportCall(webinarId, _callback);

    }


    private ApiResponse<ReportsGetWebinarDetailsReportResponse> getWebinarDetailsReportWithHttpInfo(String webinarId) throws ApiException {
        okhttp3.Call localVarCall = getWebinarDetailsReportValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<ReportsGetWebinarDetailsReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebinarDetailsReportAsync(String webinarId, final ApiCallback<ReportsGetWebinarDetailsReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebinarDetailsReportValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetWebinarDetailsReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebinarDetailsReportRequestBuilder {
        private final String webinarId;

        private GetWebinarDetailsReportRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getWebinarDetailsReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar details returned.     This is only available for paid account:{accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a webinar a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting  {meetingId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebinarDetailsReportCall(webinarId, _callback);
        }


        /**
         * Execute getWebinarDetailsReport request
         * @return ReportsGetWebinarDetailsReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar details returned.     This is only available for paid account:{accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a webinar a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting  {meetingId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetWebinarDetailsReportResponse execute() throws ApiException {
            ApiResponse<ReportsGetWebinarDetailsReportResponse> localVarResp = getWebinarDetailsReportWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebinarDetailsReport request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetWebinarDetailsReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar details returned.     This is only available for paid account:{accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a webinar a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting  {meetingId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetWebinarDetailsReportResponse> executeWithHttpInfo() throws ApiException {
            return getWebinarDetailsReportWithHttpInfo(webinarId);
        }

        /**
         * Execute getWebinarDetailsReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar details returned.     This is only available for paid account:{accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a webinar a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting  {meetingId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetWebinarDetailsReportResponse> _callback) throws ApiException {
            return getWebinarDetailsReportAsync(webinarId, _callback);
        }
    }

    /**
     * Get webinar detail reports
     * Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.            **Prerequisites:**     * Pro or higher plan with Webinar add-on.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param webinarId The webinar&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
     * @return GetWebinarDetailsReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar details returned.     This is only available for paid account:{accountId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a webinar a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting  {meetingId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
     </table>
     */
    public GetWebinarDetailsReportRequestBuilder getWebinarDetailsReport(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetWebinarDetailsReportRequestBuilder(webinarId);
    }
    private okhttp3.Call getWebinarPollReportsCall(String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/webinars/{webinarId}/polls"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebinarPollReportsValidateBeforeCall(String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getWebinarPollReports(Async)");
        }

        return getWebinarPollReportsCall(webinarId, _callback);

    }


    private ApiResponse<ReportsGetWebinarPollReportsResponse> getWebinarPollReportsWithHttpInfo(String webinarId) throws ApiException {
        okhttp3.Call localVarCall = getWebinarPollReportsValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<ReportsGetWebinarPollReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebinarPollReportsAsync(String webinarId, final ApiCallback<ReportsGetWebinarPollReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebinarPollReportsValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetWebinarPollReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebinarPollReportsRequestBuilder {
        private final String webinarId;

        private GetWebinarPollReportsRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getWebinarPollReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar polls report returned.     Missing webinar subscription plan.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a webinar a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar  {webinarId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebinarPollReportsCall(webinarId, _callback);
        }


        /**
         * Execute getWebinarPollReports request
         * @return ReportsGetWebinarPollReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar polls report returned.     Missing webinar subscription plan.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a webinar a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar  {webinarId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetWebinarPollReportsResponse execute() throws ApiException {
            ApiResponse<ReportsGetWebinarPollReportsResponse> localVarResp = getWebinarPollReportsWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebinarPollReports request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetWebinarPollReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar polls report returned.     Missing webinar subscription plan.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a webinar a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar  {webinarId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetWebinarPollReportsResponse> executeWithHttpInfo() throws ApiException {
            return getWebinarPollReportsWithHttpInfo(webinarId);
        }

        /**
         * Execute getWebinarPollReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar polls report returned.     Missing webinar subscription plan.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a webinar a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar  {webinarId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetWebinarPollReportsResponse> _callback) throws ApiException {
            return getWebinarPollReportsAsync(webinarId, _callback);
        }
    }

    /**
     * Get webinar poll reports
     * Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param webinarId The webinar&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the webinar UUID before making an API request. (required)
     * @return GetWebinarPollReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar polls report returned.     Missing webinar subscription plan.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account:{accountId}.&lt;br&gt;  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a webinar a year ago.&lt;br&gt;  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar  {webinarId} not found or has expired.&lt;br&gt;   </td><td>  -  </td></tr>
     </table>
     */
    public GetWebinarPollReportsRequestBuilder getWebinarPollReports(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetWebinarPollReportsRequestBuilder(webinarId);
    }
    private okhttp3.Call getWebinarQAReportCall(String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/webinars/{webinarId}/qa"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebinarQAReportValidateBeforeCall(String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getWebinarQAReport(Async)");
        }

        return getWebinarQAReportCall(webinarId, _callback);

    }


    private ApiResponse<ReportsGetWebinarQaReportResponse> getWebinarQAReportWithHttpInfo(String webinarId) throws ApiException {
        okhttp3.Call localVarCall = getWebinarQAReportValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<ReportsGetWebinarQaReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebinarQAReportAsync(String webinarId, final ApiCallback<ReportsGetWebinarQaReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebinarQAReportValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetWebinarQaReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebinarQAReportRequestBuilder {
        private final String webinarId;

        private GetWebinarQAReportRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getWebinarQAReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;   Webinar Q&amp;A report returned. Only available for Paid or ZMP account: {accountId}.   A report can&#39;t be generated for this account because this account is not subscribed to a webinar plan. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebinarQAReportCall(webinarId, _callback);
        }


        /**
         * Execute getWebinarQAReport request
         * @return ReportsGetWebinarQaReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;   Webinar Q&amp;A report returned. Only available for Paid or ZMP account: {accountId}.   A report can&#39;t be generated for this account because this account is not subscribed to a webinar plan. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetWebinarQaReportResponse execute() throws ApiException {
            ApiResponse<ReportsGetWebinarQaReportResponse> localVarResp = getWebinarQAReportWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebinarQAReport request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetWebinarQaReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;   Webinar Q&amp;A report returned. Only available for Paid or ZMP account: {accountId}.   A report can&#39;t be generated for this account because this account is not subscribed to a webinar plan. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetWebinarQaReportResponse> executeWithHttpInfo() throws ApiException {
            return getWebinarQAReportWithHttpInfo(webinarId);
        }

        /**
         * Execute getWebinarQAReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;   Webinar Q&amp;A report returned. Only available for Paid or ZMP account: {accountId}.   A report can&#39;t be generated for this account because this account is not subscribed to a webinar plan. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetWebinarQaReportResponse> _callback) throws ApiException {
            return getWebinarQAReportAsync(webinarId, _callback);
        }
    }

    /**
     * Get webinar Q&amp;A report
     * Retrieve a report on questions asked by participants and answered by panelists, co-hosts and hosts from past webinars.             **Prerequisites:**     * Pro or a higher plan with the Webinar add-on enabled.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     * @param webinarId The webinar&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the webinar UUID before making an API request. (required)
     * @return GetWebinarQAReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;   Webinar Q&amp;A report returned. Only available for Paid or ZMP account: {accountId}.   A report can&#39;t be generated for this account because this account is not subscribed to a webinar plan. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetWebinarQAReportRequestBuilder getWebinarQAReport(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetWebinarQAReportRequestBuilder(webinarId);
    }
    private okhttp3.Call getWebinarSurveyReportCall(String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/webinars/{webinarId}/survey"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebinarSurveyReportValidateBeforeCall(String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getWebinarSurveyReport(Async)");
        }

        return getWebinarSurveyReportCall(webinarId, _callback);

    }


    private ApiResponse<ReportsGetWebinarSurveyReportResponse> getWebinarSurveyReportWithHttpInfo(String webinarId) throws ApiException {
        okhttp3.Call localVarCall = getWebinarSurveyReportValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<ReportsGetWebinarSurveyReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebinarSurveyReportAsync(String webinarId, final ApiCallback<ReportsGetWebinarSurveyReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebinarSurveyReportValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetWebinarSurveyReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebinarSurveyReportRequestBuilder {
        private final String webinarId;

        private GetWebinarSurveyReportRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getWebinarSurveyReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar survey report returned.     Missing webinar subscription plan.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebinarSurveyReportCall(webinarId, _callback);
        }


        /**
         * Execute getWebinarSurveyReport request
         * @return ReportsGetWebinarSurveyReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar survey report returned.     Missing webinar subscription plan.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetWebinarSurveyReportResponse execute() throws ApiException {
            ApiResponse<ReportsGetWebinarSurveyReportResponse> localVarResp = getWebinarSurveyReportWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebinarSurveyReport request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetWebinarSurveyReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar survey report returned.     Missing webinar subscription plan.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetWebinarSurveyReportResponse> executeWithHttpInfo() throws ApiException {
            return getWebinarSurveyReportWithHttpInfo(webinarId);
        }

        /**
         * Execute getWebinarSurveyReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar survey report returned.     Missing webinar subscription plan.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetWebinarSurveyReportResponse> _callback) throws ApiException {
            return getWebinarSurveyReportAsync(webinarId, _callback);
        }
    }

    /**
     * Get webinar survey report
     * Retrieve a report on past [webinar survey](https://support.zoom.com/hc/en/article?id&#x3D;zm_kb&amp;sysparm_article&#x3D;KB0057559).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     * @param webinarId The webinar&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the webinar UUID before making an API request. (required)
     * @return GetWebinarSurveyReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar survey report returned.     Missing webinar subscription plan.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetWebinarSurveyReportRequestBuilder getWebinarSurveyReport(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetWebinarSurveyReportRequestBuilder(webinarId);
    }
    private okhttp3.Call listSignInSignOutActivitiesCall(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSignInSignOutActivitiesValidateBeforeCall(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        return listSignInSignOutActivitiesCall(from, to, pageSize, nextPageToken, _callback);

    }


    private ApiResponse<ReportsListSignInSignOutActivitiesResponse> listSignInSignOutActivitiesWithHttpInfo(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = listSignInSignOutActivitiesValidateBeforeCall(from, to, pageSize, nextPageToken, null);
        Type localVarReturnType = new TypeToken<ReportsListSignInSignOutActivitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSignInSignOutActivitiesAsync(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, final ApiCallback<ReportsListSignInSignOutActivitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSignInSignOutActivitiesValidateBeforeCall(from, to, pageSize, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<ReportsListSignInSignOutActivitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSignInSignOutActivitiesRequestBuilder {
        private LocalDate from;
        private LocalDate to;
        private Integer pageSize;
        private String nextPageToken;

        private ListSignInSignOutActivitiesRequestBuilder() {
        }

        /**
         * Set from
         * @param from Start date for which you would like to view the activity logs report. Using the &#x60;from&#x60; and &#x60;to&#x60; parameters, specify a monthly date range for the report as the API only provides one month worth of data in one request. The specified date range should fall within the last six months. (optional)
         * @return ListSignInSignOutActivitiesRequestBuilder
         */
        public ListSignInSignOutActivitiesRequestBuilder from(LocalDate from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to End date up to which you would like to view the activity logs report. (optional)
         * @return ListSignInSignOutActivitiesRequestBuilder
         */
        public ListSignInSignOutActivitiesRequestBuilder to(LocalDate to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of records to be returned within a single API call (optional)
         * @return ListSignInSignOutActivitiesRequestBuilder
         */
        public ListSignInSignOutActivitiesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Next page token is used to paginate through large result sets (optional)
         * @return ListSignInSignOutActivitiesRequestBuilder
         */
        public ListSignInSignOutActivitiesRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for listSignInSignOutActivities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSignInSignOutActivitiesCall(from, to, pageSize, nextPageToken, _callback);
        }


        /**
         * Execute listSignInSignOutActivities request
         * @return ReportsListSignInSignOutActivitiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListSignInSignOutActivitiesResponse execute() throws ApiException {
            ApiResponse<ReportsListSignInSignOutActivitiesResponse> localVarResp = listSignInSignOutActivitiesWithHttpInfo(from, to, pageSize, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSignInSignOutActivities request with HTTP info returned
         * @return ApiResponse&lt;ReportsListSignInSignOutActivitiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListSignInSignOutActivitiesResponse> executeWithHttpInfo() throws ApiException {
            return listSignInSignOutActivitiesWithHttpInfo(from, to, pageSize, nextPageToken);
        }

        /**
         * Execute listSignInSignOutActivities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListSignInSignOutActivitiesResponse> _callback) throws ApiException {
            return listSignInSignOutActivitiesAsync(from, to, pageSize, nextPageToken, _callback);
        }
    }

    /**
     * Get sign In / sign out activity report
     * Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.     **Prerequisites**     * Pro or higher plan.       **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @return ListSignInSignOutActivitiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
     </table>
     */
    public ListSignInSignOutActivitiesRequestBuilder listSignInSignOutActivities() throws IllegalArgumentException {
        return new ListSignInSignOutActivitiesRequestBuilder();
    }
    private okhttp3.Call listUpcomingEventsReportCall(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String type, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/upcoming_events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUpcomingEventsReportValidateBeforeCall(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String type, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling listUpcomingEventsReport(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling listUpcomingEventsReport(Async)");
        }

        return listUpcomingEventsReportCall(from, to, pageSize, nextPageToken, type, groupId, _callback);

    }


    private ApiResponse<ReportsListUpcomingEventsReportResponse> listUpcomingEventsReportWithHttpInfo(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String type, String groupId) throws ApiException {
        okhttp3.Call localVarCall = listUpcomingEventsReportValidateBeforeCall(from, to, pageSize, nextPageToken, type, groupId, null);
        Type localVarReturnType = new TypeToken<ReportsListUpcomingEventsReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUpcomingEventsReportAsync(LocalDate from, LocalDate to, Integer pageSize, String nextPageToken, String type, String groupId, final ApiCallback<ReportsListUpcomingEventsReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUpcomingEventsReportValidateBeforeCall(from, to, pageSize, nextPageToken, type, groupId, _callback);
        Type localVarReturnType = new TypeToken<ReportsListUpcomingEventsReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUpcomingEventsReportRequestBuilder {
        private final LocalDate from;
        private final LocalDate to;
        private Integer pageSize;
        private String nextPageToken;
        private String type;
        private String groupId;

        private ListUpcomingEventsReportRequestBuilder(LocalDate from, LocalDate to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListUpcomingEventsReportRequestBuilder
         */
        public ListUpcomingEventsReportRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return ListUpcomingEventsReportRequestBuilder
         */
        public ListUpcomingEventsReportRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of event to query.  * &#x60;meeting&#x60; &amp;mdash; A meeting event.  * &#x60;webinar&#x60; &amp;mdash; A webinar event.  * &#x60;all&#x60; &amp;mdash; Both meeting and webinar events.  This value defaults to &#x60;all&#x60;. (optional, default to all)
         * @return ListUpcomingEventsReportRequestBuilder
         */
        public ListUpcomingEventsReportRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain meetings where the host is a member of the queried group ID. (optional)
         * @return ListUpcomingEventsReportRequestBuilder
         */
        public ListUpcomingEventsReportRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Build call for listUpcomingEventsReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Upcoming events report returned.      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; This is only available for the paid account: {accountId} &lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The next page token is invalid or expired.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUpcomingEventsReportCall(from, to, pageSize, nextPageToken, type, groupId, _callback);
        }


        /**
         * Execute listUpcomingEventsReport request
         * @return ReportsListUpcomingEventsReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Upcoming events report returned.      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; This is only available for the paid account: {accountId} &lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The next page token is invalid or expired.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ReportsListUpcomingEventsReportResponse execute() throws ApiException {
            ApiResponse<ReportsListUpcomingEventsReportResponse> localVarResp = listUpcomingEventsReportWithHttpInfo(from, to, pageSize, nextPageToken, type, groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUpcomingEventsReport request with HTTP info returned
         * @return ApiResponse&lt;ReportsListUpcomingEventsReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Upcoming events report returned.      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; This is only available for the paid account: {accountId} &lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The next page token is invalid or expired.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsListUpcomingEventsReportResponse> executeWithHttpInfo() throws ApiException {
            return listUpcomingEventsReportWithHttpInfo(from, to, pageSize, nextPageToken, type, groupId);
        }

        /**
         * Execute listUpcomingEventsReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Upcoming events report returned.      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; This is only available for the paid account: {accountId} &lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The next page token is invalid or expired.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsListUpcomingEventsReportResponse> _callback) throws ApiException {
            return listUpcomingEventsReportAsync(from, to, pageSize, nextPageToken, type, groupId, _callback);
        }
    }

    /**
     * Get upcoming events report
     * Use this API to list upcoming meeting and/or webinar events within a specified period of time. The report&#39;s time range is limited to one month.  **Prerequisites:**  * A Pro or higher plan  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the &amp;quot;from&amp;quot; and &amp;quot;to&amp;quot; parameters should only be one month as the report includes only one month worth of data at once. (required)
     * @param to End date. (required)
     * @return ListUpcomingEventsReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Upcoming events report returned.      </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; This is only available for the paid account: {accountId} &lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The next page token is invalid or expired.  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.&lt;br&gt;   </td><td>  -  </td></tr>
     </table>
     */
    public ListUpcomingEventsReportRequestBuilder listUpcomingEventsReport(LocalDate from, LocalDate to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new ListUpcomingEventsReportRequestBuilder(from, to);
    }
    private okhttp3.Call webinarParticipantsListCall(String webinarId, Integer pageSize, String nextPageToken, String includeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/webinars/{webinarId}/participants"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        if (includeFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_fields", includeFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webinarParticipantsListValidateBeforeCall(String webinarId, Integer pageSize, String nextPageToken, String includeFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling webinarParticipantsList(Async)");
        }

        return webinarParticipantsListCall(webinarId, pageSize, nextPageToken, includeFields, _callback);

    }


    private ApiResponse<ReportsWebinarParticipantsListResponse> webinarParticipantsListWithHttpInfo(String webinarId, Integer pageSize, String nextPageToken, String includeFields) throws ApiException {
        okhttp3.Call localVarCall = webinarParticipantsListValidateBeforeCall(webinarId, pageSize, nextPageToken, includeFields, null);
        Type localVarReturnType = new TypeToken<ReportsWebinarParticipantsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call webinarParticipantsListAsync(String webinarId, Integer pageSize, String nextPageToken, String includeFields, final ApiCallback<ReportsWebinarParticipantsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = webinarParticipantsListValidateBeforeCall(webinarId, pageSize, nextPageToken, includeFields, _callback);
        Type localVarReturnType = new TypeToken<ReportsWebinarParticipantsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class WebinarParticipantsListRequestBuilder {
        private final String webinarId;
        private Integer pageSize;
        private String nextPageToken;
        private String includeFields;

        private WebinarParticipantsListRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return WebinarParticipantsListRequestBuilder
         */
        public WebinarParticipantsListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return WebinarParticipantsListRequestBuilder
         */
        public WebinarParticipantsListRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Set includeFields
         * @param includeFields The additional query parameters to include.  * &#x60;registrant_id&#x60; - Include the registrant&#39;s ID in the API response. The registrant ID is the webinar participant&#39;s unique ID. (optional)
         * @return WebinarParticipantsListRequestBuilder
         */
        public WebinarParticipantsListRequestBuilder includeFields(String includeFields) {
            this.includeFields = includeFields;
            return this;
        }
        
        /**
         * Build call for webinarParticipantsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  * Meeting participants report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar \&quot;{webinarId}\&quot; not found or has expired &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return webinarParticipantsListCall(webinarId, pageSize, nextPageToken, includeFields, _callback);
        }


        /**
         * Execute webinarParticipantsList request
         * @return ReportsWebinarParticipantsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  * Meeting participants report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar \&quot;{webinarId}\&quot; not found or has expired &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ReportsWebinarParticipantsListResponse execute() throws ApiException {
            ApiResponse<ReportsWebinarParticipantsListResponse> localVarResp = webinarParticipantsListWithHttpInfo(webinarId, pageSize, nextPageToken, includeFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute webinarParticipantsList request with HTTP info returned
         * @return ApiResponse&lt;ReportsWebinarParticipantsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  * Meeting participants report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar \&quot;{webinarId}\&quot; not found or has expired &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsWebinarParticipantsListResponse> executeWithHttpInfo() throws ApiException {
            return webinarParticipantsListWithHttpInfo(webinarId, pageSize, nextPageToken, includeFields);
        }

        /**
         * Execute webinarParticipantsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  * Meeting participants report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar \&quot;{webinarId}\&quot; not found or has expired &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsWebinarParticipantsListResponse> _callback) throws ApiException {
            return webinarParticipantsListAsync(webinarId, pageSize, nextPageToken, includeFields, _callback);
        }
    }

    /**
     * Get webinar participant reports
     * Get a detailed report on each webinar attendee. You can get webinar participant reports for the last 6 months.    **Prerequisites:**  * A Pro or a higher plan with Webinar add-on enabled.  **Scopes:** &#x60;report:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param webinarId The webinar&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the webinar UUID before making an API request. (required)
     * @return WebinarParticipantsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  * Meeting participants report returned.     Only available for Paid or ZMP account: {accountId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a webinar a year ago.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar \&quot;{webinarId}\&quot; not found or has expired &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public WebinarParticipantsListRequestBuilder webinarParticipantsList(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new WebinarParticipantsListRequestBuilder(webinarId);
    }
}
