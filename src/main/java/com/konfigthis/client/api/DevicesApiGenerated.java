/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DevicesAssignDeviceZpaAssignmentRequest;
import com.konfigthis.client.model.DevicesChangeDeviceAssociationRequest;
import com.konfigthis.client.model.DevicesCreateNewDeviceRequest;
import com.konfigthis.client.model.DevicesGetDetailResponse;
import com.konfigthis.client.model.DevicesGetZpaVersionInfoResponse;
import com.konfigthis.client.model.DevicesListResponse;
import com.konfigthis.client.model.DevicesListZdmGroupInfoResponse;
import com.konfigthis.client.model.DevicesUpdateDeviceNameRequest;
import com.konfigthis.client.model.DevicesUpgradeZpaOsAppRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DevicesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DevicesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DevicesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getOpenapiAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setOpenapiAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignDeviceZpaAssignmentCall(DevicesAssignDeviceZpaAssignmentRequest devicesAssignDeviceZpaAssignmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devicesAssignDeviceZpaAssignmentRequest;

        // create path and map variables
        String localVarPath = "/devices/zpa/assignment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignDeviceZpaAssignmentValidateBeforeCall(DevicesAssignDeviceZpaAssignmentRequest devicesAssignDeviceZpaAssignmentRequest, final ApiCallback _callback) throws ApiException {
        return assignDeviceZpaAssignmentCall(devicesAssignDeviceZpaAssignmentRequest, _callback);

    }


    private ApiResponse<Void> assignDeviceZpaAssignmentWithHttpInfo(DevicesAssignDeviceZpaAssignmentRequest devicesAssignDeviceZpaAssignmentRequest) throws ApiException {
        okhttp3.Call localVarCall = assignDeviceZpaAssignmentValidateBeforeCall(devicesAssignDeviceZpaAssignmentRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call assignDeviceZpaAssignmentAsync(DevicesAssignDeviceZpaAssignmentRequest devicesAssignDeviceZpaAssignmentRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignDeviceZpaAssignmentValidateBeforeCall(devicesAssignDeviceZpaAssignmentRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AssignDeviceZpaAssignmentRequestBuilder {
        private final String macAddress;
        private final String vendor;
        private String extensionNumber;

        private AssignDeviceZpaAssignmentRequestBuilder(String macAddress, String vendor) {
            this.macAddress = macAddress;
            this.vendor = vendor;
        }

        /**
         * Set extensionNumber
         * @param extensionNumber The extension number. (optional)
         * @return AssignDeviceZpaAssignmentRequestBuilder
         */
        public AssignDeviceZpaAssignmentRequestBuilder extensionNumber(String extensionNumber) {
            this.extensionNumber = extensionNumber;
            return this;
        }
        
        /**
         * Build call for assignDeviceZpaAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**   Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  Device vendor does not support. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  Mac address is wrong. &lt;br&gt; **Error Code:** &#x60;30051039&#x60; &lt;br&gt;  Device not exists. &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  AUTO RECEPTIONIST user can not assign to device. &lt;br&gt; **Error Code:** &#x60;30055009&#x60; &lt;br&gt;  User not have phone plan. &lt;br&gt; **Error Code:** &#x60;30052024&#x60; &lt;br&gt;  Extension number not exists. &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  Missing required input. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DevicesAssignDeviceZpaAssignmentRequest devicesAssignDeviceZpaAssignmentRequest = buildBodyParams();
            return assignDeviceZpaAssignmentCall(devicesAssignDeviceZpaAssignmentRequest, _callback);
        }

        private DevicesAssignDeviceZpaAssignmentRequest buildBodyParams() {
            DevicesAssignDeviceZpaAssignmentRequest devicesAssignDeviceZpaAssignmentRequest = new DevicesAssignDeviceZpaAssignmentRequest();
            devicesAssignDeviceZpaAssignmentRequest.extensionNumber(this.extensionNumber);
            devicesAssignDeviceZpaAssignmentRequest.macAddress(this.macAddress);
            devicesAssignDeviceZpaAssignmentRequest.vendor(this.vendor);
            return devicesAssignDeviceZpaAssignmentRequest;
        }

        /**
         * Execute assignDeviceZpaAssignment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**   Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  Device vendor does not support. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  Mac address is wrong. &lt;br&gt; **Error Code:** &#x60;30051039&#x60; &lt;br&gt;  Device not exists. &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  AUTO RECEPTIONIST user can not assign to device. &lt;br&gt; **Error Code:** &#x60;30055009&#x60; &lt;br&gt;  User not have phone plan. &lt;br&gt; **Error Code:** &#x60;30052024&#x60; &lt;br&gt;  Extension number not exists. &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  Missing required input. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DevicesAssignDeviceZpaAssignmentRequest devicesAssignDeviceZpaAssignmentRequest = buildBodyParams();
            assignDeviceZpaAssignmentWithHttpInfo(devicesAssignDeviceZpaAssignmentRequest);
        }

        /**
         * Execute assignDeviceZpaAssignment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**   Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  Device vendor does not support. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  Mac address is wrong. &lt;br&gt; **Error Code:** &#x60;30051039&#x60; &lt;br&gt;  Device not exists. &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  AUTO RECEPTIONIST user can not assign to device. &lt;br&gt; **Error Code:** &#x60;30055009&#x60; &lt;br&gt;  User not have phone plan. &lt;br&gt; **Error Code:** &#x60;30052024&#x60; &lt;br&gt;  Extension number not exists. &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  Missing required input. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DevicesAssignDeviceZpaAssignmentRequest devicesAssignDeviceZpaAssignmentRequest = buildBodyParams();
            return assignDeviceZpaAssignmentWithHttpInfo(devicesAssignDeviceZpaAssignmentRequest);
        }

        /**
         * Execute assignDeviceZpaAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**   Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  Device vendor does not support. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  Mac address is wrong. &lt;br&gt; **Error Code:** &#x60;30051039&#x60; &lt;br&gt;  Device not exists. &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  AUTO RECEPTIONIST user can not assign to device. &lt;br&gt; **Error Code:** &#x60;30055009&#x60; &lt;br&gt;  User not have phone plan. &lt;br&gt; **Error Code:** &#x60;30052024&#x60; &lt;br&gt;  Extension number not exists. &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  Missing required input. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DevicesAssignDeviceZpaAssignmentRequest devicesAssignDeviceZpaAssignmentRequest = buildBodyParams();
            return assignDeviceZpaAssignmentAsync(devicesAssignDeviceZpaAssignmentRequest, _callback);
        }
    }

    /**
     * Assign a device to a user or commonarea
     * Assign a device to a user or common area, or move a device to another user or common area, or remove a device.  **Prerequisites:** * Device must be enrolled in Zoom Device Management (ZDM).  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @return AssignDeviceZpaAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**   Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  Device vendor does not support. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  Mac address is wrong. &lt;br&gt; **Error Code:** &#x60;30051039&#x60; &lt;br&gt;  Device not exists. &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  AUTO RECEPTIONIST user can not assign to device. &lt;br&gt; **Error Code:** &#x60;30055009&#x60; &lt;br&gt;  User not have phone plan. &lt;br&gt; **Error Code:** &#x60;30052024&#x60; &lt;br&gt;  Extension number not exists. &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  Missing required input. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public AssignDeviceZpaAssignmentRequestBuilder assignDeviceZpaAssignment(String macAddress, String vendor) throws IllegalArgumentException {
        if (macAddress == null) throw new IllegalArgumentException("\"macAddress\" is required but got null");
            

        if (vendor == null) throw new IllegalArgumentException("\"vendor\" is required but got null");
            

        return new AssignDeviceZpaAssignmentRequestBuilder(macAddress, vendor);
    }
    private okhttp3.Call changeDeviceAssociationCall(String deviceId, DevicesChangeDeviceAssociationRequest devicesChangeDeviceAssociationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devicesChangeDeviceAssociationRequest;

        // create path and map variables
        String localVarPath = "/devices/{deviceId}/assignment"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeDeviceAssociationValidateBeforeCall(String deviceId, DevicesChangeDeviceAssociationRequest devicesChangeDeviceAssociationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling changeDeviceAssociation(Async)");
        }

        return changeDeviceAssociationCall(deviceId, devicesChangeDeviceAssociationRequest, _callback);

    }


    private ApiResponse<Void> changeDeviceAssociationWithHttpInfo(String deviceId, DevicesChangeDeviceAssociationRequest devicesChangeDeviceAssociationRequest) throws ApiException {
        okhttp3.Call localVarCall = changeDeviceAssociationValidateBeforeCall(deviceId, devicesChangeDeviceAssociationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call changeDeviceAssociationAsync(String deviceId, DevicesChangeDeviceAssociationRequest devicesChangeDeviceAssociationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeDeviceAssociationValidateBeforeCall(deviceId, devicesChangeDeviceAssociationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ChangeDeviceAssociationRequestBuilder {
        private final String deviceId;
        private String roomId;
        private String appType;

        private ChangeDeviceAssociationRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Set roomId
         * @param roomId The Zoom Room ID which device is being associated to. The &#x60;room_id&#x60; is required when &#x60;assign&#x60; is selected for &#x60;action&#x60; field. (optional)
         * @return ChangeDeviceAssociationRequestBuilder
         */
        public ChangeDeviceAssociationRequestBuilder roomId(String roomId) {
            this.roomId = roomId;
            return this;
        }
        
        /**
         * Set appType
         * @param appType Specify one of the following values for this field:  &#x60;ZR&#x60;: Zoom Room Computer.     &#x60;ZRC&#x60;: Zoom Room Controller.     &#x60;ZRP&#x60;: Scheduling Display.     &#x60;ZRW&#x60;: Companion Whiteboard. (optional, default to ZR)
         * @return ChangeDeviceAssociationRequestBuilder
         */
        public ChangeDeviceAssociationRequestBuilder appType(String appType) {
            this.appType = appType;
            return this;
        }
        
        /**
         * Build call for changeDeviceAssociation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**     Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;8500&#x60; &lt;br&gt; Device not enrolled in Zoom Device Management.  **Error Code:** &#x60;8501&#x60; &lt;br&gt; Device does not support this app.  **Error Code:** &#x60;8502&#x60; &lt;br&gt; Room does not support this app.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1012&#x60; &lt;br&gt; Room does not exist: {roomId}.  **Error Code:** &#x60;8503&#x60; &lt;br&gt; Device does not exist: {deviceId}.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DevicesChangeDeviceAssociationRequest devicesChangeDeviceAssociationRequest = buildBodyParams();
            return changeDeviceAssociationCall(deviceId, devicesChangeDeviceAssociationRequest, _callback);
        }

        private DevicesChangeDeviceAssociationRequest buildBodyParams() {
            DevicesChangeDeviceAssociationRequest devicesChangeDeviceAssociationRequest = new DevicesChangeDeviceAssociationRequest();
            devicesChangeDeviceAssociationRequest.roomId(this.roomId);
            if (this.appType != null)
            devicesChangeDeviceAssociationRequest.appType(DevicesChangeDeviceAssociationRequest.AppTypeEnum.fromValue(this.appType));
            return devicesChangeDeviceAssociationRequest;
        }

        /**
         * Execute changeDeviceAssociation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**     Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;8500&#x60; &lt;br&gt; Device not enrolled in Zoom Device Management.  **Error Code:** &#x60;8501&#x60; &lt;br&gt; Device does not support this app.  **Error Code:** &#x60;8502&#x60; &lt;br&gt; Room does not support this app.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1012&#x60; &lt;br&gt; Room does not exist: {roomId}.  **Error Code:** &#x60;8503&#x60; &lt;br&gt; Device does not exist: {deviceId}.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DevicesChangeDeviceAssociationRequest devicesChangeDeviceAssociationRequest = buildBodyParams();
            changeDeviceAssociationWithHttpInfo(deviceId, devicesChangeDeviceAssociationRequest);
        }

        /**
         * Execute changeDeviceAssociation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**     Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;8500&#x60; &lt;br&gt; Device not enrolled in Zoom Device Management.  **Error Code:** &#x60;8501&#x60; &lt;br&gt; Device does not support this app.  **Error Code:** &#x60;8502&#x60; &lt;br&gt; Room does not support this app.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1012&#x60; &lt;br&gt; Room does not exist: {roomId}.  **Error Code:** &#x60;8503&#x60; &lt;br&gt; Device does not exist: {deviceId}.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DevicesChangeDeviceAssociationRequest devicesChangeDeviceAssociationRequest = buildBodyParams();
            return changeDeviceAssociationWithHttpInfo(deviceId, devicesChangeDeviceAssociationRequest);
        }

        /**
         * Execute changeDeviceAssociation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**     Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;8500&#x60; &lt;br&gt; Device not enrolled in Zoom Device Management.  **Error Code:** &#x60;8501&#x60; &lt;br&gt; Device does not support this app.  **Error Code:** &#x60;8502&#x60; &lt;br&gt; Room does not support this app.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1012&#x60; &lt;br&gt; Room does not exist: {roomId}.  **Error Code:** &#x60;8503&#x60; &lt;br&gt; Device does not exist: {deviceId}.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DevicesChangeDeviceAssociationRequest devicesChangeDeviceAssociationRequest = buildBodyParams();
            return changeDeviceAssociationAsync(deviceId, devicesChangeDeviceAssociationRequest, _callback);
        }
    }

    /**
     * Change device association
     * This Device API lets you change device association from one Zoom Room to another.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)     **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param deviceId Unique identifier of the device. (required)
     * @return ChangeDeviceAssociationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**     Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;8500&#x60; &lt;br&gt; Device not enrolled in Zoom Device Management.  **Error Code:** &#x60;8501&#x60; &lt;br&gt; Device does not support this app.  **Error Code:** &#x60;8502&#x60; &lt;br&gt; Room does not support this app.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1012&#x60; &lt;br&gt; Room does not exist: {roomId}.  **Error Code:** &#x60;8503&#x60; &lt;br&gt; Device does not exist: {deviceId}.   </td><td>  -  </td></tr>
     </table>
     */
    public ChangeDeviceAssociationRequestBuilder changeDeviceAssociation(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new ChangeDeviceAssociationRequestBuilder(deviceId);
    }
    private okhttp3.Call createNewDeviceCall(DevicesCreateNewDeviceRequest devicesCreateNewDeviceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devicesCreateNewDeviceRequest;

        // create path and map variables
        String localVarPath = "/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDeviceValidateBeforeCall(DevicesCreateNewDeviceRequest devicesCreateNewDeviceRequest, final ApiCallback _callback) throws ApiException {
        return createNewDeviceCall(devicesCreateNewDeviceRequest, _callback);

    }


    private ApiResponse<Void> createNewDeviceWithHttpInfo(DevicesCreateNewDeviceRequest devicesCreateNewDeviceRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewDeviceValidateBeforeCall(devicesCreateNewDeviceRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewDeviceAsync(DevicesCreateNewDeviceRequest devicesCreateNewDeviceRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDeviceValidateBeforeCall(devicesCreateNewDeviceRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewDeviceRequestBuilder {
        private final String deviceName;
        private final String macAddress;
        private final String serialNumber;
        private final String vendor;
        private final String model;
        private final Integer deviceType;
        private String roomId;
        private String userEmail;
        private String tag;
        private String zdmGroupId;
        private String extensionNumber;

        private CreateNewDeviceRequestBuilder(String deviceName, String macAddress, String serialNumber, String vendor, String model, Integer deviceType) {
            this.deviceName = deviceName;
            this.macAddress = macAddress;
            this.serialNumber = serialNumber;
            this.vendor = vendor;
            this.model = model;
            this.deviceType = deviceType;
        }

        /**
         * Set roomId
         * @param roomId The Zoom Room&#39;s ID. Only for Zoom Room devices. (optional)
         * @return CreateNewDeviceRequestBuilder
         */
        public CreateNewDeviceRequestBuilder roomId(String roomId) {
            this.roomId = roomId;
            return this;
        }
        
        /**
         * Set userEmail
         * @param userEmail User email for assigning the Zoom Phone device. Only for Zoom Phone devices. (optional)
         * @return CreateNewDeviceRequestBuilder
         */
        public CreateNewDeviceRequestBuilder userEmail(String userEmail) {
            this.userEmail = userEmail;
            return this;
        }
        
        /**
         * Set tag
         * @param tag The name of the tag. (optional)
         * @return CreateNewDeviceRequestBuilder
         */
        public CreateNewDeviceRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set zdmGroupId
         * @param zdmGroupId The ZDM group ID. (optional)
         * @return CreateNewDeviceRequestBuilder
         */
        public CreateNewDeviceRequestBuilder zdmGroupId(String zdmGroupId) {
            this.zdmGroupId = zdmGroupId;
            return this;
        }
        
        /**
         * Set extensionNumber
         * @param extensionNumber The extension number. (optional)
         * @return CreateNewDeviceRequestBuilder
         */
        public CreateNewDeviceRequestBuilder extensionNumber(String extensionNumber) {
            this.extensionNumber = extensionNumber;
            return this;
        }
        
        /**
         * Build call for createNewDevice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> **HTTP Status:** &#x60;202&#x60; **Accepted** Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055001&#x60; &lt;br&gt;  zoom room does not exist.  &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  required param can not be empty or null. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  device type does not support. &lt;br&gt; **Error Code:** &#x60;30055004&#x60; &lt;br&gt;  model or vendor not exist. &lt;br&gt; **Error Code:** &#x60;30055005&#x60; &lt;br&gt;  tag length can not be more than 64. &lt;br&gt; **Error Code:** &#x60;30055006&#x60; &lt;br&gt;  device has already exist. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  invalid mac address. &lt;br&gt; **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  no permission. &lt;br&gt; **Error Code:** &#x60;30055009&#x60; &lt;br&gt;  email does not have plan. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DevicesCreateNewDeviceRequest devicesCreateNewDeviceRequest = buildBodyParams();
            return createNewDeviceCall(devicesCreateNewDeviceRequest, _callback);
        }

        private DevicesCreateNewDeviceRequest buildBodyParams() {
            DevicesCreateNewDeviceRequest devicesCreateNewDeviceRequest = new DevicesCreateNewDeviceRequest();
            devicesCreateNewDeviceRequest.deviceName(this.deviceName);
            devicesCreateNewDeviceRequest.macAddress(this.macAddress);
            devicesCreateNewDeviceRequest.serialNumber(this.serialNumber);
            devicesCreateNewDeviceRequest.vendor(this.vendor);
            devicesCreateNewDeviceRequest.model(this.model);
            devicesCreateNewDeviceRequest.roomId(this.roomId);
            devicesCreateNewDeviceRequest.userEmail(this.userEmail);
            if (this.deviceType != null)
            devicesCreateNewDeviceRequest.deviceType(DevicesCreateNewDeviceRequest.DeviceTypeEnum.fromValue(this.deviceType));
            devicesCreateNewDeviceRequest.tag(this.tag);
            devicesCreateNewDeviceRequest.zdmGroupId(this.zdmGroupId);
            devicesCreateNewDeviceRequest.extensionNumber(this.extensionNumber);
            return devicesCreateNewDeviceRequest;
        }

        /**
         * Execute createNewDevice request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> **HTTP Status:** &#x60;202&#x60; **Accepted** Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055001&#x60; &lt;br&gt;  zoom room does not exist.  &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  required param can not be empty or null. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  device type does not support. &lt;br&gt; **Error Code:** &#x60;30055004&#x60; &lt;br&gt;  model or vendor not exist. &lt;br&gt; **Error Code:** &#x60;30055005&#x60; &lt;br&gt;  tag length can not be more than 64. &lt;br&gt; **Error Code:** &#x60;30055006&#x60; &lt;br&gt;  device has already exist. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  invalid mac address. &lt;br&gt; **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  no permission. &lt;br&gt; **Error Code:** &#x60;30055009&#x60; &lt;br&gt;  email does not have plan. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DevicesCreateNewDeviceRequest devicesCreateNewDeviceRequest = buildBodyParams();
            createNewDeviceWithHttpInfo(devicesCreateNewDeviceRequest);
        }

        /**
         * Execute createNewDevice request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> **HTTP Status:** &#x60;202&#x60; **Accepted** Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055001&#x60; &lt;br&gt;  zoom room does not exist.  &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  required param can not be empty or null. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  device type does not support. &lt;br&gt; **Error Code:** &#x60;30055004&#x60; &lt;br&gt;  model or vendor not exist. &lt;br&gt; **Error Code:** &#x60;30055005&#x60; &lt;br&gt;  tag length can not be more than 64. &lt;br&gt; **Error Code:** &#x60;30055006&#x60; &lt;br&gt;  device has already exist. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  invalid mac address. &lt;br&gt; **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  no permission. &lt;br&gt; **Error Code:** &#x60;30055009&#x60; &lt;br&gt;  email does not have plan. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DevicesCreateNewDeviceRequest devicesCreateNewDeviceRequest = buildBodyParams();
            return createNewDeviceWithHttpInfo(devicesCreateNewDeviceRequest);
        }

        /**
         * Execute createNewDevice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> **HTTP Status:** &#x60;202&#x60; **Accepted** Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055001&#x60; &lt;br&gt;  zoom room does not exist.  &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  required param can not be empty or null. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  device type does not support. &lt;br&gt; **Error Code:** &#x60;30055004&#x60; &lt;br&gt;  model or vendor not exist. &lt;br&gt; **Error Code:** &#x60;30055005&#x60; &lt;br&gt;  tag length can not be more than 64. &lt;br&gt; **Error Code:** &#x60;30055006&#x60; &lt;br&gt;  device has already exist. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  invalid mac address. &lt;br&gt; **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  no permission. &lt;br&gt; **Error Code:** &#x60;30055009&#x60; &lt;br&gt;  email does not have plan. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DevicesCreateNewDeviceRequest devicesCreateNewDeviceRequest = buildBodyParams();
            return createNewDeviceAsync(devicesCreateNewDeviceRequest, _callback);
        }
    }

    /**
     * Add a new device
     * Add a new device to Zoom account.   **Scope:** &#x60;device:write:admin&#x60;       **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** &#x60;Medium&#x60;  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @return CreateNewDeviceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> **HTTP Status:** &#x60;202&#x60; **Accepted** Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055001&#x60; &lt;br&gt;  zoom room does not exist.  &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  required param can not be empty or null. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  device type does not support. &lt;br&gt; **Error Code:** &#x60;30055004&#x60; &lt;br&gt;  model or vendor not exist. &lt;br&gt; **Error Code:** &#x60;30055005&#x60; &lt;br&gt;  tag length can not be more than 64. &lt;br&gt; **Error Code:** &#x60;30055006&#x60; &lt;br&gt;  device has already exist. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  invalid mac address. &lt;br&gt; **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  no permission. &lt;br&gt; **Error Code:** &#x60;30055009&#x60; &lt;br&gt;  email does not have plan. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDeviceRequestBuilder createNewDevice(String deviceName, String macAddress, String serialNumber, String vendor, String model, Integer deviceType) throws IllegalArgumentException {
        if (deviceName == null) throw new IllegalArgumentException("\"deviceName\" is required but got null");
            

        if (macAddress == null) throw new IllegalArgumentException("\"macAddress\" is required but got null");
            

        if (serialNumber == null) throw new IllegalArgumentException("\"serialNumber\" is required but got null");
            

        if (vendor == null) throw new IllegalArgumentException("\"vendor\" is required but got null");
            

        if (model == null) throw new IllegalArgumentException("\"model\" is required but got null");
            

        if (deviceType == null) throw new IllegalArgumentException("\"deviceType\" is required but got null");
        return new CreateNewDeviceRequestBuilder(deviceName, macAddress, serialNumber, vendor, model, deviceType);
    }
    private okhttp3.Call getDetailCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{deviceId}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getDetail(Async)");
        }

        return getDetailCall(deviceId, _callback);

    }


    private ApiResponse<DevicesGetDetailResponse> getDetailWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getDetailValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<DevicesGetDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailAsync(String deviceId, final ApiCallback<DevicesGetDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<DevicesGetDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailRequestBuilder {
        private final String deviceId;

        private GetDetailRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**    Device detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  No permission. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  No found unified deviceId. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailCall(deviceId, _callback);
        }


        /**
         * Execute getDetail request
         * @return DevicesGetDetailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**    Device detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  No permission. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  No found unified deviceId. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public DevicesGetDetailResponse execute() throws ApiException {
            ApiResponse<DevicesGetDetailResponse> localVarResp = getDetailWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetail request with HTTP info returned
         * @return ApiResponse&lt;DevicesGetDetailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**    Device detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  No permission. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  No found unified deviceId. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DevicesGetDetailResponse> executeWithHttpInfo() throws ApiException {
            return getDetailWithHttpInfo(deviceId);
        }

        /**
         * Execute getDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**    Device detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  No permission. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  No found unified deviceId. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DevicesGetDetailResponse> _callback) throws ApiException {
            return getDetailAsync(deviceId, _callback);
        }
    }

    /**
     * Get device detail
     * Retrieve a device&#39;s details.  **Scopes:** &#x60;device:read:admin&#x60;,&#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     * @param deviceId The device&#39;s unique identifier. (required)
     * @return GetDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**    Device detail returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  No permission. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  No found unified deviceId. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailRequestBuilder getDetail(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetDetailRequestBuilder(deviceId);
    }
    private okhttp3.Call getZpaVersionInfoCall(String zdmGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/zpa/zdm_groups/{zdmGroupId}/versions"
            .replace("{" + "zdmGroupId" + "}", localVarApiClient.escapeString(zdmGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZpaVersionInfoValidateBeforeCall(String zdmGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zdmGroupId' is set
        if (zdmGroupId == null) {
            throw new ApiException("Missing the required parameter 'zdmGroupId' when calling getZpaVersionInfo(Async)");
        }

        return getZpaVersionInfoCall(zdmGroupId, _callback);

    }


    private ApiResponse<DevicesGetZpaVersionInfoResponse> getZpaVersionInfoWithHttpInfo(String zdmGroupId) throws ApiException {
        okhttp3.Call localVarCall = getZpaVersionInfoValidateBeforeCall(zdmGroupId, null);
        Type localVarReturnType = new TypeToken<DevicesGetZpaVersionInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getZpaVersionInfoAsync(String zdmGroupId, final ApiCallback<DevicesGetZpaVersionInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZpaVersionInfoValidateBeforeCall(zdmGroupId, _callback);
        Type localVarReturnType = new TypeToken<DevicesGetZpaVersionInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetZpaVersionInfoRequestBuilder {
        private final String zdmGroupId;

        private GetZpaVersionInfoRequestBuilder(String zdmGroupId) {
            this.zdmGroupId = zdmGroupId;
        }

        /**
         * Build call for getZpaVersionInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  Version detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30051037&#x60; &lt;br&gt;  * AccountId is empty. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;30052027&#x60; &lt;br&gt;  * ZdmGroup not found. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getZpaVersionInfoCall(zdmGroupId, _callback);
        }


        /**
         * Execute getZpaVersionInfo request
         * @return DevicesGetZpaVersionInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  Version detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30051037&#x60; &lt;br&gt;  * AccountId is empty. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;30052027&#x60; &lt;br&gt;  * ZdmGroup not found. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public DevicesGetZpaVersionInfoResponse execute() throws ApiException {
            ApiResponse<DevicesGetZpaVersionInfoResponse> localVarResp = getZpaVersionInfoWithHttpInfo(zdmGroupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getZpaVersionInfo request with HTTP info returned
         * @return ApiResponse&lt;DevicesGetZpaVersionInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  Version detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30051037&#x60; &lt;br&gt;  * AccountId is empty. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;30052027&#x60; &lt;br&gt;  * ZdmGroup not found. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DevicesGetZpaVersionInfoResponse> executeWithHttpInfo() throws ApiException {
            return getZpaVersionInfoWithHttpInfo(zdmGroupId);
        }

        /**
         * Execute getZpaVersionInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  Version detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30051037&#x60; &lt;br&gt;  * AccountId is empty. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;30052027&#x60; &lt;br&gt;  * ZdmGroup not found. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DevicesGetZpaVersionInfoResponse> _callback) throws ApiException {
            return getZpaVersionInfoAsync(zdmGroupId, _callback);
        }
    }

    /**
     * Get ZPA version info
     * Get ZPA firmware and app version information that can be upgraded for devices.  **Scopes:** &#x60;device:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param zdmGroupId The Zoom Device Management (ZDM) group ID. (required)
     * @return GetZpaVersionInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  Version detail returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30051037&#x60; &lt;br&gt;  * AccountId is empty. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;30052027&#x60; &lt;br&gt;  * ZdmGroup not found. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetZpaVersionInfoRequestBuilder getZpaVersionInfo(String zdmGroupId) throws IllegalArgumentException {
        if (zdmGroupId == null) throw new IllegalArgumentException("\"zdmGroupId\" is required but got null");
            

        return new GetZpaVersionInfoRequestBuilder(zdmGroupId);
    }
    private okhttp3.Call listCall(String searchText, String platformOs, Boolean isEnrolledInZdm, Integer deviceType, String deviceVendor, String deviceModel, Integer deviceStatus, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_text", searchText));
        }

        if (platformOs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_os", platformOs));
        }

        if (isEnrolledInZdm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_enrolled_in_zdm", isEnrolledInZdm));
        }

        if (deviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type", deviceType));
        }

        if (deviceVendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_vendor", deviceVendor));
        }

        if (deviceModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_model", deviceModel));
        }

        if (deviceStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_status", deviceStatus));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String searchText, String platformOs, Boolean isEnrolledInZdm, Integer deviceType, String deviceVendor, String deviceModel, Integer deviceStatus, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        return listCall(searchText, platformOs, isEnrolledInZdm, deviceType, deviceVendor, deviceModel, deviceStatus, pageSize, nextPageToken, _callback);

    }


    private ApiResponse<DevicesListResponse> listWithHttpInfo(String searchText, String platformOs, Boolean isEnrolledInZdm, Integer deviceType, String deviceVendor, String deviceModel, Integer deviceStatus, Integer pageSize, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(searchText, platformOs, isEnrolledInZdm, deviceType, deviceVendor, deviceModel, deviceStatus, pageSize, nextPageToken, null);
        Type localVarReturnType = new TypeToken<DevicesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String searchText, String platformOs, Boolean isEnrolledInZdm, Integer deviceType, String deviceVendor, String deviceModel, Integer deviceStatus, Integer pageSize, String nextPageToken, final ApiCallback<DevicesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(searchText, platformOs, isEnrolledInZdm, deviceType, deviceVendor, deviceModel, deviceStatus, pageSize, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<DevicesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String searchText;
        private String platformOs;
        private Boolean isEnrolledInZdm;
        private Integer deviceType;
        private String deviceVendor;
        private String deviceModel;
        private Integer deviceStatus;
        private Integer pageSize;
        private String nextPageToken;

        private ListRequestBuilder() {
        }

        /**
         * Set searchText
         * @param searchText Filter devices by name or serial number. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder searchText(String searchText) {
            this.searchText = searchText;
            return this;
        }
        
        /**
         * Set platformOs
         * @param platformOs Filter devices by platform operating system. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder platformOs(String platformOs) {
            this.platformOs = platformOs;
            return this;
        }
        
        /**
         * Set isEnrolledInZdm
         * @param isEnrolledInZdm Filter devices by enrollment of ZDM (Zoom Device Management). (optional, default to true)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder isEnrolledInZdm(Boolean isEnrolledInZdm) {
            this.isEnrolledInZdm = isEnrolledInZdm;
            return this;
        }
        
        /**
         * Set deviceType
         * @param deviceType Filter devices by device type.     Device Type:    &#x60;-1&#x60; - All Zoom Room device(0,1,2,3,4,6).    &#x60;0&#x60; - Zoom Rooms Computer.    &#x60;1&#x60; - Zoom Rooms Controller.    &#x60;2&#x60; - Zoom Rooms Scheduling Display.    &#x60;3&#x60; - Zoom Rooms Control System.    &#x60;4&#x60; -  Zoom Rooms Whiteboard.    &#x60;5&#x60; - Zoom Phone Appliance.    &#x60;6&#x60; - Zoom Rooms Computer (with Controller). (optional, default to -1)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder deviceType(Integer deviceType) {
            this.deviceType = deviceType;
            return this;
        }
        
        /**
         * Set deviceVendor
         * @param deviceVendor Filter devices by vendor. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder deviceVendor(String deviceVendor) {
            this.deviceVendor = deviceVendor;
            return this;
        }
        
        /**
         * Set deviceModel
         * @param deviceModel Filter devices by model. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder deviceModel(String deviceModel) {
            this.deviceModel = deviceModel;
            return this;
        }
        
        /**
         * Set deviceStatus
         * @param deviceStatus Filter devices by status.      Device Status:    &#x60;0&#x60; - offline.    &#x60;1&#x60; - online.    &#x60;-1&#x60; - unlink (optional, default to -1)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder deviceStatus(Integer deviceStatus) {
            this.deviceStatus = deviceStatus;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Device detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;30055008&#x60; &lt;br&gt; no permission.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(searchText, platformOs, isEnrolledInZdm, deviceType, deviceVendor, deviceModel, deviceStatus, pageSize, nextPageToken, _callback);
        }


        /**
         * Execute list request
         * @return DevicesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Device detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;30055008&#x60; &lt;br&gt; no permission.   </td><td>  -  </td></tr>
         </table>
         */
        public DevicesListResponse execute() throws ApiException {
            ApiResponse<DevicesListResponse> localVarResp = listWithHttpInfo(searchText, platformOs, isEnrolledInZdm, deviceType, deviceVendor, deviceModel, deviceStatus, pageSize, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;DevicesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Device detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;30055008&#x60; &lt;br&gt; no permission.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DevicesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(searchText, platformOs, isEnrolledInZdm, deviceType, deviceVendor, deviceModel, deviceStatus, pageSize, nextPageToken);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Device detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;30055008&#x60; &lt;br&gt; no permission.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DevicesListResponse> _callback) throws ApiException {
            return listAsync(searchText, platformOs, isEnrolledInZdm, deviceType, deviceVendor, deviceModel, deviceStatus, pageSize, nextPageToken, _callback);
        }
    }

    /**
     * List devices
     * This API lets you list devices.     **Scopes:** &#x60;device:read:admin&#x60;,&#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Device detail returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;30055008&#x60; &lt;br&gt; no permission.   </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listZdmGroupInfoCall(Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listZdmGroupInfoValidateBeforeCall(Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        return listZdmGroupInfoCall(pageSize, nextPageToken, _callback);

    }


    private ApiResponse<DevicesListZdmGroupInfoResponse> listZdmGroupInfoWithHttpInfo(Integer pageSize, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = listZdmGroupInfoValidateBeforeCall(pageSize, nextPageToken, null);
        Type localVarReturnType = new TypeToken<DevicesListZdmGroupInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listZdmGroupInfoAsync(Integer pageSize, String nextPageToken, final ApiCallback<DevicesListZdmGroupInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listZdmGroupInfoValidateBeforeCall(pageSize, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<DevicesListZdmGroupInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListZdmGroupInfoRequestBuilder {
        private Integer pageSize;
        private String nextPageToken;

        private ListZdmGroupInfoRequestBuilder() {
        }

        /**
         * Set pageSize
         * @param pageSize The total number of records returned from a single API call. Default - 30. Max -100. (optional)
         * @return ListZdmGroupInfoRequestBuilder
         */
        public ListZdmGroupInfoRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period token is 15 minutes. (optional)
         * @return ListZdmGroupInfoRequestBuilder
         */
        public ListZdmGroupInfoRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for listZdmGroupInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  Version detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30051037&#x60; &lt;br&gt;  Invalid parameters. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> **HTTP Status Code:** &#x60;403&#x60; &lt;br&gt;  Forbidden     **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  No permission. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listZdmGroupInfoCall(pageSize, nextPageToken, _callback);
        }


        /**
         * Execute listZdmGroupInfo request
         * @return DevicesListZdmGroupInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  Version detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30051037&#x60; &lt;br&gt;  Invalid parameters. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> **HTTP Status Code:** &#x60;403&#x60; &lt;br&gt;  Forbidden     **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  No permission. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public DevicesListZdmGroupInfoResponse execute() throws ApiException {
            ApiResponse<DevicesListZdmGroupInfoResponse> localVarResp = listZdmGroupInfoWithHttpInfo(pageSize, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listZdmGroupInfo request with HTTP info returned
         * @return ApiResponse&lt;DevicesListZdmGroupInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  Version detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30051037&#x60; &lt;br&gt;  Invalid parameters. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> **HTTP Status Code:** &#x60;403&#x60; &lt;br&gt;  Forbidden     **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  No permission. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DevicesListZdmGroupInfoResponse> executeWithHttpInfo() throws ApiException {
            return listZdmGroupInfoWithHttpInfo(pageSize, nextPageToken);
        }

        /**
         * Execute listZdmGroupInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  Version detail returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30051037&#x60; &lt;br&gt;  Invalid parameters. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> **HTTP Status Code:** &#x60;403&#x60; &lt;br&gt;  Forbidden     **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  No permission. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DevicesListZdmGroupInfoResponse> _callback) throws ApiException {
            return listZdmGroupInfoAsync(pageSize, nextPageToken, _callback);
        }
    }

    /**
     * Get zdm group info
     * Get Zoom Device Manager (ZDM) group information for an account.  **Scopes:** &#x60;device:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @return ListZdmGroupInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  Version detail returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30051037&#x60; &lt;br&gt;  Invalid parameters. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> **HTTP Status Code:** &#x60;403&#x60; &lt;br&gt;  Forbidden     **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  No permission. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListZdmGroupInfoRequestBuilder listZdmGroupInfo() throws IllegalArgumentException {
        return new ListZdmGroupInfoRequestBuilder();
    }
    private okhttp3.Call removeDeviceZMDCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{deviceId}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDeviceZMDValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling removeDeviceZMD(Async)");
        }

        return removeDeviceZMDCall(deviceId, _callback);

    }


    private ApiResponse<Void> removeDeviceZMDWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = removeDeviceZMDValidateBeforeCall(deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeDeviceZMDAsync(String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDeviceZMDValidateBeforeCall(deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveDeviceZMDRequestBuilder {
        private final String deviceId;

        private RemoveDeviceZMDRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for removeDeviceZMD
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content** Device deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  no permission. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  no found unified deviceId. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeDeviceZMDCall(deviceId, _callback);
        }


        /**
         * Execute removeDeviceZMD request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content** Device deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  no permission. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  no found unified deviceId. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeDeviceZMDWithHttpInfo(deviceId);
        }

        /**
         * Execute removeDeviceZMD request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content** Device deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  no permission. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  no found unified deviceId. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeDeviceZMDWithHttpInfo(deviceId);
        }

        /**
         * Execute removeDeviceZMD request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content** Device deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  no permission. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  no found unified deviceId. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeDeviceZMDAsync(deviceId, _callback);
        }
    }

    /**
     * Delete device
     * Delete a device from a Zoom account.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     * @param deviceId Unique identifier of the device. (required)
     * @return RemoveDeviceZMDRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content** Device deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055008&#x60; &lt;br&gt;  no permission. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  no found unified deviceId. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveDeviceZMDRequestBuilder removeDeviceZMD(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new RemoveDeviceZMDRequestBuilder(deviceId);
    }
    private okhttp3.Call removeZpaDeviceByVendorAndMacAddressCall(String vendor, String macAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/zpa/vendors/{vendor}/mac_addresses/{macAddress}"
            .replace("{" + "vendor" + "}", localVarApiClient.escapeString(vendor.toString()))
            .replace("{" + "macAddress" + "}", localVarApiClient.escapeString(macAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeZpaDeviceByVendorAndMacAddressValidateBeforeCall(String vendor, String macAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendor' is set
        if (vendor == null) {
            throw new ApiException("Missing the required parameter 'vendor' when calling removeZpaDeviceByVendorAndMacAddress(Async)");
        }

        // verify the required parameter 'macAddress' is set
        if (macAddress == null) {
            throw new ApiException("Missing the required parameter 'macAddress' when calling removeZpaDeviceByVendorAndMacAddress(Async)");
        }

        return removeZpaDeviceByVendorAndMacAddressCall(vendor, macAddress, _callback);

    }


    private ApiResponse<Void> removeZpaDeviceByVendorAndMacAddressWithHttpInfo(String vendor, String macAddress) throws ApiException {
        okhttp3.Call localVarCall = removeZpaDeviceByVendorAndMacAddressValidateBeforeCall(vendor, macAddress, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeZpaDeviceByVendorAndMacAddressAsync(String vendor, String macAddress, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeZpaDeviceByVendorAndMacAddressValidateBeforeCall(vendor, macAddress, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveZpaDeviceByVendorAndMacAddressRequestBuilder {
        private final String vendor;
        private final String macAddress;

        private RemoveZpaDeviceByVendorAndMacAddressRequestBuilder(String vendor, String macAddress) {
            this.vendor = vendor;
            this.macAddress = macAddress;
        }

        /**
         * Build call for removeZpaDeviceByVendorAndMacAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content** Device deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30052026&#x60; &lt;br&gt;  Device is not ZPA. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  Device vendor does not support. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  Mac address is wrong. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;30051039&#x60; &lt;br&gt;  Zdm device not found. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeZpaDeviceByVendorAndMacAddressCall(vendor, macAddress, _callback);
        }


        /**
         * Execute removeZpaDeviceByVendorAndMacAddress request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content** Device deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30052026&#x60; &lt;br&gt;  Device is not ZPA. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  Device vendor does not support. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  Mac address is wrong. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;30051039&#x60; &lt;br&gt;  Zdm device not found. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeZpaDeviceByVendorAndMacAddressWithHttpInfo(vendor, macAddress);
        }

        /**
         * Execute removeZpaDeviceByVendorAndMacAddress request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content** Device deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30052026&#x60; &lt;br&gt;  Device is not ZPA. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  Device vendor does not support. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  Mac address is wrong. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;30051039&#x60; &lt;br&gt;  Zdm device not found. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeZpaDeviceByVendorAndMacAddressWithHttpInfo(vendor, macAddress);
        }

        /**
         * Execute removeZpaDeviceByVendorAndMacAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content** Device deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30052026&#x60; &lt;br&gt;  Device is not ZPA. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  Device vendor does not support. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  Mac address is wrong. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;30051039&#x60; &lt;br&gt;  Zdm device not found. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeZpaDeviceByVendorAndMacAddressAsync(vendor, macAddress, _callback);
        }
    }

    /**
     * Delete ZPA device by vendor and mac address
     * Remove a ZPA device from the device manager, by vendor and mac address.  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param vendor The device&#39;s manufacturer. (required)
     * @param macAddress The device&#39;s mac address. (required)
     * @return RemoveZpaDeviceByVendorAndMacAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content** Device deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30052026&#x60; &lt;br&gt;  Device is not ZPA. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  Device vendor does not support. &lt;br&gt; **Error Code:** &#x60;30055007&#x60; &lt;br&gt;  Mac address is wrong. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;30051039&#x60; &lt;br&gt;  Zdm device not found. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveZpaDeviceByVendorAndMacAddressRequestBuilder removeZpaDeviceByVendorAndMacAddress(String vendor, String macAddress) throws IllegalArgumentException {
        if (vendor == null) throw new IllegalArgumentException("\"vendor\" is required but got null");
            

        if (macAddress == null) throw new IllegalArgumentException("\"macAddress\" is required but got null");
            

        return new RemoveZpaDeviceByVendorAndMacAddressRequestBuilder(vendor, macAddress);
    }
    private okhttp3.Call updateDeviceNameCall(String deviceId, DevicesUpdateDeviceNameRequest devicesUpdateDeviceNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devicesUpdateDeviceNameRequest;

        // create path and map variables
        String localVarPath = "/devices/{deviceId}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceNameValidateBeforeCall(String deviceId, DevicesUpdateDeviceNameRequest devicesUpdateDeviceNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling updateDeviceName(Async)");
        }

        return updateDeviceNameCall(deviceId, devicesUpdateDeviceNameRequest, _callback);

    }


    private ApiResponse<Void> updateDeviceNameWithHttpInfo(String deviceId, DevicesUpdateDeviceNameRequest devicesUpdateDeviceNameRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceNameValidateBeforeCall(deviceId, devicesUpdateDeviceNameRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDeviceNameAsync(String deviceId, DevicesUpdateDeviceNameRequest devicesUpdateDeviceNameRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceNameValidateBeforeCall(deviceId, devicesUpdateDeviceNameRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDeviceNameRequestBuilder {
        private final String deviceName;
        private final String deviceId;
        private String tag;
        private String roomId;
        private Integer deviceType;

        private UpdateDeviceNameRequestBuilder(String deviceName, String deviceId) {
            this.deviceName = deviceName;
            this.deviceId = deviceId;
        }

        /**
         * Set tag
         * @param tag The name of the tag. (optional)
         * @return UpdateDeviceNameRequestBuilder
         */
        public UpdateDeviceNameRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set roomId
         * @param roomId id of the Zoom Room. (optional)
         * @return UpdateDeviceNameRequestBuilder
         */
        public UpdateDeviceNameRequestBuilder roomId(String roomId) {
            this.roomId = roomId;
            return this;
        }
        
        /**
         * Set deviceType
         * @param deviceType Device Type:    &#x60;0&#x60; - Zoom Rooms Computer.    &#x60;1&#x60; - Zoom Rooms Controller.    &#x60;2&#x60; - Zoom Rooms Scheduling Display. (optional)
         * @return UpdateDeviceNameRequestBuilder
         */
        public UpdateDeviceNameRequestBuilder deviceType(Integer deviceType) {
            this.deviceType = deviceType;
            return this;
        }
        
        /**
         * Build call for updateDeviceName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**    Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055001&#x60; &lt;br&gt;  zoom room does not exist. . &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  required param can not be empty or null. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  device type does not support. &lt;br&gt; **Error Code:** &#x60;30055011&#x60; &lt;br&gt;  device is not enrolled. &lt;br&gt; **Error Code:** &#x60;30055013&#x60; &lt;br&gt;  device not support this app. &lt;br&gt; **Error Code:** &#x60;30055014&#x60; &lt;br&gt;  room not support this app. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  Device does not exist: {deviceId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DevicesUpdateDeviceNameRequest devicesUpdateDeviceNameRequest = buildBodyParams();
            return updateDeviceNameCall(deviceId, devicesUpdateDeviceNameRequest, _callback);
        }

        private DevicesUpdateDeviceNameRequest buildBodyParams() {
            DevicesUpdateDeviceNameRequest devicesUpdateDeviceNameRequest = new DevicesUpdateDeviceNameRequest();
            devicesUpdateDeviceNameRequest.deviceName(this.deviceName);
            devicesUpdateDeviceNameRequest.tag(this.tag);
            devicesUpdateDeviceNameRequest.roomId(this.roomId);
            if (this.deviceType != null)
            devicesUpdateDeviceNameRequest.deviceType(DevicesUpdateDeviceNameRequest.DeviceTypeEnum.fromValue(this.deviceType));
            return devicesUpdateDeviceNameRequest;
        }

        /**
         * Execute updateDeviceName request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**    Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055001&#x60; &lt;br&gt;  zoom room does not exist. . &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  required param can not be empty or null. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  device type does not support. &lt;br&gt; **Error Code:** &#x60;30055011&#x60; &lt;br&gt;  device is not enrolled. &lt;br&gt; **Error Code:** &#x60;30055013&#x60; &lt;br&gt;  device not support this app. &lt;br&gt; **Error Code:** &#x60;30055014&#x60; &lt;br&gt;  room not support this app. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  Device does not exist: {deviceId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DevicesUpdateDeviceNameRequest devicesUpdateDeviceNameRequest = buildBodyParams();
            updateDeviceNameWithHttpInfo(deviceId, devicesUpdateDeviceNameRequest);
        }

        /**
         * Execute updateDeviceName request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**    Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055001&#x60; &lt;br&gt;  zoom room does not exist. . &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  required param can not be empty or null. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  device type does not support. &lt;br&gt; **Error Code:** &#x60;30055011&#x60; &lt;br&gt;  device is not enrolled. &lt;br&gt; **Error Code:** &#x60;30055013&#x60; &lt;br&gt;  device not support this app. &lt;br&gt; **Error Code:** &#x60;30055014&#x60; &lt;br&gt;  room not support this app. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  Device does not exist: {deviceId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DevicesUpdateDeviceNameRequest devicesUpdateDeviceNameRequest = buildBodyParams();
            return updateDeviceNameWithHttpInfo(deviceId, devicesUpdateDeviceNameRequest);
        }

        /**
         * Execute updateDeviceName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**    Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055001&#x60; &lt;br&gt;  zoom room does not exist. . &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  required param can not be empty or null. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  device type does not support. &lt;br&gt; **Error Code:** &#x60;30055011&#x60; &lt;br&gt;  device is not enrolled. &lt;br&gt; **Error Code:** &#x60;30055013&#x60; &lt;br&gt;  device not support this app. &lt;br&gt; **Error Code:** &#x60;30055014&#x60; &lt;br&gt;  room not support this app. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  Device does not exist: {deviceId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DevicesUpdateDeviceNameRequest devicesUpdateDeviceNameRequest = buildBodyParams();
            return updateDeviceNameAsync(deviceId, devicesUpdateDeviceNameRequest, _callback);
        }
    }

    /**
     * Change device 
     * Change device name.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param deviceId Unique identifier of the device. (required)
     * @return UpdateDeviceNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**    Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;30055001&#x60; &lt;br&gt;  zoom room does not exist. . &lt;br&gt; **Error Code:** &#x60;30055002&#x60; &lt;br&gt;  required param can not be empty or null. &lt;br&gt; **Error Code:** &#x60;30055003&#x60; &lt;br&gt;  device type does not support. &lt;br&gt; **Error Code:** &#x60;30055011&#x60; &lt;br&gt;  device is not enrolled. &lt;br&gt; **Error Code:** &#x60;30055013&#x60; &lt;br&gt;  device not support this app. &lt;br&gt; **Error Code:** &#x60;30055014&#x60; &lt;br&gt;  room not support this app. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;30055012&#x60; &lt;br&gt;  Device does not exist: {deviceId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDeviceNameRequestBuilder updateDeviceName(String deviceName, String deviceId) throws IllegalArgumentException {
        if (deviceName == null) throw new IllegalArgumentException("\"deviceName\" is required but got null");
            

        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new UpdateDeviceNameRequestBuilder(deviceName, deviceId);
    }
    private okhttp3.Call upgradeZpaOsAppCall(DevicesUpgradeZpaOsAppRequest devicesUpgradeZpaOsAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devicesUpgradeZpaOsAppRequest;

        // create path and map variables
        String localVarPath = "/devices/zpa/upgrade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upgradeZpaOsAppValidateBeforeCall(DevicesUpgradeZpaOsAppRequest devicesUpgradeZpaOsAppRequest, final ApiCallback _callback) throws ApiException {
        return upgradeZpaOsAppCall(devicesUpgradeZpaOsAppRequest, _callback);

    }


    private ApiResponse<Void> upgradeZpaOsAppWithHttpInfo(DevicesUpgradeZpaOsAppRequest devicesUpgradeZpaOsAppRequest) throws ApiException {
        okhttp3.Call localVarCall = upgradeZpaOsAppValidateBeforeCall(devicesUpgradeZpaOsAppRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call upgradeZpaOsAppAsync(DevicesUpgradeZpaOsAppRequest devicesUpgradeZpaOsAppRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = upgradeZpaOsAppValidateBeforeCall(devicesUpgradeZpaOsAppRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpgradeZpaOsAppRequestBuilder {
        private final String zdmGroupId;
        private final Object data;

        private UpgradeZpaOsAppRequestBuilder(String zdmGroupId, Object data) {
            this.zdmGroupId = zdmGroupId;
            this.data = data;
        }

        /**
         * Build call for upgradeZpaOsApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The upgrade request has been accepted and is currently being processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30052029&#x60; &lt;br&gt;  Missing required input: firmware_versions. &lt;br&gt; **Error Code:** &#x60;30055020&#x60; &lt;br&gt;  Upgrade type dose not exist. &lt;br&gt; **Error Code:** &#x60;30055018&#x60; &lt;br&gt;  Zdm group id dose not exist. &lt;br&gt; **Error Code:** &#x60;30052030&#x60; &lt;br&gt;  Missing required input: app_version. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DevicesUpgradeZpaOsAppRequest devicesUpgradeZpaOsAppRequest = buildBodyParams();
            return upgradeZpaOsAppCall(devicesUpgradeZpaOsAppRequest, _callback);
        }

        private DevicesUpgradeZpaOsAppRequest buildBodyParams() {
            DevicesUpgradeZpaOsAppRequest devicesUpgradeZpaOsAppRequest = new DevicesUpgradeZpaOsAppRequest();
            devicesUpgradeZpaOsAppRequest.zdmGroupId(this.zdmGroupId);
            devicesUpgradeZpaOsAppRequest.data(this.data);
            return devicesUpgradeZpaOsAppRequest;
        }

        /**
         * Execute upgradeZpaOsApp request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The upgrade request has been accepted and is currently being processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30052029&#x60; &lt;br&gt;  Missing required input: firmware_versions. &lt;br&gt; **Error Code:** &#x60;30055020&#x60; &lt;br&gt;  Upgrade type dose not exist. &lt;br&gt; **Error Code:** &#x60;30055018&#x60; &lt;br&gt;  Zdm group id dose not exist. &lt;br&gt; **Error Code:** &#x60;30052030&#x60; &lt;br&gt;  Missing required input: app_version. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DevicesUpgradeZpaOsAppRequest devicesUpgradeZpaOsAppRequest = buildBodyParams();
            upgradeZpaOsAppWithHttpInfo(devicesUpgradeZpaOsAppRequest);
        }

        /**
         * Execute upgradeZpaOsApp request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The upgrade request has been accepted and is currently being processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30052029&#x60; &lt;br&gt;  Missing required input: firmware_versions. &lt;br&gt; **Error Code:** &#x60;30055020&#x60; &lt;br&gt;  Upgrade type dose not exist. &lt;br&gt; **Error Code:** &#x60;30055018&#x60; &lt;br&gt;  Zdm group id dose not exist. &lt;br&gt; **Error Code:** &#x60;30052030&#x60; &lt;br&gt;  Missing required input: app_version. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DevicesUpgradeZpaOsAppRequest devicesUpgradeZpaOsAppRequest = buildBodyParams();
            return upgradeZpaOsAppWithHttpInfo(devicesUpgradeZpaOsAppRequest);
        }

        /**
         * Execute upgradeZpaOsApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The upgrade request has been accepted and is currently being processed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30052029&#x60; &lt;br&gt;  Missing required input: firmware_versions. &lt;br&gt; **Error Code:** &#x60;30055020&#x60; &lt;br&gt;  Upgrade type dose not exist. &lt;br&gt; **Error Code:** &#x60;30055018&#x60; &lt;br&gt;  Zdm group id dose not exist. &lt;br&gt; **Error Code:** &#x60;30052030&#x60; &lt;br&gt;  Missing required input: app_version. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DevicesUpgradeZpaOsAppRequest devicesUpgradeZpaOsAppRequest = buildBodyParams();
            return upgradeZpaOsAppAsync(devicesUpgradeZpaOsAppRequest, _callback);
        }
    }

    /**
     * upgrade zpa os/app
     * Upgrade ZPA firmware or app by Zoom Device Manager (ZDM) group ID.  **Scopes:** &#x60;device:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     * @return UpgradeZpaOsAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The upgrade request has been accepted and is currently being processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;30052029&#x60; &lt;br&gt;  Missing required input: firmware_versions. &lt;br&gt; **Error Code:** &#x60;30055020&#x60; &lt;br&gt;  Upgrade type dose not exist. &lt;br&gt; **Error Code:** &#x60;30055018&#x60; &lt;br&gt;  Zdm group id dose not exist. &lt;br&gt; **Error Code:** &#x60;30052030&#x60; &lt;br&gt;  Missing required input: app_version. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public UpgradeZpaOsAppRequestBuilder upgradeZpaOsApp(String zdmGroupId, Object data) throws IllegalArgumentException {
        if (zdmGroupId == null) throw new IllegalArgumentException("\"zdmGroupId\" is required but got null");
            

        
        return new UpgradeZpaOsAppRequestBuilder(zdmGroupId, data);
    }
}
