/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TspAddUserTspAccountRequest;
import com.konfigthis.client.model.TspAddUserTspAccountRequestDialInNumbersInner;
import com.konfigthis.client.model.TspAddUserTspAccountResponse;
import com.konfigthis.client.model.TspGetAccountInfoResponse;
import com.konfigthis.client.model.TspGetUserTspAccountResponse;
import com.konfigthis.client.model.TspListUserTspAccountsResponse;
import com.konfigthis.client.model.TspSetGlobalDialInUrlRequest;
import com.konfigthis.client.model.TspUpdateAccountTspInformationRequest;
import com.konfigthis.client.model.TspUpdateUserTspAccountRequest;
import com.konfigthis.client.model.TspUpdateUserTspAccountRequestDialInNumbersInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TspApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TspApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TspApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getOpenapiAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setOpenapiAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addUserTspAccountCall(Object userId, TspAddUserTspAccountRequest tspAddUserTspAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tspAddUserTspAccountRequest;

        // create path and map variables
        String localVarPath = "/users/{userId}/tsp"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserTspAccountValidateBeforeCall(Object userId, TspAddUserTspAccountRequest tspAddUserTspAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addUserTspAccount(Async)");
        }

        return addUserTspAccountCall(userId, tspAddUserTspAccountRequest, _callback);

    }


    private ApiResponse<TspAddUserTspAccountResponse> addUserTspAccountWithHttpInfo(Object userId, TspAddUserTspAccountRequest tspAddUserTspAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = addUserTspAccountValidateBeforeCall(userId, tspAddUserTspAccountRequest, null);
        Type localVarReturnType = new TypeToken<TspAddUserTspAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addUserTspAccountAsync(Object userId, TspAddUserTspAccountRequest tspAddUserTspAccountRequest, final ApiCallback<TspAddUserTspAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserTspAccountValidateBeforeCall(userId, tspAddUserTspAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<TspAddUserTspAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddUserTspAccountRequestBuilder {
        private final String conferenceCode;
        private final String leaderPin;
        private final Object userId;
        private List<TspAddUserTspAccountRequestDialInNumbersInner> dialInNumbers;
        private String tspBridge;

        private AddUserTspAccountRequestBuilder(String conferenceCode, String leaderPin, Object userId) {
            this.conferenceCode = conferenceCode;
            this.leaderPin = leaderPin;
            this.userId = userId;
        }

        /**
         * Set dialInNumbers
         * @param dialInNumbers List of dial in numbers. (optional)
         * @return AddUserTspAccountRequestBuilder
         */
        public AddUserTspAccountRequestBuilder dialInNumbers(List<TspAddUserTspAccountRequestDialInNumbersInner> dialInNumbers) {
            this.dialInNumbers = dialInNumbers;
            return this;
        }
        
        /**
         * Set tspBridge
         * @param tspBridge Telephony bridge (optional)
         * @return AddUserTspAccountRequestBuilder
         */
        public AddUserTspAccountRequestBuilder tspBridge(String tspBridge) {
            this.tspBridge = tspBridge;
            return this;
        }
        
        /**
         * Build call for addUserTspAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     TSP account added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; Media link is required for AT&amp;T TSP accounts.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; You can add a max of two tsp configs.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TspAddUserTspAccountRequest tspAddUserTspAccountRequest = buildBodyParams();
            return addUserTspAccountCall(userId, tspAddUserTspAccountRequest, _callback);
        }

        private TspAddUserTspAccountRequest buildBodyParams() {
            TspAddUserTspAccountRequest tspAddUserTspAccountRequest = new TspAddUserTspAccountRequest();
            tspAddUserTspAccountRequest.conferenceCode(this.conferenceCode);
            tspAddUserTspAccountRequest.dialInNumbers(this.dialInNumbers);
            tspAddUserTspAccountRequest.leaderPin(this.leaderPin);
            if (this.tspBridge != null)
            tspAddUserTspAccountRequest.tspBridge(TspAddUserTspAccountRequest.TspBridgeEnum.fromValue(this.tspBridge));
            return tspAddUserTspAccountRequest;
        }

        /**
         * Execute addUserTspAccount request
         * @return TspAddUserTspAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     TSP account added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; Media link is required for AT&amp;T TSP accounts.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; You can add a max of two tsp configs.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public TspAddUserTspAccountResponse execute() throws ApiException {
            TspAddUserTspAccountRequest tspAddUserTspAccountRequest = buildBodyParams();
            ApiResponse<TspAddUserTspAccountResponse> localVarResp = addUserTspAccountWithHttpInfo(userId, tspAddUserTspAccountRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addUserTspAccount request with HTTP info returned
         * @return ApiResponse&lt;TspAddUserTspAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     TSP account added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; Media link is required for AT&amp;T TSP accounts.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; You can add a max of two tsp configs.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TspAddUserTspAccountResponse> executeWithHttpInfo() throws ApiException {
            TspAddUserTspAccountRequest tspAddUserTspAccountRequest = buildBodyParams();
            return addUserTspAccountWithHttpInfo(userId, tspAddUserTspAccountRequest);
        }

        /**
         * Execute addUserTspAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     TSP account added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; Media link is required for AT&amp;T TSP accounts.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; You can add a max of two tsp configs.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TspAddUserTspAccountResponse> _callback) throws ApiException {
            TspAddUserTspAccountRequest tspAddUserTspAccountRequest = buildBodyParams();
            return addUserTspAccountAsync(userId, tspAddUserTspAccountRequest, _callback);
        }
    }

    /**
     * Add a user&#39;s TSP account
     * Add a user&#39;s TSP account.            **Scopes:** &#x60;tsp:write:admin&#x60;,&#x60;tsp:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value. (required)
     * @return AddUserTspAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     TSP account added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; Media link is required for AT&amp;T TSP accounts.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; You can add a max of two tsp configs.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
     </table>
     */
    public AddUserTspAccountRequestBuilder addUserTspAccount(String conferenceCode, String leaderPin, Object userId) throws IllegalArgumentException {
        if (conferenceCode == null) throw new IllegalArgumentException("\"conferenceCode\" is required but got null");
            if (conferenceCode != null && conferenceCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for conferenceCode. Length must be greater than or equal to 1.");
            }

        if (leaderPin == null) throw new IllegalArgumentException("\"leaderPin\" is required but got null");
            if (leaderPin != null && leaderPin.length() < 1) {
              throw new IllegalArgumentException("Invalid value for leaderPin. Length must be greater than or equal to 1.");
            }

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new AddUserTspAccountRequestBuilder(conferenceCode, leaderPin, userId);
    }
    private okhttp3.Call deleteUserTspAccountCall(Object userId, String tspId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/tsp/{tspId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "tspId" + "}", localVarApiClient.escapeString(tspId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserTspAccountValidateBeforeCall(Object userId, String tspId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserTspAccount(Async)");
        }

        // verify the required parameter 'tspId' is set
        if (tspId == null) {
            throw new ApiException("Missing the required parameter 'tspId' when calling deleteUserTspAccount(Async)");
        }

        return deleteUserTspAccountCall(userId, tspId, _callback);

    }


    private ApiResponse<Void> deleteUserTspAccountWithHttpInfo(Object userId, String tspId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserTspAccountValidateBeforeCall(userId, tspId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteUserTspAccountAsync(Object userId, String tspId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserTspAccountValidateBeforeCall(userId, tspId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteUserTspAccountRequestBuilder {
        private final Object userId;
        private final String tspId;

        private DeleteUserTspAccountRequestBuilder(Object userId, String tspId) {
            this.userId = userId;
            this.tspId = tspId;
        }

        /**
         * Build call for deleteUserTspAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **Status Code:** &#x60;204&#x60; **No Content**     TSP account deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account not enable TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; At least one tsp config must be available.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserTspAccountCall(userId, tspId, _callback);
        }


        /**
         * Execute deleteUserTspAccount request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **Status Code:** &#x60;204&#x60; **No Content**     TSP account deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account not enable TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; At least one tsp config must be available.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteUserTspAccountWithHttpInfo(userId, tspId);
        }

        /**
         * Execute deleteUserTspAccount request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **Status Code:** &#x60;204&#x60; **No Content**     TSP account deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account not enable TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; At least one tsp config must be available.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteUserTspAccountWithHttpInfo(userId, tspId);
        }

        /**
         * Execute deleteUserTspAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **Status Code:** &#x60;204&#x60; **No Content**     TSP account deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account not enable TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; At least one tsp config must be available.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteUserTspAccountAsync(userId, tspId, _callback);
        }
    }

    /**
     * Delete a user&#39;s TSP account
     * Delete a user&#39;s TSP account.            **Scopes:** &#x60;tsp:write:admin&#x60;,&#x60;tsp:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value. (required)
     * @param tspId TSP account ID. (required)
     * @return DeleteUserTspAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **Status Code:** &#x60;204&#x60; **No Content**     TSP account deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account not enable TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; At least one tsp config must be available.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserTspAccountRequestBuilder deleteUserTspAccount(Object userId, String tspId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (tspId == null) throw new IllegalArgumentException("\"tspId\" is required but got null");
            

        return new DeleteUserTspAccountRequestBuilder(userId, tspId);
    }
    private okhttp3.Call getAccountInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tsp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAccountInfoCall(_callback);

    }


    private ApiResponse<TspGetAccountInfoResponse> getAccountInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAccountInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TspGetAccountInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountInfoAsync(final ApiCallback<TspGetAccountInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TspGetAccountInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccountInfoRequestBuilder {

        private GetAccountInfoRequestBuilder() {
        }

        /**
         * Build call for getAccountInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     TSP account detail returned successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountInfoCall(_callback);
        }


        /**
         * Execute getAccountInfo request
         * @return TspGetAccountInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     TSP account detail returned successfully. </td><td>  -  </td></tr>
         </table>
         */
        public TspGetAccountInfoResponse execute() throws ApiException {
            ApiResponse<TspGetAccountInfoResponse> localVarResp = getAccountInfoWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccountInfo request with HTTP info returned
         * @return ApiResponse&lt;TspGetAccountInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     TSP account detail returned successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TspGetAccountInfoResponse> executeWithHttpInfo() throws ApiException {
            return getAccountInfoWithHttpInfo();
        }

        /**
         * Execute getAccountInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     TSP account detail returned successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TspGetAccountInfoResponse> _callback) throws ApiException {
            return getAccountInfoAsync(_callback);
        }
    }

    /**
     * Get account&#39;s TSP information
     * Get information on Telephony Service Provider on an account level.          **Prerequisites:**     * A Pro or a higher plan.  **Scopes:** &#x60;tsp:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @return GetAccountInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     TSP account detail returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountInfoRequestBuilder getAccountInfo() throws IllegalArgumentException {
        return new GetAccountInfoRequestBuilder();
    }
    private okhttp3.Call getUserTspAccountCall(Object userId, String tspId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/tsp/{tspId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "tspId" + "}", localVarApiClient.escapeString(tspId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserTspAccountValidateBeforeCall(Object userId, String tspId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserTspAccount(Async)");
        }

        // verify the required parameter 'tspId' is set
        if (tspId == null) {
            throw new ApiException("Missing the required parameter 'tspId' when calling getUserTspAccount(Async)");
        }

        return getUserTspAccountCall(userId, tspId, _callback);

    }


    private ApiResponse<TspGetUserTspAccountResponse> getUserTspAccountWithHttpInfo(Object userId, String tspId) throws ApiException {
        okhttp3.Call localVarCall = getUserTspAccountValidateBeforeCall(userId, tspId, null);
        Type localVarReturnType = new TypeToken<TspGetUserTspAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserTspAccountAsync(Object userId, String tspId, final ApiCallback<TspGetUserTspAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserTspAccountValidateBeforeCall(userId, tspId, _callback);
        Type localVarReturnType = new TypeToken<TspGetUserTspAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserTspAccountRequestBuilder {
        private final Object userId;
        private final String tspId;

        private GetUserTspAccountRequestBuilder(Object userId, String tspId) {
            this.userId = userId;
            this.tspId = tspId;
        }

        /**
         * Build call for getUserTspAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     TSP account retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserTspAccountCall(userId, tspId, _callback);
        }


        /**
         * Execute getUserTspAccount request
         * @return TspGetUserTspAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     TSP account retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public TspGetUserTspAccountResponse execute() throws ApiException {
            ApiResponse<TspGetUserTspAccountResponse> localVarResp = getUserTspAccountWithHttpInfo(userId, tspId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserTspAccount request with HTTP info returned
         * @return ApiResponse&lt;TspGetUserTspAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     TSP account retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TspGetUserTspAccountResponse> executeWithHttpInfo() throws ApiException {
            return getUserTspAccountWithHttpInfo(userId, tspId);
        }

        /**
         * Execute getUserTspAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     TSP account retrieved successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TspGetUserTspAccountResponse> _callback) throws ApiException {
            return getUserTspAccountAsync(userId, tspId, _callback);
        }
    }

    /**
     * Get a user&#39;s TSP account
     * Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.            **Scopes:** &#x60;tsp:read:admin&#x60;,&#x60;tsp:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value. (required)
     * @param tspId TSP account ID. (required)
     * @return GetUserTspAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     TSP account retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
     </table>
     */
    public GetUserTspAccountRequestBuilder getUserTspAccount(Object userId, String tspId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (tspId == null) throw new IllegalArgumentException("\"tspId\" is required but got null");
            

        return new GetUserTspAccountRequestBuilder(userId, tspId);
    }
    private okhttp3.Call listUserTspAccountsCall(Object userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/tsp"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserTspAccountsValidateBeforeCall(Object userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listUserTspAccounts(Async)");
        }

        return listUserTspAccountsCall(userId, _callback);

    }


    private ApiResponse<TspListUserTspAccountsResponse> listUserTspAccountsWithHttpInfo(Object userId) throws ApiException {
        okhttp3.Call localVarCall = listUserTspAccountsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<TspListUserTspAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserTspAccountsAsync(Object userId, final ApiCallback<TspListUserTspAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserTspAccountsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<TspListUserTspAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserTspAccountsRequestBuilder {
        private final Object userId;

        private ListUserTspAccountsRequestBuilder(Object userId) {
            this.userId = userId;
        }

        /**
         * Build call for listUserTspAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     TSP account list returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserTspAccountsCall(userId, _callback);
        }


        /**
         * Execute listUserTspAccounts request
         * @return TspListUserTspAccountsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     TSP account list returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public TspListUserTspAccountsResponse execute() throws ApiException {
            ApiResponse<TspListUserTspAccountsResponse> localVarResp = listUserTspAccountsWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserTspAccounts request with HTTP info returned
         * @return ApiResponse&lt;TspListUserTspAccountsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     TSP account list returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TspListUserTspAccountsResponse> executeWithHttpInfo() throws ApiException {
            return listUserTspAccountsWithHttpInfo(userId);
        }

        /**
         * Execute listUserTspAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     TSP account list returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TspListUserTspAccountsResponse> _callback) throws ApiException {
            return listUserTspAccountsAsync(userId, _callback);
        }
    }

    /**
     * List user&#39;s TSP accounts
     * A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.            **Scopes:** &#x60;tsp:read:admin&#x60;,&#x60;tsp:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value. (required)
     * @return ListUserTspAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     TSP account list returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
     </table>
     */
    public ListUserTspAccountsRequestBuilder listUserTspAccounts(Object userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new ListUserTspAccountsRequestBuilder(userId);
    }
    private okhttp3.Call setGlobalDialInUrlCall(String userId, TspSetGlobalDialInUrlRequest tspSetGlobalDialInUrlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tspSetGlobalDialInUrlRequest;

        // create path and map variables
        String localVarPath = "/users/{userId}/tsp/settings"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setGlobalDialInUrlValidateBeforeCall(String userId, TspSetGlobalDialInUrlRequest tspSetGlobalDialInUrlRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setGlobalDialInUrl(Async)");
        }

        return setGlobalDialInUrlCall(userId, tspSetGlobalDialInUrlRequest, _callback);

    }


    private ApiResponse<Void> setGlobalDialInUrlWithHttpInfo(String userId, TspSetGlobalDialInUrlRequest tspSetGlobalDialInUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = setGlobalDialInUrlValidateBeforeCall(userId, tspSetGlobalDialInUrlRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setGlobalDialInUrlAsync(String userId, TspSetGlobalDialInUrlRequest tspSetGlobalDialInUrlRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setGlobalDialInUrlValidateBeforeCall(userId, tspSetGlobalDialInUrlRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetGlobalDialInUrlRequestBuilder {
        private final String userId;
        private String audioUrl;

        private SetGlobalDialInUrlRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set audioUrl
         * @param audioUrl The global dial-in URL for a TSP enabled account. The URL must be valid with a max-length of 512 characters. (optional)
         * @return SetGlobalDialInUrlRequestBuilder
         */
        public SetGlobalDialInUrlRequestBuilder audioUrl(String audioUrl) {
            this.audioUrl = audioUrl;
            return this;
        }
        
        /**
         * Build call for setGlobalDialInUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **Status Code:** &#x60;204&#x60; **No Content**      URL set successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2000&#x60; &lt;br&gt; Not TSP special account.&lt;br&gt;  Ths error means that the account does not have special TSP privilege. Contact Zoom Developer Support for details.&lt;br&gt;  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account not enable TSP   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.  **Error Code:** &#x60;1120&#x60; &lt;br&gt; Invite not exist.  This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TspSetGlobalDialInUrlRequest tspSetGlobalDialInUrlRequest = buildBodyParams();
            return setGlobalDialInUrlCall(userId, tspSetGlobalDialInUrlRequest, _callback);
        }

        private TspSetGlobalDialInUrlRequest buildBodyParams() {
            TspSetGlobalDialInUrlRequest tspSetGlobalDialInUrlRequest = new TspSetGlobalDialInUrlRequest();
            tspSetGlobalDialInUrlRequest.audioUrl(this.audioUrl);
            return tspSetGlobalDialInUrlRequest;
        }

        /**
         * Execute setGlobalDialInUrl request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **Status Code:** &#x60;204&#x60; **No Content**      URL set successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2000&#x60; &lt;br&gt; Not TSP special account.&lt;br&gt;  Ths error means that the account does not have special TSP privilege. Contact Zoom Developer Support for details.&lt;br&gt;  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account not enable TSP   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.  **Error Code:** &#x60;1120&#x60; &lt;br&gt; Invite not exist.  This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TspSetGlobalDialInUrlRequest tspSetGlobalDialInUrlRequest = buildBodyParams();
            setGlobalDialInUrlWithHttpInfo(userId, tspSetGlobalDialInUrlRequest);
        }

        /**
         * Execute setGlobalDialInUrl request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **Status Code:** &#x60;204&#x60; **No Content**      URL set successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2000&#x60; &lt;br&gt; Not TSP special account.&lt;br&gt;  Ths error means that the account does not have special TSP privilege. Contact Zoom Developer Support for details.&lt;br&gt;  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account not enable TSP   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.  **Error Code:** &#x60;1120&#x60; &lt;br&gt; Invite not exist.  This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TspSetGlobalDialInUrlRequest tspSetGlobalDialInUrlRequest = buildBodyParams();
            return setGlobalDialInUrlWithHttpInfo(userId, tspSetGlobalDialInUrlRequest);
        }

        /**
         * Execute setGlobalDialInUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **Status Code:** &#x60;204&#x60; **No Content**      URL set successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2000&#x60; &lt;br&gt; Not TSP special account.&lt;br&gt;  Ths error means that the account does not have special TSP privilege. Contact Zoom Developer Support for details.&lt;br&gt;  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account not enable TSP   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.  **Error Code:** &#x60;1120&#x60; &lt;br&gt; Invite not exist.  This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TspSetGlobalDialInUrlRequest tspSetGlobalDialInUrlRequest = buildBodyParams();
            return setGlobalDialInUrlAsync(userId, tspSetGlobalDialInUrlRequest, _callback);
        }
    }

    /**
     * Set global dial-in URL for a TSP user
     * A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;   **Scopes:** &#x60;tsp:write:admin&#x60;,&#x60;tsp:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param userId The userId or email address of the user. (required)
     * @return SetGlobalDialInUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **Status Code:** &#x60;204&#x60; **No Content**      URL set successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2000&#x60; &lt;br&gt; Not TSP special account.&lt;br&gt;  Ths error means that the account does not have special TSP privilege. Contact Zoom Developer Support for details.&lt;br&gt;  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account not enable TSP   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.  **Error Code:** &#x60;1120&#x60; &lt;br&gt; Invite not exist.  This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
     </table>
     */
    public SetGlobalDialInUrlRequestBuilder setGlobalDialInUrl(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SetGlobalDialInUrlRequestBuilder(userId);
    }
    private okhttp3.Call updateAccountTspInformationCall(TspUpdateAccountTspInformationRequest tspUpdateAccountTspInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tspUpdateAccountTspInformationRequest;

        // create path and map variables
        String localVarPath = "/tsp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountTspInformationValidateBeforeCall(TspUpdateAccountTspInformationRequest tspUpdateAccountTspInformationRequest, final ApiCallback _callback) throws ApiException {
        return updateAccountTspInformationCall(tspUpdateAccountTspInformationRequest, _callback);

    }


    private ApiResponse<Void> updateAccountTspInformationWithHttpInfo(TspUpdateAccountTspInformationRequest tspUpdateAccountTspInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAccountTspInformationValidateBeforeCall(tspUpdateAccountTspInformationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateAccountTspInformationAsync(TspUpdateAccountTspInformationRequest tspUpdateAccountTspInformationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountTspInformationValidateBeforeCall(tspUpdateAccountTspInformationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateAccountTspInformationRequestBuilder {
        private Boolean dialInNumberUnrestricted;
        private Boolean enable;
        private Boolean masterAccountSettingExtended;
        private Boolean modifyCredentialForbidden;
        private String tspBridge;
        private Boolean tspEnabled;
        private String tspProvider;

        private UpdateAccountTspInformationRequestBuilder() {
        }

        /**
         * Set dialInNumberUnrestricted
         * @param dialInNumberUnrestricted Control restriction on account users adding a TSP number outside of account&#39;s dial in numbers. (optional)
         * @return UpdateAccountTspInformationRequestBuilder
         */
        public UpdateAccountTspInformationRequestBuilder dialInNumberUnrestricted(Boolean dialInNumberUnrestricted) {
            this.dialInNumberUnrestricted = dialInNumberUnrestricted;
            return this;
        }
        
        /**
         * Set enable
         * @param enable Enable 3rd party audio conferencing for account users (optional)
         * @return UpdateAccountTspInformationRequestBuilder
         */
        public UpdateAccountTspInformationRequestBuilder enable(Boolean enable) {
            this.enable = enable;
            return this;
        }
        
        /**
         * Set masterAccountSettingExtended
         * @param masterAccountSettingExtended For master account, extend its TSP setting to all sub accounts. For sub account, extend TSP setting from master account. (optional)
         * @return UpdateAccountTspInformationRequestBuilder
         */
        public UpdateAccountTspInformationRequestBuilder masterAccountSettingExtended(Boolean masterAccountSettingExtended) {
            this.masterAccountSettingExtended = masterAccountSettingExtended;
            return this;
        }
        
        /**
         * Set modifyCredentialForbidden
         * @param modifyCredentialForbidden Control restriction on account users being able to modify their TSP credentials. (optional)
         * @return UpdateAccountTspInformationRequestBuilder
         */
        public UpdateAccountTspInformationRequestBuilder modifyCredentialForbidden(Boolean modifyCredentialForbidden) {
            this.modifyCredentialForbidden = modifyCredentialForbidden;
            return this;
        }
        
        /**
         * Set tspBridge
         * @param tspBridge Telephony bridge (optional)
         * @return UpdateAccountTspInformationRequestBuilder
         */
        public UpdateAccountTspInformationRequestBuilder tspBridge(String tspBridge) {
            this.tspBridge = tspBridge;
            return this;
        }
        
        /**
         * Set tspEnabled
         * @param tspEnabled Enable TSP feature for account. This has to be enabled to use any other tsp settings/features. (optional)
         * @return UpdateAccountTspInformationRequestBuilder
         */
        public UpdateAccountTspInformationRequestBuilder tspEnabled(Boolean tspEnabled) {
            this.tspEnabled = tspEnabled;
            return this;
        }
        
        /**
         * Set tspProvider
         * @param tspProvider 3rd party audio conferencing provider (optional)
         * @return UpdateAccountTspInformationRequestBuilder
         */
        public UpdateAccountTspInformationRequestBuilder tspProvider(String tspProvider) {
            this.tspProvider = tspProvider;
            return this;
        }
        
        /**
         * Build call for updateAccountTspInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**     TSP Account updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: tsp_bridge.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TspUpdateAccountTspInformationRequest tspUpdateAccountTspInformationRequest = buildBodyParams();
            return updateAccountTspInformationCall(tspUpdateAccountTspInformationRequest, _callback);
        }

        private TspUpdateAccountTspInformationRequest buildBodyParams() {
            TspUpdateAccountTspInformationRequest tspUpdateAccountTspInformationRequest = new TspUpdateAccountTspInformationRequest();
            tspUpdateAccountTspInformationRequest.dialInNumberUnrestricted(this.dialInNumberUnrestricted);
            tspUpdateAccountTspInformationRequest.enable(this.enable);
            tspUpdateAccountTspInformationRequest.masterAccountSettingExtended(this.masterAccountSettingExtended);
            tspUpdateAccountTspInformationRequest.modifyCredentialForbidden(this.modifyCredentialForbidden);
            if (this.tspBridge != null)
            tspUpdateAccountTspInformationRequest.tspBridge(TspUpdateAccountTspInformationRequest.TspBridgeEnum.fromValue(this.tspBridge));
            tspUpdateAccountTspInformationRequest.tspEnabled(this.tspEnabled);
            tspUpdateAccountTspInformationRequest.tspProvider(this.tspProvider);
            return tspUpdateAccountTspInformationRequest;
        }

        /**
         * Execute updateAccountTspInformation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**     TSP Account updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: tsp_bridge.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TspUpdateAccountTspInformationRequest tspUpdateAccountTspInformationRequest = buildBodyParams();
            updateAccountTspInformationWithHttpInfo(tspUpdateAccountTspInformationRequest);
        }

        /**
         * Execute updateAccountTspInformation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**     TSP Account updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: tsp_bridge.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TspUpdateAccountTspInformationRequest tspUpdateAccountTspInformationRequest = buildBodyParams();
            return updateAccountTspInformationWithHttpInfo(tspUpdateAccountTspInformationRequest);
        }

        /**
         * Execute updateAccountTspInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**     TSP Account updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: tsp_bridge.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TspUpdateAccountTspInformationRequest tspUpdateAccountTspInformationRequest = buildBodyParams();
            return updateAccountTspInformationAsync(tspUpdateAccountTspInformationRequest, _callback);
        }
    }

    /**
     * Update account&#39;s TSP information
     * Update information of the Telephony Service Provider set up on an account.     **Prerequisites**:     TSP account option should be enabled.       **Scopes:** &#x60;tsp:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @return UpdateAccountTspInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; **No Content**     TSP Account updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: tsp_bridge.   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAccountTspInformationRequestBuilder updateAccountTspInformation() throws IllegalArgumentException {
        return new UpdateAccountTspInformationRequestBuilder();
    }
    private okhttp3.Call updateUserTspAccountCall(Object userId, String tspId, TspUpdateUserTspAccountRequest tspUpdateUserTspAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tspUpdateUserTspAccountRequest;

        // create path and map variables
        String localVarPath = "/users/{userId}/tsp/{tspId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "tspId" + "}", localVarApiClient.escapeString(tspId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserTspAccountValidateBeforeCall(Object userId, String tspId, TspUpdateUserTspAccountRequest tspUpdateUserTspAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserTspAccount(Async)");
        }

        // verify the required parameter 'tspId' is set
        if (tspId == null) {
            throw new ApiException("Missing the required parameter 'tspId' when calling updateUserTspAccount(Async)");
        }

        return updateUserTspAccountCall(userId, tspId, tspUpdateUserTspAccountRequest, _callback);

    }


    private ApiResponse<Void> updateUserTspAccountWithHttpInfo(Object userId, String tspId, TspUpdateUserTspAccountRequest tspUpdateUserTspAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserTspAccountValidateBeforeCall(userId, tspId, tspUpdateUserTspAccountRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateUserTspAccountAsync(Object userId, String tspId, TspUpdateUserTspAccountRequest tspUpdateUserTspAccountRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserTspAccountValidateBeforeCall(userId, tspId, tspUpdateUserTspAccountRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateUserTspAccountRequestBuilder {
        private final String conferenceCode;
        private final String leaderPin;
        private final Object userId;
        private final String tspId;
        private List<TspUpdateUserTspAccountRequestDialInNumbersInner> dialInNumbers;
        private String tspBridge;

        private UpdateUserTspAccountRequestBuilder(String conferenceCode, String leaderPin, Object userId, String tspId) {
            this.conferenceCode = conferenceCode;
            this.leaderPin = leaderPin;
            this.userId = userId;
            this.tspId = tspId;
        }

        /**
         * Set dialInNumbers
         * @param dialInNumbers List of dial in numbers. (optional)
         * @return UpdateUserTspAccountRequestBuilder
         */
        public UpdateUserTspAccountRequestBuilder dialInNumbers(List<TspUpdateUserTspAccountRequestDialInNumbersInner> dialInNumbers) {
            this.dialInNumbers = dialInNumbers;
            return this;
        }
        
        /**
         * Set tspBridge
         * @param tspBridge Telephony bridge (optional)
         * @return UpdateUserTspAccountRequestBuilder
         */
        public UpdateUserTspAccountRequestBuilder tspBridge(String tspBridge) {
            this.tspBridge = tspBridge;
            return this;
        }
        
        /**
         * Build call for updateUserTspAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:**&#x60;204&#x60; **No Content**     TSP account updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; At least one tsp config must be available.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; Media link is required for AT&amp;T TSP accounts.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: tsp_bridge.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TspUpdateUserTspAccountRequest tspUpdateUserTspAccountRequest = buildBodyParams();
            return updateUserTspAccountCall(userId, tspId, tspUpdateUserTspAccountRequest, _callback);
        }

        private TspUpdateUserTspAccountRequest buildBodyParams() {
            TspUpdateUserTspAccountRequest tspUpdateUserTspAccountRequest = new TspUpdateUserTspAccountRequest();
            tspUpdateUserTspAccountRequest.conferenceCode(this.conferenceCode);
            tspUpdateUserTspAccountRequest.dialInNumbers(this.dialInNumbers);
            tspUpdateUserTspAccountRequest.leaderPin(this.leaderPin);
            if (this.tspBridge != null)
            tspUpdateUserTspAccountRequest.tspBridge(TspUpdateUserTspAccountRequest.TspBridgeEnum.fromValue(this.tspBridge));
            return tspUpdateUserTspAccountRequest;
        }

        /**
         * Execute updateUserTspAccount request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:**&#x60;204&#x60; **No Content**     TSP account updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; At least one tsp config must be available.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; Media link is required for AT&amp;T TSP accounts.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: tsp_bridge.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TspUpdateUserTspAccountRequest tspUpdateUserTspAccountRequest = buildBodyParams();
            updateUserTspAccountWithHttpInfo(userId, tspId, tspUpdateUserTspAccountRequest);
        }

        /**
         * Execute updateUserTspAccount request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:**&#x60;204&#x60; **No Content**     TSP account updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; At least one tsp config must be available.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; Media link is required for AT&amp;T TSP accounts.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: tsp_bridge.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TspUpdateUserTspAccountRequest tspUpdateUserTspAccountRequest = buildBodyParams();
            return updateUserTspAccountWithHttpInfo(userId, tspId, tspUpdateUserTspAccountRequest);
        }

        /**
         * Execute updateUserTspAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:**&#x60;204&#x60; **No Content**     TSP account updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; At least one tsp config must be available.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; Media link is required for AT&amp;T TSP accounts.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: tsp_bridge.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TspUpdateUserTspAccountRequest tspUpdateUserTspAccountRequest = buildBodyParams();
            return updateUserTspAccountAsync(userId, tspId, tspUpdateUserTspAccountRequest, _callback);
        }
    }

    /**
     * Update a TSP account
     * Update a user&#39;s TSP account.            **Scopes:** &#x60;tsp:write:admin&#x60;,&#x60;tsp:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value. (required)
     * @param tspId TSP account ID. (required)
     * @return UpdateUserTspAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:**&#x60;204&#x60; **No Content**     TSP account updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2024&#x60; &lt;br&gt; Account has not enabled TSP.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The TSP id provided does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; TSP Config does not exist.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; At least one tsp config must be available.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; Media link is required for AT&amp;T TSP accounts.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: tsp_bridge.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: $userId.&lt;br&gt;  **Error Code:** &#x60;1120&#x60; &lt;br&gt; A valid invitation to join the Zoom account was not found for this user.&lt;br&gt; This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserTspAccountRequestBuilder updateUserTspAccount(String conferenceCode, String leaderPin, Object userId, String tspId) throws IllegalArgumentException {
        if (conferenceCode == null) throw new IllegalArgumentException("\"conferenceCode\" is required but got null");
            if (conferenceCode != null && conferenceCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for conferenceCode. Length must be greater than or equal to 1.");
            }

        if (leaderPin == null) throw new IllegalArgumentException("\"leaderPin\" is required but got null");
            if (leaderPin != null && leaderPin.length() < 1) {
              throw new IllegalArgumentException("Invalid value for leaderPin. Length must be greater than or equal to 1.");
            }

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (tspId == null) throw new IllegalArgumentException("\"tspId\" is required but got null");
            

        return new UpdateUserTspAccountRequestBuilder(conferenceCode, leaderPin, userId, tspId);
    }
}
