/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ArchivingGetStatisticsResponse;
import com.konfigthis.client.model.ArchivingMeetingFilesList200Response;
import com.konfigthis.client.model.ArchivingMeetingFilesListResponse;
import com.konfigthis.client.model.ArchivingUpdateAutoDeleteStatusRequest;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ArchivingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArchivingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ArchivingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getOpenapiAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setOpenapiAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getStatisticsCall(OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/archive_files/statistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatisticsValidateBeforeCall(OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        return getStatisticsCall(from, to, _callback);

    }


    private ApiResponse<ArchivingGetStatisticsResponse> getStatisticsWithHttpInfo(OffsetDateTime from, OffsetDateTime to) throws ApiException {
        okhttp3.Call localVarCall = getStatisticsValidateBeforeCall(from, to, null);
        Type localVarReturnType = new TypeToken<ArchivingGetStatisticsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatisticsAsync(OffsetDateTime from, OffsetDateTime to, final ApiCallback<ArchivingGetStatisticsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatisticsValidateBeforeCall(from, to, _callback);
        Type localVarReturnType = new TypeToken<ArchivingGetStatisticsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatisticsRequestBuilder {
        private OffsetDateTime from;
        private OffsetDateTime to;

        private GetStatisticsRequestBuilder() {
        }

        /**
         * Set from
         * @param from The query start date, &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#x60; format. This value and the &#x60;to&#x60; query parameter value cannot exceed seven days. (optional)
         * @return GetStatisticsRequestBuilder
         */
        public GetStatisticsRequestBuilder from(OffsetDateTime from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to The query end date, in &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#x60; format. This value and the &#x60;from&#x60; query parameter value cannot exceed seven days. (optional)
         * @return GetStatisticsRequestBuilder
         */
        public GetStatisticsRequestBuilder to(OffsetDateTime to) {
            this.to = to;
            return this;
        }
        
        /**
         * Build call for getStatistics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       The statistics of Archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2001&#x60; &lt;br&gt; Account does not exist: {accountId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatisticsCall(from, to, _callback);
        }


        /**
         * Execute getStatistics request
         * @return ArchivingGetStatisticsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       The statistics of Archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2001&#x60; &lt;br&gt; Account does not exist: {accountId}   </td><td>  -  </td></tr>
         </table>
         */
        public ArchivingGetStatisticsResponse execute() throws ApiException {
            ApiResponse<ArchivingGetStatisticsResponse> localVarResp = getStatisticsWithHttpInfo(from, to);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatistics request with HTTP info returned
         * @return ApiResponse&lt;ArchivingGetStatisticsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       The statistics of Archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2001&#x60; &lt;br&gt; Account does not exist: {accountId}   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArchivingGetStatisticsResponse> executeWithHttpInfo() throws ApiException {
            return getStatisticsWithHttpInfo(from, to);
        }

        /**
         * Execute getStatistics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       The statistics of Archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2001&#x60; &lt;br&gt; Account does not exist: {accountId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArchivingGetStatisticsResponse> _callback) throws ApiException {
            return getStatisticsAsync(from, to, _callback);
        }
    }

    /**
     * Get archived file statistics
     * Get statistics about an account&#39;s archived meeting or webinar files.    Zoom&#39;s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA and other compliance requirements.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** &#x60;recording:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @return GetStatisticsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       The statistics of Archived files returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;2001&#x60; &lt;br&gt; Account does not exist: {accountId}   </td><td>  -  </td></tr>
     </table>
     */
    public GetStatisticsRequestBuilder getStatistics() throws IllegalArgumentException {
        return new GetStatisticsRequestBuilder();
    }
    private okhttp3.Call meetingFilesDeleteCall(String meetingUUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_meetings/{meetingUUID}/archive_files"
            .replace("{" + "meetingUUID" + "}", localVarApiClient.escapeString(meetingUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meetingFilesDeleteValidateBeforeCall(String meetingUUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingUUID' is set
        if (meetingUUID == null) {
            throw new ApiException("Missing the required parameter 'meetingUUID' when calling meetingFilesDelete(Async)");
        }

        return meetingFilesDeleteCall(meetingUUID, _callback);

    }


    private ApiResponse<Void> meetingFilesDeleteWithHttpInfo(String meetingUUID) throws ApiException {
        okhttp3.Call localVarCall = meetingFilesDeleteValidateBeforeCall(meetingUUID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call meetingFilesDeleteAsync(String meetingUUID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = meetingFilesDeleteValidateBeforeCall(meetingUUID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class MeetingFilesDeleteRequestBuilder {
        private final String meetingUUID;

        private MeetingFilesDeleteRequestBuilder(String meetingUUID) {
            this.meetingUUID = meetingUUID;
        }

        /**
         * Build call for meetingFilesDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Meeting archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for Paid account.  **Error Code:** &#x60;200&#x60; &lt;br&gt; Not available for this account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {0}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return meetingFilesDeleteCall(meetingUUID, _callback);
        }


        /**
         * Execute meetingFilesDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Meeting archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for Paid account.  **Error Code:** &#x60;200&#x60; &lt;br&gt; Not available for this account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {0}   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            meetingFilesDeleteWithHttpInfo(meetingUUID);
        }

        /**
         * Execute meetingFilesDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Meeting archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for Paid account.  **Error Code:** &#x60;200&#x60; &lt;br&gt; Not available for this account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {0}   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return meetingFilesDeleteWithHttpInfo(meetingUUID);
        }

        /**
         * Execute meetingFilesDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Meeting archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for Paid account.  **Error Code:** &#x60;200&#x60; &lt;br&gt; Not available for this account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {0}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return meetingFilesDeleteAsync(meetingUUID, _callback);
        }
    }

    /**
     * Delete a meeting&#39;s archived files
     * Use this API to delete all of a meeting&#39;s archived files.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** &#x60;recording:write:admin&#x60;,&#x60;recording:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingUUID The meeting&#39;s universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.  If the meeting UUID begins with a &#x60;/&#x60; character or contains a &#x60;//&#x60; character, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls. (required)
     * @return MeetingFilesDeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Meeting archived files returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for Paid account.  **Error Code:** &#x60;200&#x60; &lt;br&gt; Not available for this account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {0}   </td><td>  -  </td></tr>
     </table>
     */
    public MeetingFilesDeleteRequestBuilder meetingFilesDelete(String meetingUUID) throws IllegalArgumentException {
        if (meetingUUID == null) throw new IllegalArgumentException("\"meetingUUID\" is required but got null");
            

        return new MeetingFilesDeleteRequestBuilder(meetingUUID);
    }
    private okhttp3.Call meetingFilesListCall(Integer pageSize, String nextPageToken, OffsetDateTime from, OffsetDateTime to, String queryDateType, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/archive_files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (queryDateType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query_date_type", queryDateType));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meetingFilesListValidateBeforeCall(Integer pageSize, String nextPageToken, OffsetDateTime from, OffsetDateTime to, String queryDateType, String groupId, final ApiCallback _callback) throws ApiException {
        return meetingFilesListCall(pageSize, nextPageToken, from, to, queryDateType, groupId, _callback);

    }


    private ApiResponse<ArchivingMeetingFilesListResponse> meetingFilesListWithHttpInfo(Integer pageSize, String nextPageToken, OffsetDateTime from, OffsetDateTime to, String queryDateType, String groupId) throws ApiException {
        okhttp3.Call localVarCall = meetingFilesListValidateBeforeCall(pageSize, nextPageToken, from, to, queryDateType, groupId, null);
        Type localVarReturnType = new TypeToken<ArchivingMeetingFilesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call meetingFilesListAsync(Integer pageSize, String nextPageToken, OffsetDateTime from, OffsetDateTime to, String queryDateType, String groupId, final ApiCallback<ArchivingMeetingFilesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = meetingFilesListValidateBeforeCall(pageSize, nextPageToken, from, to, queryDateType, groupId, _callback);
        Type localVarReturnType = new TypeToken<ArchivingMeetingFilesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MeetingFilesListRequestBuilder {
        private Integer pageSize;
        private String nextPageToken;
        private OffsetDateTime from;
        private OffsetDateTime to;
        private String queryDateType;
        private String groupId;

        private MeetingFilesListRequestBuilder() {
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return MeetingFilesListRequestBuilder
         */
        public MeetingFilesListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return MeetingFilesListRequestBuilder
         */
        public MeetingFilesListRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Set from
         * @param from The query start date, in &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#x60; format. This value and the &#x60;to&#x60; query parameter value cannot exceed seven days. (optional)
         * @return MeetingFilesListRequestBuilder
         */
        public MeetingFilesListRequestBuilder from(OffsetDateTime from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to The query end date, in &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#x60; format. This value and the &#x60;from&#x60; query parameter value cannot exceed seven days. (optional)
         * @return MeetingFilesListRequestBuilder
         */
        public MeetingFilesListRequestBuilder to(OffsetDateTime to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set queryDateType
         * @param queryDateType The type of query date. * &#x60;meeting_start_time&#x60;  * &#x60;archive_complete_time&#x60;    This value defaults to &#x60;meeting_start_time&#x60;. (optional, default to meeting_start_time)
         * @return MeetingFilesListRequestBuilder
         */
        public MeetingFilesListRequestBuilder queryDateType(String queryDateType) {
            this.queryDateType = queryDateType;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The group ID. To get a group ID, use the [List groups](https://developers.zoom.us/docs/api/rest/reference/scim-api/methods/#operation/groupSCIM2List) API. (optional)
         * @return MeetingFilesListRequestBuilder
         */
        public MeetingFilesListRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Build call for meetingFilesList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;2001&#x60; &lt;br&gt;  Account does not exist: {accountId} &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return meetingFilesListCall(pageSize, nextPageToken, from, to, queryDateType, groupId, _callback);
        }


        /**
         * Execute meetingFilesList request
         * @return ArchivingMeetingFilesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;2001&#x60; &lt;br&gt;  Account does not exist: {accountId} &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ArchivingMeetingFilesListResponse execute() throws ApiException {
            ApiResponse<ArchivingMeetingFilesListResponse> localVarResp = meetingFilesListWithHttpInfo(pageSize, nextPageToken, from, to, queryDateType, groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute meetingFilesList request with HTTP info returned
         * @return ApiResponse&lt;ArchivingMeetingFilesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;2001&#x60; &lt;br&gt;  Account does not exist: {accountId} &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArchivingMeetingFilesListResponse> executeWithHttpInfo() throws ApiException {
            return meetingFilesListWithHttpInfo(pageSize, nextPageToken, from, to, queryDateType, groupId);
        }

        /**
         * Execute meetingFilesList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Archived files returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;2001&#x60; &lt;br&gt;  Account does not exist: {accountId} &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArchivingMeetingFilesListResponse> _callback) throws ApiException {
            return meetingFilesListAsync(pageSize, nextPageToken, from, to, queryDateType, groupId, _callback);
        }
    }

    /**
     * List archived files
     * Get an account&#39;s archived meeting or webinar files.    Zoom&#39;s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA or other compliance requirements.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** &#x60;recording:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @return MeetingFilesListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Archived files returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;2001&#x60; &lt;br&gt;  Account does not exist: {accountId} &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public MeetingFilesListRequestBuilder meetingFilesList() throws IllegalArgumentException {
        return new MeetingFilesListRequestBuilder();
    }
    private okhttp3.Call meetingFilesList_0Call(String meetingUUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_meetings/{meetingUUID}/archive_files"
            .replace("{" + "meetingUUID" + "}", localVarApiClient.escapeString(meetingUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meetingFilesList_0ValidateBeforeCall(String meetingUUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingUUID' is set
        if (meetingUUID == null) {
            throw new ApiException("Missing the required parameter 'meetingUUID' when calling meetingFilesList_0(Async)");
        }

        return meetingFilesList_0Call(meetingUUID, _callback);

    }


    private ApiResponse<ArchivingMeetingFilesList200Response> meetingFilesList_0WithHttpInfo(String meetingUUID) throws ApiException {
        okhttp3.Call localVarCall = meetingFilesList_0ValidateBeforeCall(meetingUUID, null);
        Type localVarReturnType = new TypeToken<ArchivingMeetingFilesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call meetingFilesList_0Async(String meetingUUID, final ApiCallback<ArchivingMeetingFilesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = meetingFilesList_0ValidateBeforeCall(meetingUUID, _callback);
        Type localVarReturnType = new TypeToken<ArchivingMeetingFilesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MeetingFilesList0RequestBuilder {
        private final String meetingUUID;

        private MeetingFilesList0RequestBuilder(String meetingUUID) {
            this.meetingUUID = meetingUUID;
        }

        /**
         * Build call for meetingFilesList_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting archived files returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingUUId} does not exist. &lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return meetingFilesList_0Call(meetingUUID, _callback);
        }


        /**
         * Execute meetingFilesList_0 request
         * @return ArchivingMeetingFilesList200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting archived files returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingUUId} does not exist. &lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ArchivingMeetingFilesList200Response execute() throws ApiException {
            ApiResponse<ArchivingMeetingFilesList200Response> localVarResp = meetingFilesList_0WithHttpInfo(meetingUUID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute meetingFilesList_0 request with HTTP info returned
         * @return ApiResponse&lt;ArchivingMeetingFilesList200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting archived files returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingUUId} does not exist. &lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArchivingMeetingFilesList200Response> executeWithHttpInfo() throws ApiException {
            return meetingFilesList_0WithHttpInfo(meetingUUID);
        }

        /**
         * Execute meetingFilesList_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting archived files returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingUUId} does not exist. &lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArchivingMeetingFilesList200Response> _callback) throws ApiException {
            return meetingFilesList_0Async(meetingUUID, _callback);
        }
    }

    /**
     * Get a meeting&#39;s archived files
     * Return a specific meeting instance&#39;s [archived files](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators).    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** &#x60;recording:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param meetingUUID The meeting&#39;s universally unique identifier (UUID). Each meeting instance generates a UUID. After a meeting ends, a new UUID is generated for the next meeting instance.  If the meeting UUID begins with a &#x60;/&#x60; character or contains a &#x60;//&#x60; character, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls. (required)
     * @return MeetingFilesList0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting archived files returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingUUId} does not exist. &lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public MeetingFilesList0RequestBuilder meetingFilesList_0(String meetingUUID) throws IllegalArgumentException {
        if (meetingUUID == null) throw new IllegalArgumentException("\"meetingUUID\" is required but got null");
            

        return new MeetingFilesList0RequestBuilder(meetingUUID);
    }
    private okhttp3.Call updateAutoDeleteStatusCall(String fileId, ArchivingUpdateAutoDeleteStatusRequest archivingUpdateAutoDeleteStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = archivingUpdateAutoDeleteStatusRequest;

        // create path and map variables
        String localVarPath = "/archive_files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAutoDeleteStatusValidateBeforeCall(String fileId, ArchivingUpdateAutoDeleteStatusRequest archivingUpdateAutoDeleteStatusRequest, final ApiCallback _callback) throws ApiException {
        return updateAutoDeleteStatusCall(fileId, archivingUpdateAutoDeleteStatusRequest, _callback);

    }


    private ApiResponse<Void> updateAutoDeleteStatusWithHttpInfo(String fileId, ArchivingUpdateAutoDeleteStatusRequest archivingUpdateAutoDeleteStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAutoDeleteStatusValidateBeforeCall(fileId, archivingUpdateAutoDeleteStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateAutoDeleteStatusAsync(String fileId, ArchivingUpdateAutoDeleteStatusRequest archivingUpdateAutoDeleteStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAutoDeleteStatusValidateBeforeCall(fileId, archivingUpdateAutoDeleteStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateAutoDeleteStatusRequestBuilder {
        private final Boolean autoDelete;
        private String fileId;

        private UpdateAutoDeleteStatusRequestBuilder(Boolean autoDelete) {
            this.autoDelete = autoDelete;
        }

        /**
         * Set fileId
         * @param fileId  (optional)
         * @return UpdateAutoDeleteStatusRequestBuilder
         */
        public UpdateAutoDeleteStatusRequestBuilder fileId(String fileId) {
            this.fileId = fileId;
            return this;
        }
        
        /**
         * Build call for updateAutoDeleteStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ArchivingUpdateAutoDeleteStatusRequest archivingUpdateAutoDeleteStatusRequest = buildBodyParams();
            return updateAutoDeleteStatusCall(fileId, archivingUpdateAutoDeleteStatusRequest, _callback);
        }

        private ArchivingUpdateAutoDeleteStatusRequest buildBodyParams() {
            ArchivingUpdateAutoDeleteStatusRequest archivingUpdateAutoDeleteStatusRequest = new ArchivingUpdateAutoDeleteStatusRequest();
            archivingUpdateAutoDeleteStatusRequest.autoDelete(this.autoDelete);
            return archivingUpdateAutoDeleteStatusRequest;
        }

        /**
         * Execute updateAutoDeleteStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ArchivingUpdateAutoDeleteStatusRequest archivingUpdateAutoDeleteStatusRequest = buildBodyParams();
            updateAutoDeleteStatusWithHttpInfo(fileId, archivingUpdateAutoDeleteStatusRequest);
        }

        /**
         * Execute updateAutoDeleteStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ArchivingUpdateAutoDeleteStatusRequest archivingUpdateAutoDeleteStatusRequest = buildBodyParams();
            return updateAutoDeleteStatusWithHttpInfo(fileId, archivingUpdateAutoDeleteStatusRequest);
        }

        /**
         * Execute updateAutoDeleteStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ArchivingUpdateAutoDeleteStatusRequest archivingUpdateAutoDeleteStatusRequest = buildBodyParams();
            return updateAutoDeleteStatusAsync(fileId, archivingUpdateAutoDeleteStatusRequest, _callback);
        }
    }

    /**
     * Update an archived file&#39;s auto-delete status
     * Update an archived file&#39;s auto-delete status.    **Prerequisites:**  * [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) must enable the [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) for your account. * Open the disabling auto-delete feature in OP. Contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) to open.  **Scopes:** &#x60;recording:write&#x60;,&#x60;recording:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @return UpdateAutoDeleteStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAutoDeleteStatusRequestBuilder updateAutoDeleteStatus(Boolean autoDelete) throws IllegalArgumentException {
        if (autoDelete == null) throw new IllegalArgumentException("\"autoDelete\" is required but got null");
        return new UpdateAutoDeleteStatusRequestBuilder(autoDelete);
    }
}
