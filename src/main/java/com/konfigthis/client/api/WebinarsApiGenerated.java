/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.RecurrenceWebinarProperty;
import java.net.URI;
import com.konfigthis.client.model.WebinarsAddPanelistsRequest;
import com.konfigthis.client.model.WebinarsAddPanelistsRequestPanelistsInner;
import com.konfigthis.client.model.WebinarsAddPanelistsResponse;
import com.konfigthis.client.model.WebinarsAddRegistrantRequest;
import com.konfigthis.client.model.WebinarsAddRegistrantRequestCustomQuestionsInner;
import com.konfigthis.client.model.WebinarsAddRegistrantResponse;
import com.konfigthis.client.model.WebinarsCreateBatchRegistrantsRequest;
import com.konfigthis.client.model.WebinarsCreateBatchRegistrantsRequestRegistrantsInner;
import com.konfigthis.client.model.WebinarsCreateBatchRegistrantsResponse;
import com.konfigthis.client.model.WebinarsCreateBrandingNameTagRequest;
import com.konfigthis.client.model.WebinarsCreateBrandingNameTagResponse;
import com.konfigthis.client.model.WebinarsCreateInviteLinksRequest;
import com.konfigthis.client.model.WebinarsCreateInviteLinksRequestAttendeesInner;
import com.konfigthis.client.model.WebinarsCreateInviteLinksResponse;
import com.konfigthis.client.model.WebinarsCreatePollRequest;
import com.konfigthis.client.model.WebinarsCreatePollRequestQuestionsInner;
import com.konfigthis.client.model.WebinarsCreatePollResponse;
import com.konfigthis.client.model.WebinarsCreateWebinarRequest;
import com.konfigthis.client.model.WebinarsCreateWebinarRequestSettings;
import com.konfigthis.client.model.WebinarsCreateWebinarRequestTrackingFieldsInner;
import com.konfigthis.client.model.WebinarsCreateWebinarResponse;
import com.konfigthis.client.model.WebinarsCreateWebinarTemplateRequest;
import com.konfigthis.client.model.WebinarsCreateWebinarTemplateResponse;
import com.konfigthis.client.model.WebinarsGetDetailsResponse;
import com.konfigthis.client.model.WebinarsGetJoinTokenLocalRecordingResponse;
import com.konfigthis.client.model.WebinarsGetLiveStreamDetailsResponse;
import com.konfigthis.client.model.WebinarsGetMeetingArchiveTokenForLocalArchivingResponse;
import com.konfigthis.client.model.WebinarsGetPollDetailsResponse;
import com.konfigthis.client.model.WebinarsGetSessionBrandingResponse;
import com.konfigthis.client.model.WebinarsGetSipUriWithPasscodeRequest;
import com.konfigthis.client.model.WebinarsGetSipUriWithPasscodeResponse;
import com.konfigthis.client.model.WebinarsGetSurveyResponse;
import com.konfigthis.client.model.WebinarsGetWebinarTokenResponse;
import com.konfigthis.client.model.WebinarsJoinTokenLiveStreamingResponse;
import com.konfigthis.client.model.WebinarsListAbsenteesResponse;
import com.konfigthis.client.model.WebinarsListPanelistsResponse;
import com.konfigthis.client.model.WebinarsListParticipantsResponse;
import com.konfigthis.client.model.WebinarsListPastInstancesResponse;
import com.konfigthis.client.model.WebinarsListPastWebinarQaResponse;
import com.konfigthis.client.model.WebinarsListPollResultsResponse;
import com.konfigthis.client.model.WebinarsListPollsResponse;
import com.konfigthis.client.model.WebinarsListRegistrantsResponse;
import com.konfigthis.client.model.WebinarsListRegistrationQuestionsResponse;
import com.konfigthis.client.model.WebinarsListTrackingSourcesResponse;
import com.konfigthis.client.model.WebinarsListWebinarTemplatesResponse;
import com.konfigthis.client.model.WebinarsListWebinarsResponse;
import com.konfigthis.client.model.WebinarsRegistrantDetailsResponse;
import com.konfigthis.client.model.WebinarsUpdateBrandingNameTagRequest;
import com.konfigthis.client.model.WebinarsUpdateLiveStreamRequest;
import com.konfigthis.client.model.WebinarsUpdateLiveStreamStatusRequest;
import com.konfigthis.client.model.WebinarsUpdateLiveStreamStatusRequestSettings;
import com.konfigthis.client.model.WebinarsUpdatePollRequest;
import com.konfigthis.client.model.WebinarsUpdatePollRequestQuestionsInner;
import com.konfigthis.client.model.WebinarsUpdateRegistrantStatusRequest;
import com.konfigthis.client.model.WebinarsUpdateRegistrantStatusRequestRegistrantsInner;
import com.konfigthis.client.model.WebinarsUpdateRegistrationQuestionsRequest;
import com.konfigthis.client.model.WebinarsUpdateRegistrationQuestionsRequestCustomQuestionsInner;
import com.konfigthis.client.model.WebinarsUpdateRegistrationQuestionsRequestQuestionsInner;
import com.konfigthis.client.model.WebinarsUpdateScheduledWebinarRequest;
import com.konfigthis.client.model.WebinarsUpdateScheduledWebinarRequestRecurrence;
import com.konfigthis.client.model.WebinarsUpdateScheduledWebinarRequestSettings;
import com.konfigthis.client.model.WebinarsUpdateScheduledWebinarRequestTrackingFieldsInner;
import com.konfigthis.client.model.WebinarsUpdateStatusRequest;
import com.konfigthis.client.model.WebinarsUpdateSurveyRequest;
import com.konfigthis.client.model.WebinarsUpdateSurveyRequestCustomSurvey;
import com.konfigthis.client.model.WebinarsUploadBrandingVirtualBackgroundRequest;
import com.konfigthis.client.model.WebinarsUploadBrandingVirtualBackgroundResponse;
import com.konfigthis.client.model.WebinarsUploadBrandingWallpaperRequest;
import com.konfigthis.client.model.WebinarsUploadBrandingWallpaperResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebinarsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebinarsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebinarsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getOpenapiAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setOpenapiAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addPanelistsCall(Long webinarId, WebinarsAddPanelistsRequest webinarsAddPanelistsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsAddPanelistsRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/panelists"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPanelistsValidateBeforeCall(Long webinarId, WebinarsAddPanelistsRequest webinarsAddPanelistsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling addPanelists(Async)");
        }

        return addPanelistsCall(webinarId, webinarsAddPanelistsRequest, _callback);

    }


    private ApiResponse<WebinarsAddPanelistsResponse> addPanelistsWithHttpInfo(Long webinarId, WebinarsAddPanelistsRequest webinarsAddPanelistsRequest) throws ApiException {
        okhttp3.Call localVarCall = addPanelistsValidateBeforeCall(webinarId, webinarsAddPanelistsRequest, null);
        Type localVarReturnType = new TypeToken<WebinarsAddPanelistsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPanelistsAsync(Long webinarId, WebinarsAddPanelistsRequest webinarsAddPanelistsRequest, final ApiCallback<WebinarsAddPanelistsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPanelistsValidateBeforeCall(webinarId, webinarsAddPanelistsRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarsAddPanelistsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPanelistsRequestBuilder {
        private final Long webinarId;
        private List<WebinarsAddPanelistsRequestPanelistsInner> panelists;

        private AddPanelistsRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set panelists
         * @param panelists List of panelist objects. (optional)
         * @return AddPanelistsRequestBuilder
         */
        public AddPanelistsRequestBuilder panelists(List<WebinarsAddPanelistsRequestPanelistsInner> panelists) {
            this.panelists = panelists;
            return this;
        }
        
        /**
         * Build call for addPanelists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Panelist created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of panelists you can add. Contact Zoom Support for more information.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsAddPanelistsRequest webinarsAddPanelistsRequest = buildBodyParams();
            return addPanelistsCall(webinarId, webinarsAddPanelistsRequest, _callback);
        }

        private WebinarsAddPanelistsRequest buildBodyParams() {
            WebinarsAddPanelistsRequest webinarsAddPanelistsRequest = new WebinarsAddPanelistsRequest();
            webinarsAddPanelistsRequest.panelists(this.panelists);
            return webinarsAddPanelistsRequest;
        }

        /**
         * Execute addPanelists request
         * @return WebinarsAddPanelistsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Panelist created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of panelists you can add. Contact Zoom Support for more information.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsAddPanelistsResponse execute() throws ApiException {
            WebinarsAddPanelistsRequest webinarsAddPanelistsRequest = buildBodyParams();
            ApiResponse<WebinarsAddPanelistsResponse> localVarResp = addPanelistsWithHttpInfo(webinarId, webinarsAddPanelistsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPanelists request with HTTP info returned
         * @return ApiResponse&lt;WebinarsAddPanelistsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Panelist created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of panelists you can add. Contact Zoom Support for more information.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsAddPanelistsResponse> executeWithHttpInfo() throws ApiException {
            WebinarsAddPanelistsRequest webinarsAddPanelistsRequest = buildBodyParams();
            return addPanelistsWithHttpInfo(webinarId, webinarsAddPanelistsRequest);
        }

        /**
         * Execute addPanelists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Panelist created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of panelists you can add. Contact Zoom Support for more information.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsAddPanelistsResponse> _callback) throws ApiException {
            WebinarsAddPanelistsRequest webinarsAddPanelistsRequest = buildBodyParams();
            return addPanelistsAsync(webinarId, webinarsAddPanelistsRequest, _callback);
        }
    }

    /**
     * Add panelists
     * Panelists in a webinar can view and send video, screen share, annotate, and do much more compared to attendees in a webinar.    [Add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.           **Prerequisites:** * Pro or a higher plan with the [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return AddPanelistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Panelist created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of panelists you can add. Contact Zoom Support for more information.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
     </table>
     */
    public AddPanelistsRequestBuilder addPanelists(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new AddPanelistsRequestBuilder(webinarId);
    }
    private okhttp3.Call addRegistrantCall(Long webinarId, String occurrenceIds, WebinarsAddRegistrantRequest webinarsAddRegistrantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsAddRegistrantRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/registrants"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_ids", occurrenceIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRegistrantValidateBeforeCall(Long webinarId, String occurrenceIds, WebinarsAddRegistrantRequest webinarsAddRegistrantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling addRegistrant(Async)");
        }

        return addRegistrantCall(webinarId, occurrenceIds, webinarsAddRegistrantRequest, _callback);

    }


    private ApiResponse<WebinarsAddRegistrantResponse> addRegistrantWithHttpInfo(Long webinarId, String occurrenceIds, WebinarsAddRegistrantRequest webinarsAddRegistrantRequest) throws ApiException {
        okhttp3.Call localVarCall = addRegistrantValidateBeforeCall(webinarId, occurrenceIds, webinarsAddRegistrantRequest, null);
        Type localVarReturnType = new TypeToken<WebinarsAddRegistrantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addRegistrantAsync(Long webinarId, String occurrenceIds, WebinarsAddRegistrantRequest webinarsAddRegistrantRequest, final ApiCallback<WebinarsAddRegistrantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRegistrantValidateBeforeCall(webinarId, occurrenceIds, webinarsAddRegistrantRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarsAddRegistrantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddRegistrantRequestBuilder {
        private final String firstName;
        private final String email;
        private final Long webinarId;
        private String lastName;
        private String address;
        private String city;
        private String state;
        private String zip;
        private String country;
        private String phone;
        private String comments;
        private List<WebinarsAddRegistrantRequestCustomQuestionsInner> customQuestions;
        private String industry;
        private String jobTitle;
        private String noOfEmployees;
        private String org;
        private String purchasingTimeFrame;
        private String roleInPurchaseProcess;
        private String language;
        private String sourceId;
        private String occurrenceIds;

        private AddRegistrantRequestBuilder(String firstName, String email, Long webinarId) {
            this.firstName = firstName;
            this.email = email;
            this.webinarId = webinarId;
        }

        /**
         * Set lastName
         * @param lastName The registrant&#39;s last name. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set address
         * @param address The registrant&#39;s address. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set city
         * @param city The registrant&#39;s city. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state The registrant&#39;s state or province. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zip
         * @param zip The registrant&#39;s ZIP or postal code. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set country
         * @param country The registrant&#39;s two-letter [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries). (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set phone
         * @param phone The registrant&#39;s phone number. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set comments
         * @param comments The registrant&#39;s questions and comments. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Set customQuestions
         * @param customQuestions Information about custom questions. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder customQuestions(List<WebinarsAddRegistrantRequestCustomQuestionsInner> customQuestions) {
            this.customQuestions = customQuestions;
            return this;
        }
        
        /**
         * Set industry
         * @param industry The registrant&#39;s industry. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder industry(String industry) {
            this.industry = industry;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle The registrant&#39;s job title. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set noOfEmployees
         * @param noOfEmployees The registrant&#39;s number of employees:  * &#x60;1-20&#x60;  * &#x60;21-50&#x60;  * &#x60;51-100&#x60;  * &#x60;101-500&#x60;  * &#x60;500-1,000&#x60;  * &#x60;1,001-5,000&#x60;  * &#x60;5,001-10,000&#x60;  * &#x60;More than 10,000&#x60; (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder noOfEmployees(String noOfEmployees) {
            this.noOfEmployees = noOfEmployees;
            return this;
        }
        
        /**
         * Set org
         * @param org The registrant&#39;s organization. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder org(String org) {
            this.org = org;
            return this;
        }
        
        /**
         * Set purchasingTimeFrame
         * @param purchasingTimeFrame The registrant&#39;s purchasing time frame:  * &#x60;Within a month&#x60;  * &#x60;1-3 months&#x60;  * &#x60;4-6 months&#x60;  * &#x60;More than 6 months&#x60;  * &#x60;No timeframe&#x60; (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder purchasingTimeFrame(String purchasingTimeFrame) {
            this.purchasingTimeFrame = purchasingTimeFrame;
            return this;
        }
        
        /**
         * Set roleInPurchaseProcess
         * @param roleInPurchaseProcess The registrant&#39;s role in the purchase process:  * &#x60;Decision Maker&#x60;  * &#x60;Evaluator/Recommender&#x60;  * &#x60;Influencer&#x60;  * &#x60;Not involved&#x60; (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder roleInPurchaseProcess(String roleInPurchaseProcess) {
            this.roleInPurchaseProcess = roleInPurchaseProcess;
            return this;
        }
        
        /**
         * Set language
         * @param language The registrant&#39;s language preference for confirmation emails:  * &#x60;en-US&#x60; - English (US)  * &#x60;de-DE&#x60; - German (Germany)  * &#x60;es-ES&#x60; - Spanish (Spain)  * &#x60;fr-FR&#x60; - French (France)  * &#x60;jp-JP&#x60; - Japanese  * &#x60;pt-PT&#x60; - Portuguese (Portugal)  * &#x60;ru-RU&#x60; - Russian  * &#x60;zh-CN&#x60; - Chinese (PRC)  * &#x60;zh-TW&#x60; - Chinese (Taiwan)  * &#x60;ko-KO&#x60; - Korean  * &#x60;it-IT&#x60; - Italian (Italy)  * &#x60;vi-VN&#x60; - Vietnamese  * &#x60;pl-PL&#x60; - Polish  * &#x60;Tr-TR&#x60; - Turkish (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set sourceId
         * @param sourceId The tracking source&#39;s unique identifier. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder sourceId(String sourceId) {
            this.sourceId = sourceId;
            return this;
        }
        
        /**
         * Set occurrenceIds
         * @param occurrenceIds A comma-separated list of webinar occurrence IDs. Get this value with the [Get a webinar](https://developers.zoom.us) API. Make sure the &#x60;registration_type&#x60; is 3 if updating multiple occurrences with this API. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder occurrenceIds(String occurrenceIds) {
            this.occurrenceIds = occurrenceIds;
            return this;
        }
        
        /**
         * Build call for addRegistrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar registration created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  This webinar does not have registration as required: {webinarId}. &lt;br&gt; **Error Code:** &#x60;3027&#x60; &lt;br&gt;  Host cannot register. &lt;br&gt; **Error Code:** &#x60;3034&#x60; &lt;br&gt;  If you have been invited, please input your work email address. &lt;br&gt; **Error Code:** &#x60;3038&#x60; &lt;br&gt;  Webinar is over, you cannot register now. If you have any questions, contact the webinar host. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The Zoom REST API does not support paid registration. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User \&quot;{userId}\&quot; does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar \&quot;{webinarId}\&quot; not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsAddRegistrantRequest webinarsAddRegistrantRequest = buildBodyParams();
            return addRegistrantCall(webinarId, occurrenceIds, webinarsAddRegistrantRequest, _callback);
        }

        private WebinarsAddRegistrantRequest buildBodyParams() {
            WebinarsAddRegistrantRequest webinarsAddRegistrantRequest = new WebinarsAddRegistrantRequest();
            webinarsAddRegistrantRequest.firstName(this.firstName);
            webinarsAddRegistrantRequest.lastName(this.lastName);
            webinarsAddRegistrantRequest.email(this.email);
            webinarsAddRegistrantRequest.address(this.address);
            webinarsAddRegistrantRequest.city(this.city);
            webinarsAddRegistrantRequest.state(this.state);
            webinarsAddRegistrantRequest.zip(this.zip);
            webinarsAddRegistrantRequest.country(this.country);
            webinarsAddRegistrantRequest.phone(this.phone);
            webinarsAddRegistrantRequest.comments(this.comments);
            webinarsAddRegistrantRequest.customQuestions(this.customQuestions);
            webinarsAddRegistrantRequest.industry(this.industry);
            webinarsAddRegistrantRequest.jobTitle(this.jobTitle);
            if (this.noOfEmployees != null)
            webinarsAddRegistrantRequest.noOfEmployees(WebinarsAddRegistrantRequest.NoOfEmployeesEnum.fromValue(this.noOfEmployees));
            webinarsAddRegistrantRequest.org(this.org);
            if (this.purchasingTimeFrame != null)
            webinarsAddRegistrantRequest.purchasingTimeFrame(WebinarsAddRegistrantRequest.PurchasingTimeFrameEnum.fromValue(this.purchasingTimeFrame));
            if (this.roleInPurchaseProcess != null)
            webinarsAddRegistrantRequest.roleInPurchaseProcess(WebinarsAddRegistrantRequest.RoleInPurchaseProcessEnum.fromValue(this.roleInPurchaseProcess));
            if (this.language != null)
            webinarsAddRegistrantRequest.language(WebinarsAddRegistrantRequest.LanguageEnum.fromValue(this.language));
            webinarsAddRegistrantRequest.sourceId(this.sourceId);
            return webinarsAddRegistrantRequest;
        }

        /**
         * Execute addRegistrant request
         * @return WebinarsAddRegistrantResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar registration created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  This webinar does not have registration as required: {webinarId}. &lt;br&gt; **Error Code:** &#x60;3027&#x60; &lt;br&gt;  Host cannot register. &lt;br&gt; **Error Code:** &#x60;3034&#x60; &lt;br&gt;  If you have been invited, please input your work email address. &lt;br&gt; **Error Code:** &#x60;3038&#x60; &lt;br&gt;  Webinar is over, you cannot register now. If you have any questions, contact the webinar host. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The Zoom REST API does not support paid registration. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User \&quot;{userId}\&quot; does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar \&quot;{webinarId}\&quot; not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsAddRegistrantResponse execute() throws ApiException {
            WebinarsAddRegistrantRequest webinarsAddRegistrantRequest = buildBodyParams();
            ApiResponse<WebinarsAddRegistrantResponse> localVarResp = addRegistrantWithHttpInfo(webinarId, occurrenceIds, webinarsAddRegistrantRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addRegistrant request with HTTP info returned
         * @return ApiResponse&lt;WebinarsAddRegistrantResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar registration created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  This webinar does not have registration as required: {webinarId}. &lt;br&gt; **Error Code:** &#x60;3027&#x60; &lt;br&gt;  Host cannot register. &lt;br&gt; **Error Code:** &#x60;3034&#x60; &lt;br&gt;  If you have been invited, please input your work email address. &lt;br&gt; **Error Code:** &#x60;3038&#x60; &lt;br&gt;  Webinar is over, you cannot register now. If you have any questions, contact the webinar host. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The Zoom REST API does not support paid registration. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User \&quot;{userId}\&quot; does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar \&quot;{webinarId}\&quot; not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsAddRegistrantResponse> executeWithHttpInfo() throws ApiException {
            WebinarsAddRegistrantRequest webinarsAddRegistrantRequest = buildBodyParams();
            return addRegistrantWithHttpInfo(webinarId, occurrenceIds, webinarsAddRegistrantRequest);
        }

        /**
         * Execute addRegistrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar registration created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  This webinar does not have registration as required: {webinarId}. &lt;br&gt; **Error Code:** &#x60;3027&#x60; &lt;br&gt;  Host cannot register. &lt;br&gt; **Error Code:** &#x60;3034&#x60; &lt;br&gt;  If you have been invited, please input your work email address. &lt;br&gt; **Error Code:** &#x60;3038&#x60; &lt;br&gt;  Webinar is over, you cannot register now. If you have any questions, contact the webinar host. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The Zoom REST API does not support paid registration. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User \&quot;{userId}\&quot; does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar \&quot;{webinarId}\&quot; not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsAddRegistrantResponse> _callback) throws ApiException {
            WebinarsAddRegistrantRequest webinarsAddRegistrantRequest = buildBodyParams();
            return addRegistrantAsync(webinarId, occurrenceIds, webinarsAddRegistrantRequest, _callback);
        }
    }

    /**
     * Add a webinar registrant
     * Create and submit a user&#39;s registration for a webinar. Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow hosts to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return AddRegistrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar registration created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  This webinar does not have registration as required: {webinarId}. &lt;br&gt; **Error Code:** &#x60;3027&#x60; &lt;br&gt;  Host cannot register. &lt;br&gt; **Error Code:** &#x60;3034&#x60; &lt;br&gt;  If you have been invited, please input your work email address. &lt;br&gt; **Error Code:** &#x60;3038&#x60; &lt;br&gt;  Webinar is over, you cannot register now. If you have any questions, contact the webinar host. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The Zoom REST API does not support paid registration. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User \&quot;{userId}\&quot; does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar \&quot;{webinarId}\&quot; not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
     </table>
     */
    public AddRegistrantRequestBuilder addRegistrant(String firstName, String email, Long webinarId) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new AddRegistrantRequestBuilder(firstName, email, webinarId);
    }
    private okhttp3.Call createBatchRegistrantsCall(String webinarId, WebinarsCreateBatchRegistrantsRequest webinarsCreateBatchRegistrantsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsCreateBatchRegistrantsRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/batch_registrants"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBatchRegistrantsValidateBeforeCall(String webinarId, WebinarsCreateBatchRegistrantsRequest webinarsCreateBatchRegistrantsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling createBatchRegistrants(Async)");
        }

        return createBatchRegistrantsCall(webinarId, webinarsCreateBatchRegistrantsRequest, _callback);

    }


    private ApiResponse<WebinarsCreateBatchRegistrantsResponse> createBatchRegistrantsWithHttpInfo(String webinarId, WebinarsCreateBatchRegistrantsRequest webinarsCreateBatchRegistrantsRequest) throws ApiException {
        okhttp3.Call localVarCall = createBatchRegistrantsValidateBeforeCall(webinarId, webinarsCreateBatchRegistrantsRequest, null);
        Type localVarReturnType = new TypeToken<WebinarsCreateBatchRegistrantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBatchRegistrantsAsync(String webinarId, WebinarsCreateBatchRegistrantsRequest webinarsCreateBatchRegistrantsRequest, final ApiCallback<WebinarsCreateBatchRegistrantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBatchRegistrantsValidateBeforeCall(webinarId, webinarsCreateBatchRegistrantsRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarsCreateBatchRegistrantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBatchRegistrantsRequestBuilder {
        private final String webinarId;
        private Boolean autoApprove;
        private List<WebinarsCreateBatchRegistrantsRequestRegistrantsInner> registrants;

        private CreateBatchRegistrantsRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set autoApprove
         * @param autoApprove If a meeting was scheduled with approval_type &#x60;1&#x60; (manual approval), but you want to automatically approve registrants added via this API, set the value of this field to &#x60;true&#x60;.   You **cannot** use this field to change approval setting for a meeting that was originally scheduled with approval_type &#x60;0&#x60; (automatic approval). (optional)
         * @return CreateBatchRegistrantsRequestBuilder
         */
        public CreateBatchRegistrantsRequestBuilder autoApprove(Boolean autoApprove) {
            this.autoApprove = autoApprove;
            return this;
        }
        
        /**
         * Set registrants
         * @param registrants  (optional)
         * @return CreateBatchRegistrantsRequestBuilder
         */
        public CreateBatchRegistrantsRequestBuilder registrants(List<WebinarsCreateBatchRegistrantsRequestRegistrantsInner> registrants) {
            this.registrants = registrants;
            return this;
        }
        
        /**
         * Build call for createBatchRegistrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      Registrants added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the Webinar plan and enable webinars for the \&quot;{0}\&quot; user to perform this action. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  This API can only be used for scheduled webinars (type 5). Batch registration is not supported for other webinar types. &lt;br&gt; **Error Code:** &#x60;3038&#x60; &lt;br&gt;  The webinar is over. You cannot register now. If you have any questions, contact the Webinar host. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Registration not enabled for this webinar: {0} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The Zoom REST API does not support paid registration. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {0}.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3043&#x60; &lt;br&gt;  Webinar has reached maximum attendee capacity.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;404&#x60; &lt;br&gt;  Registration has not been enabled for this meeting: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsCreateBatchRegistrantsRequest webinarsCreateBatchRegistrantsRequest = buildBodyParams();
            return createBatchRegistrantsCall(webinarId, webinarsCreateBatchRegistrantsRequest, _callback);
        }

        private WebinarsCreateBatchRegistrantsRequest buildBodyParams() {
            WebinarsCreateBatchRegistrantsRequest webinarsCreateBatchRegistrantsRequest = new WebinarsCreateBatchRegistrantsRequest();
            webinarsCreateBatchRegistrantsRequest.autoApprove(this.autoApprove);
            webinarsCreateBatchRegistrantsRequest.registrants(this.registrants);
            return webinarsCreateBatchRegistrantsRequest;
        }

        /**
         * Execute createBatchRegistrants request
         * @return WebinarsCreateBatchRegistrantsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      Registrants added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the Webinar plan and enable webinars for the \&quot;{0}\&quot; user to perform this action. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  This API can only be used for scheduled webinars (type 5). Batch registration is not supported for other webinar types. &lt;br&gt; **Error Code:** &#x60;3038&#x60; &lt;br&gt;  The webinar is over. You cannot register now. If you have any questions, contact the Webinar host. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Registration not enabled for this webinar: {0} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The Zoom REST API does not support paid registration. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {0}.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3043&#x60; &lt;br&gt;  Webinar has reached maximum attendee capacity.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;404&#x60; &lt;br&gt;  Registration has not been enabled for this meeting: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsCreateBatchRegistrantsResponse execute() throws ApiException {
            WebinarsCreateBatchRegistrantsRequest webinarsCreateBatchRegistrantsRequest = buildBodyParams();
            ApiResponse<WebinarsCreateBatchRegistrantsResponse> localVarResp = createBatchRegistrantsWithHttpInfo(webinarId, webinarsCreateBatchRegistrantsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBatchRegistrants request with HTTP info returned
         * @return ApiResponse&lt;WebinarsCreateBatchRegistrantsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      Registrants added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the Webinar plan and enable webinars for the \&quot;{0}\&quot; user to perform this action. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  This API can only be used for scheduled webinars (type 5). Batch registration is not supported for other webinar types. &lt;br&gt; **Error Code:** &#x60;3038&#x60; &lt;br&gt;  The webinar is over. You cannot register now. If you have any questions, contact the Webinar host. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Registration not enabled for this webinar: {0} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The Zoom REST API does not support paid registration. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {0}.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3043&#x60; &lt;br&gt;  Webinar has reached maximum attendee capacity.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;404&#x60; &lt;br&gt;  Registration has not been enabled for this meeting: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsCreateBatchRegistrantsResponse> executeWithHttpInfo() throws ApiException {
            WebinarsCreateBatchRegistrantsRequest webinarsCreateBatchRegistrantsRequest = buildBodyParams();
            return createBatchRegistrantsWithHttpInfo(webinarId, webinarsCreateBatchRegistrantsRequest);
        }

        /**
         * Execute createBatchRegistrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      Registrants added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the Webinar plan and enable webinars for the \&quot;{0}\&quot; user to perform this action. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  This API can only be used for scheduled webinars (type 5). Batch registration is not supported for other webinar types. &lt;br&gt; **Error Code:** &#x60;3038&#x60; &lt;br&gt;  The webinar is over. You cannot register now. If you have any questions, contact the Webinar host. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Registration not enabled for this webinar: {0} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The Zoom REST API does not support paid registration. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {0}.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3043&#x60; &lt;br&gt;  Webinar has reached maximum attendee capacity.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;404&#x60; &lt;br&gt;  Registration has not been enabled for this meeting: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsCreateBatchRegistrantsResponse> _callback) throws ApiException {
            WebinarsCreateBatchRegistrantsRequest webinarsCreateBatchRegistrantsRequest = buildBodyParams();
            return createBatchRegistrantsAsync(webinarId, webinarsCreateBatchRegistrantsRequest, _callback);
        }
    }

    /**
     * Perform batch registration
     * Register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration).       **Prerequisites:**     * The webinar host must be a licensed user. * The webinar should be type &#x60;5&#x60;, a scheduled webinar. Other types of webinars are not supported by this API.            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     * @param webinarId The webinar&#39;s unique identifier. (required)
     * @return CreateBatchRegistrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      Registrants added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the Webinar plan and enable webinars for the \&quot;{0}\&quot; user to perform this action. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  This API can only be used for scheduled webinars (type 5). Batch registration is not supported for other webinar types. &lt;br&gt; **Error Code:** &#x60;3038&#x60; &lt;br&gt;  The webinar is over. You cannot register now. If you have any questions, contact the Webinar host. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Registration not enabled for this webinar: {0} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The Zoom REST API does not support paid registration. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {0}.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3043&#x60; &lt;br&gt;  Webinar has reached maximum attendee capacity.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;404&#x60; &lt;br&gt;  Registration has not been enabled for this meeting: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
     </table>
     */
    public CreateBatchRegistrantsRequestBuilder createBatchRegistrants(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new CreateBatchRegistrantsRequestBuilder(webinarId);
    }
    private okhttp3.Call createBrandingNameTagCall(Long webinarId, WebinarsCreateBrandingNameTagRequest webinarsCreateBrandingNameTagRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsCreateBrandingNameTagRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/branding/name_tags"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBrandingNameTagValidateBeforeCall(Long webinarId, WebinarsCreateBrandingNameTagRequest webinarsCreateBrandingNameTagRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling createBrandingNameTag(Async)");
        }

        return createBrandingNameTagCall(webinarId, webinarsCreateBrandingNameTagRequest, _callback);

    }


    private ApiResponse<WebinarsCreateBrandingNameTagResponse> createBrandingNameTagWithHttpInfo(Long webinarId, WebinarsCreateBrandingNameTagRequest webinarsCreateBrandingNameTagRequest) throws ApiException {
        okhttp3.Call localVarCall = createBrandingNameTagValidateBeforeCall(webinarId, webinarsCreateBrandingNameTagRequest, null);
        Type localVarReturnType = new TypeToken<WebinarsCreateBrandingNameTagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBrandingNameTagAsync(Long webinarId, WebinarsCreateBrandingNameTagRequest webinarsCreateBrandingNameTagRequest, final ApiCallback<WebinarsCreateBrandingNameTagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBrandingNameTagValidateBeforeCall(webinarId, webinarsCreateBrandingNameTagRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarsCreateBrandingNameTagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBrandingNameTagRequestBuilder {
        private final String name;
        private final String textColor;
        private final String accentColor;
        private final String backgroundColor;
        private final Long webinarId;
        private Boolean isDefault;
        private Boolean setDefaultForAllPanelists;

        private CreateBrandingNameTagRequestBuilder(String name, String textColor, String accentColor, String backgroundColor, Long webinarId) {
            this.name = name;
            this.textColor = textColor;
            this.accentColor = accentColor;
            this.backgroundColor = backgroundColor;
            this.webinarId = webinarId;
        }

        /**
         * Set isDefault
         * @param isDefault Whether set the name tag as the default name tag or not. (optional, default to false)
         * @return CreateBrandingNameTagRequestBuilder
         */
        public CreateBrandingNameTagRequestBuilder isDefault(Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        
        /**
         * Set setDefaultForAllPanelists
         * @param setDefaultForAllPanelists Whether to set the name tag as the new default for all panelists or not. This includes panelists not currently assigned a default name tag. (optional, default to true)
         * @return CreateBrandingNameTagRequestBuilder
         */
        public CreateBrandingNameTagRequestBuilder setDefaultForAllPanelists(Boolean setDefaultForAllPanelists) {
            this.setDefaultForAllPanelists = setDefaultForAllPanelists;
            return this;
        }
        
        /**
         * Build call for createBrandingNameTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Name tag created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.&lt;br&gt; You have reached the limit for the number of name tags you can add for this webinar. The limit is 20.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsCreateBrandingNameTagRequest webinarsCreateBrandingNameTagRequest = buildBodyParams();
            return createBrandingNameTagCall(webinarId, webinarsCreateBrandingNameTagRequest, _callback);
        }

        private WebinarsCreateBrandingNameTagRequest buildBodyParams() {
            WebinarsCreateBrandingNameTagRequest webinarsCreateBrandingNameTagRequest = new WebinarsCreateBrandingNameTagRequest();
            webinarsCreateBrandingNameTagRequest.name(this.name);
            webinarsCreateBrandingNameTagRequest.textColor(this.textColor);
            webinarsCreateBrandingNameTagRequest.accentColor(this.accentColor);
            webinarsCreateBrandingNameTagRequest.backgroundColor(this.backgroundColor);
            webinarsCreateBrandingNameTagRequest.isDefault(this.isDefault);
            webinarsCreateBrandingNameTagRequest.setDefaultForAllPanelists(this.setDefaultForAllPanelists);
            return webinarsCreateBrandingNameTagRequest;
        }

        /**
         * Execute createBrandingNameTag request
         * @return WebinarsCreateBrandingNameTagResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Name tag created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.&lt;br&gt; You have reached the limit for the number of name tags you can add for this webinar. The limit is 20.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsCreateBrandingNameTagResponse execute() throws ApiException {
            WebinarsCreateBrandingNameTagRequest webinarsCreateBrandingNameTagRequest = buildBodyParams();
            ApiResponse<WebinarsCreateBrandingNameTagResponse> localVarResp = createBrandingNameTagWithHttpInfo(webinarId, webinarsCreateBrandingNameTagRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBrandingNameTag request with HTTP info returned
         * @return ApiResponse&lt;WebinarsCreateBrandingNameTagResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Name tag created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.&lt;br&gt; You have reached the limit for the number of name tags you can add for this webinar. The limit is 20.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsCreateBrandingNameTagResponse> executeWithHttpInfo() throws ApiException {
            WebinarsCreateBrandingNameTagRequest webinarsCreateBrandingNameTagRequest = buildBodyParams();
            return createBrandingNameTagWithHttpInfo(webinarId, webinarsCreateBrandingNameTagRequest);
        }

        /**
         * Execute createBrandingNameTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Name tag created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.&lt;br&gt; You have reached the limit for the number of name tags you can add for this webinar. The limit is 20.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsCreateBrandingNameTagResponse> _callback) throws ApiException {
            WebinarsCreateBrandingNameTagRequest webinarsCreateBrandingNameTagRequest = buildBodyParams();
            return createBrandingNameTagAsync(webinarId, webinarsCreateBrandingNameTagRequest, _callback);
        }
    }

    /**
     * Create a webinar&#39;s branding name tag
     * Use this API to create a webinar&#39;s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. There&#39;s a limit of 20 name tags per webinar. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return CreateBrandingNameTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Name tag created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.&lt;br&gt; You have reached the limit for the number of name tags you can add for this webinar. The limit is 20.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public CreateBrandingNameTagRequestBuilder createBrandingNameTag(String name, String textColor, String accentColor, String backgroundColor, Long webinarId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (textColor == null) throw new IllegalArgumentException("\"textColor\" is required but got null");
            

        if (accentColor == null) throw new IllegalArgumentException("\"accentColor\" is required but got null");
            

        if (backgroundColor == null) throw new IllegalArgumentException("\"backgroundColor\" is required but got null");
            

        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new CreateBrandingNameTagRequestBuilder(name, textColor, accentColor, backgroundColor, webinarId);
    }
    private okhttp3.Call createInviteLinksCall(Long webinarId, WebinarsCreateInviteLinksRequest webinarsCreateInviteLinksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsCreateInviteLinksRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/invite_links"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInviteLinksValidateBeforeCall(Long webinarId, WebinarsCreateInviteLinksRequest webinarsCreateInviteLinksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling createInviteLinks(Async)");
        }

        return createInviteLinksCall(webinarId, webinarsCreateInviteLinksRequest, _callback);

    }


    private ApiResponse<WebinarsCreateInviteLinksResponse> createInviteLinksWithHttpInfo(Long webinarId, WebinarsCreateInviteLinksRequest webinarsCreateInviteLinksRequest) throws ApiException {
        okhttp3.Call localVarCall = createInviteLinksValidateBeforeCall(webinarId, webinarsCreateInviteLinksRequest, null);
        Type localVarReturnType = new TypeToken<WebinarsCreateInviteLinksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInviteLinksAsync(Long webinarId, WebinarsCreateInviteLinksRequest webinarsCreateInviteLinksRequest, final ApiCallback<WebinarsCreateInviteLinksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInviteLinksValidateBeforeCall(webinarId, webinarsCreateInviteLinksRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarsCreateInviteLinksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInviteLinksRequestBuilder {
        private final Long webinarId;
        private List<WebinarsCreateInviteLinksRequestAttendeesInner> attendees;
        private Long ttl;

        private CreateInviteLinksRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set attendees
         * @param attendees The attendees list. (optional)
         * @return CreateInviteLinksRequestBuilder
         */
        public CreateInviteLinksRequestBuilder attendees(List<WebinarsCreateInviteLinksRequestAttendeesInner> attendees) {
            this.attendees = attendees;
            return this;
        }
        
        /**
         * Set ttl
         * @param ttl The invite link&#39;s expiration time, in seconds.   This value defaults to &#x60;7200&#x60;. (optional, default to 7200)
         * @return CreateInviteLinksRequestBuilder
         */
        public CreateInviteLinksRequestBuilder ttl(Long ttl) {
            this.ttl = ttl;
            return this;
        }
        
        /**
         * Build call for createInviteLinks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar Invite Links Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsCreateInviteLinksRequest webinarsCreateInviteLinksRequest = buildBodyParams();
            return createInviteLinksCall(webinarId, webinarsCreateInviteLinksRequest, _callback);
        }

        private WebinarsCreateInviteLinksRequest buildBodyParams() {
            WebinarsCreateInviteLinksRequest webinarsCreateInviteLinksRequest = new WebinarsCreateInviteLinksRequest();
            webinarsCreateInviteLinksRequest.attendees(this.attendees);
            webinarsCreateInviteLinksRequest.ttl(this.ttl);
            return webinarsCreateInviteLinksRequest;
        }

        /**
         * Execute createInviteLinks request
         * @return WebinarsCreateInviteLinksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar Invite Links Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsCreateInviteLinksResponse execute() throws ApiException {
            WebinarsCreateInviteLinksRequest webinarsCreateInviteLinksRequest = buildBodyParams();
            ApiResponse<WebinarsCreateInviteLinksResponse> localVarResp = createInviteLinksWithHttpInfo(webinarId, webinarsCreateInviteLinksRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInviteLinks request with HTTP info returned
         * @return ApiResponse&lt;WebinarsCreateInviteLinksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar Invite Links Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsCreateInviteLinksResponse> executeWithHttpInfo() throws ApiException {
            WebinarsCreateInviteLinksRequest webinarsCreateInviteLinksRequest = buildBodyParams();
            return createInviteLinksWithHttpInfo(webinarId, webinarsCreateInviteLinksRequest);
        }

        /**
         * Execute createInviteLinks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar Invite Links Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsCreateInviteLinksResponse> _callback) throws ApiException {
            WebinarsCreateInviteLinksRequest webinarsCreateInviteLinksRequest = buildBodyParams();
            return createInviteLinksAsync(webinarId, webinarsCreateInviteLinksRequest, _callback);
        }
    }

    /**
     * Create webinar&#39;s invite links
     * Create a batch of invitation links for a webinar.  **Prerequisites:**  * Business, Education or API Plan with the Webinar add-on.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return CreateInviteLinksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar Invite Links Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public CreateInviteLinksRequestBuilder createInviteLinks(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new CreateInviteLinksRequestBuilder(webinarId);
    }
    private okhttp3.Call createPollCall(Long webinarId, WebinarsCreatePollRequest webinarsCreatePollRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsCreatePollRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/polls"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPollValidateBeforeCall(Long webinarId, WebinarsCreatePollRequest webinarsCreatePollRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling createPoll(Async)");
        }

        return createPollCall(webinarId, webinarsCreatePollRequest, _callback);

    }


    private ApiResponse<WebinarsCreatePollResponse> createPollWithHttpInfo(Long webinarId, WebinarsCreatePollRequest webinarsCreatePollRequest) throws ApiException {
        okhttp3.Call localVarCall = createPollValidateBeforeCall(webinarId, webinarsCreatePollRequest, null);
        Type localVarReturnType = new TypeToken<WebinarsCreatePollResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPollAsync(Long webinarId, WebinarsCreatePollRequest webinarsCreatePollRequest, final ApiCallback<WebinarsCreatePollResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPollValidateBeforeCall(webinarId, webinarsCreatePollRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarsCreatePollResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePollRequestBuilder {
        private final Long webinarId;
        private String title;
        private Boolean anonymous;
        private Integer pollType;
        private List<WebinarsCreatePollRequestQuestionsInner> questions;

        private CreatePollRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set title
         * @param title The poll&#39;s title, up to 64 characters. (optional)
         * @return CreatePollRequestBuilder
         */
        public CreatePollRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set anonymous
         * @param anonymous Allow meeting participants to answer poll questions anonymously.   This value defaults to &#x60;false&#x60;. (optional, default to false)
         * @return CreatePollRequestBuilder
         */
        public CreatePollRequestBuilder anonymous(Boolean anonymous) {
            this.anonymous = anonymous;
            return this;
        }
        
        /**
         * Set pollType
         * @param pollType The type of poll.  * &#x60;1&#x60; - Poll.  * &#x60;2&#x60; - Advanced Poll. This feature must be enabled in your Zoom account.  * &#x60;3&#x60; - Quiz. This feature must be enabled in your Zoom account.    This value defaults to &#x60;1&#x60;. (optional)
         * @return CreatePollRequestBuilder
         */
        public CreatePollRequestBuilder pollType(Integer pollType) {
            this.pollType = pollType;
            return this;
        }
        
        /**
         * Set questions
         * @param questions Information about the poll&#39;s questions. (optional)
         * @return CreatePollRequestBuilder
         */
        public CreatePollRequestBuilder questions(List<WebinarsCreatePollRequestQuestionsInner> questions) {
            this.questions = questions;
            return this;
        }
        
        /**
         * Build call for createPoll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  * Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced webinar polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsCreatePollRequest webinarsCreatePollRequest = buildBodyParams();
            return createPollCall(webinarId, webinarsCreatePollRequest, _callback);
        }

        private WebinarsCreatePollRequest buildBodyParams() {
            WebinarsCreatePollRequest webinarsCreatePollRequest = new WebinarsCreatePollRequest();
            webinarsCreatePollRequest.title(this.title);
            webinarsCreatePollRequest.anonymous(this.anonymous);
            if (this.pollType != null)
            webinarsCreatePollRequest.pollType(WebinarsCreatePollRequest.PollTypeEnum.fromValue(this.pollType));
            webinarsCreatePollRequest.questions(this.questions);
            return webinarsCreatePollRequest;
        }

        /**
         * Execute createPoll request
         * @return WebinarsCreatePollResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  * Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced webinar polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsCreatePollResponse execute() throws ApiException {
            WebinarsCreatePollRequest webinarsCreatePollRequest = buildBodyParams();
            ApiResponse<WebinarsCreatePollResponse> localVarResp = createPollWithHttpInfo(webinarId, webinarsCreatePollRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPoll request with HTTP info returned
         * @return ApiResponse&lt;WebinarsCreatePollResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  * Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced webinar polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsCreatePollResponse> executeWithHttpInfo() throws ApiException {
            WebinarsCreatePollRequest webinarsCreatePollRequest = buildBodyParams();
            return createPollWithHttpInfo(webinarId, webinarsCreatePollRequest);
        }

        /**
         * Execute createPoll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  * Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced webinar polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsCreatePollResponse> _callback) throws ApiException {
            WebinarsCreatePollRequest webinarsCreatePollRequest = buildBodyParams();
            return createPollAsync(webinarId, webinarsCreatePollRequest, _callback);
        }
    }

    /**
     * Create a webinar&#39;s poll
     * Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return CreatePollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar Poll Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  * Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced webinar polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
     </table>
     */
    public CreatePollRequestBuilder createPoll(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new CreatePollRequestBuilder(webinarId);
    }
    private okhttp3.Call createWebinarCall(String userId, WebinarsCreateWebinarRequest webinarsCreateWebinarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsCreateWebinarRequest;

        // create path and map variables
        String localVarPath = "/users/{userId}/webinars"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebinarValidateBeforeCall(String userId, WebinarsCreateWebinarRequest webinarsCreateWebinarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createWebinar(Async)");
        }

        return createWebinarCall(userId, webinarsCreateWebinarRequest, _callback);

    }


    private ApiResponse<WebinarsCreateWebinarResponse> createWebinarWithHttpInfo(String userId, WebinarsCreateWebinarRequest webinarsCreateWebinarRequest) throws ApiException {
        okhttp3.Call localVarCall = createWebinarValidateBeforeCall(userId, webinarsCreateWebinarRequest, null);
        Type localVarReturnType = new TypeToken<WebinarsCreateWebinarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWebinarAsync(String userId, WebinarsCreateWebinarRequest webinarsCreateWebinarRequest, final ApiCallback<WebinarsCreateWebinarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebinarValidateBeforeCall(userId, webinarsCreateWebinarRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarsCreateWebinarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWebinarRequestBuilder {
        private final String userId;
        private String agenda;
        private Integer duration;
        private String password;
        private RecurrenceWebinarProperty recurrence;
        private String scheduleFor;
        private WebinarsCreateWebinarRequestSettings settings;
        private OffsetDateTime startTime;
        private String templateId;
        private String timezone;
        private String topic;
        private List<WebinarsCreateWebinarRequestTrackingFieldsInner> trackingFields;
        private Integer type;
        private Boolean isSimulive;
        private String recordFileId;

        private CreateWebinarRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set agenda
         * @param agenda Webinar description. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder agenda(String agenda) {
            this.agenda = agenda;
            return this;
        }
        
        /**
         * Set duration
         * @param duration Webinar duration in minutes. Used for scheduled webinars only. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder duration(Integer duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set password
         * @param password Webinar passcode. Passcode may only contain the characters [a-z A-Z 0-9 @ - _ * !]. Maximum of 10 characters.  If **Require a passcode when scheduling new meetings** setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request.     **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements.         If the requirements are enabled, you can view those requirements by calling the [**Get account settings**](https://developers.zoom.us/docs/api/rest/reference/zoom-api/ma#operation/accountSettings) API. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set recurrence
         * @param recurrence  (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder recurrence(RecurrenceWebinarProperty recurrence) {
            this.recurrence = recurrence;
            return this;
        }
        
        /**
         * Set scheduleFor
         * @param scheduleFor The email address or user ID of the user to schedule a webinar for. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder scheduleFor(String scheduleFor) {
            this.scheduleFor = scheduleFor;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder settings(WebinarsCreateWebinarRequestSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime Webinar start time. We support two formats for &#x60;start_time&#x60; - local time and GMT.       To set time as GMT the format should be &#x60;yyyy-MM-dd&#x60;T&#x60;HH:mm:ssZ&#x60;.  To set time using a specific timezone, use &#x60;yyyy-MM-dd&#x60;T&#x60;HH:mm:ss&#x60; format and specify the timezone [ID](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones) in the &#x60;timezone&#x60; field OR leave it blank and the timezone set on your Zoom account will be used. You can also set the time as UTC as the timezone field.  The &#x60;start_time&#x60; should only be used for scheduled and / or recurring webinars with fixed time. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set templateId
         * @param templateId The webinar template ID to schedule a webinar using a [webinar template](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates) or a [admin webinar template](https://support.zoom.us/hc/en-us/articles/8137753618957-Configuring-admin-webinar-templates). For a list of webinar templates, use the [**List webinar templates**](https://developers.zoom.us/docs/api/rest/reference/zoom-api/methods#operation/listWebinarTemplates) API. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder templateId(String templateId) {
            this.templateId = templateId;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone The timezone to assign to the &#x60;start_time&#x60; value. This field is only used for scheduled or recurring webinars with a fixed time.  For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones). (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set topic
         * @param topic Webinar topic. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder topic(String topic) {
            this.topic = topic;
            return this;
        }
        
        /**
         * Set trackingFields
         * @param trackingFields Tracking fields. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder trackingFields(List<WebinarsCreateWebinarRequestTrackingFieldsInner> trackingFields) {
            this.trackingFields = trackingFields;
            return this;
        }
        
        /**
         * Set type
         * @param type Webinar types.  &#x60;5&#x60; - Webinar.    &#x60;6&#x60; - Recurring webinar with no fixed time.    &#x60;9&#x60; - Recurring webinar with a fixed time. (optional, default to 5)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder type(Integer type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set isSimulive
         * @param isSimulive Whether to set the webinar simulive. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder isSimulive(Boolean isSimulive) {
            this.isSimulive = isSimulive;
            return this;
        }
        
        /**
         * Set recordFileId
         * @param recordFileId The previously recorded file&#39;s ID for &#x60;simulive&#x60;. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder recordFileId(String recordFileId) {
            this.recordFileId = recordFileId;
            return this;
        }
        
        /**
         * Build call for createWebinar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the schedule_for field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Can not schedule simulive webinar for others. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Account hasn&#39;t enabled Simulive Webinar. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Record file does not exist. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     **Error Code:** &#x60;429&#x60; &lt;br&gt;  A maximum of ({rateLimitNumber}) webinars can be created and updated for a single user in one day. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsCreateWebinarRequest webinarsCreateWebinarRequest = buildBodyParams();
            return createWebinarCall(userId, webinarsCreateWebinarRequest, _callback);
        }

        private WebinarsCreateWebinarRequest buildBodyParams() {
            WebinarsCreateWebinarRequest webinarsCreateWebinarRequest = new WebinarsCreateWebinarRequest();
            webinarsCreateWebinarRequest.agenda(this.agenda);
            webinarsCreateWebinarRequest.duration(this.duration);
            webinarsCreateWebinarRequest.password(this.password);
            webinarsCreateWebinarRequest.recurrence(this.recurrence);
            webinarsCreateWebinarRequest.scheduleFor(this.scheduleFor);
            webinarsCreateWebinarRequest.settings(this.settings);
            webinarsCreateWebinarRequest.startTime(this.startTime);
            webinarsCreateWebinarRequest.templateId(this.templateId);
            webinarsCreateWebinarRequest.timezone(this.timezone);
            webinarsCreateWebinarRequest.topic(this.topic);
            webinarsCreateWebinarRequest.trackingFields(this.trackingFields);
            if (this.type != null)
            webinarsCreateWebinarRequest.type(WebinarsCreateWebinarRequest.TypeEnum.fromValue(this.type));
            webinarsCreateWebinarRequest.isSimulive(this.isSimulive);
            webinarsCreateWebinarRequest.recordFileId(this.recordFileId);
            return webinarsCreateWebinarRequest;
        }

        /**
         * Execute createWebinar request
         * @return WebinarsCreateWebinarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the schedule_for field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Can not schedule simulive webinar for others. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Account hasn&#39;t enabled Simulive Webinar. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Record file does not exist. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     **Error Code:** &#x60;429&#x60; &lt;br&gt;  A maximum of ({rateLimitNumber}) webinars can be created and updated for a single user in one day. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsCreateWebinarResponse execute() throws ApiException {
            WebinarsCreateWebinarRequest webinarsCreateWebinarRequest = buildBodyParams();
            ApiResponse<WebinarsCreateWebinarResponse> localVarResp = createWebinarWithHttpInfo(userId, webinarsCreateWebinarRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWebinar request with HTTP info returned
         * @return ApiResponse&lt;WebinarsCreateWebinarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the schedule_for field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Can not schedule simulive webinar for others. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Account hasn&#39;t enabled Simulive Webinar. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Record file does not exist. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     **Error Code:** &#x60;429&#x60; &lt;br&gt;  A maximum of ({rateLimitNumber}) webinars can be created and updated for a single user in one day. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsCreateWebinarResponse> executeWithHttpInfo() throws ApiException {
            WebinarsCreateWebinarRequest webinarsCreateWebinarRequest = buildBodyParams();
            return createWebinarWithHttpInfo(userId, webinarsCreateWebinarRequest);
        }

        /**
         * Execute createWebinar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the schedule_for field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Can not schedule simulive webinar for others. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Account hasn&#39;t enabled Simulive Webinar. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Record file does not exist. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     **Error Code:** &#x60;429&#x60; &lt;br&gt;  A maximum of ({rateLimitNumber}) webinars can be created and updated for a single user in one day. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsCreateWebinarResponse> _callback) throws ApiException {
            WebinarsCreateWebinarRequest webinarsCreateWebinarRequest = buildBodyParams();
            return createWebinarAsync(userId, webinarsCreateWebinarRequest, _callback);
        }
    }

    /**
     * Create a webinar
     * Schedule a webinar for a user who is a webinar host. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.    Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees.   **Rate limit:** Up to a maximum of **100 requests per day**. The rate limit is applied to the &#x60;userId&#x60; of the **webinar host** used to make the request.   **Prerequisites:**  * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value. (required)
     * @return CreateWebinarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the schedule_for field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Can not schedule simulive webinar for others. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Account hasn&#39;t enabled Simulive Webinar. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Record file does not exist. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     **Error Code:** &#x60;429&#x60; &lt;br&gt;  A maximum of ({rateLimitNumber}) webinars can be created and updated for a single user in one day. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebinarRequestBuilder createWebinar(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new CreateWebinarRequestBuilder(userId);
    }
    private okhttp3.Call createWebinarTemplateCall(String userId, WebinarsCreateWebinarTemplateRequest webinarsCreateWebinarTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsCreateWebinarTemplateRequest;

        // create path and map variables
        String localVarPath = "/users/{userId}/webinar_templates"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebinarTemplateValidateBeforeCall(String userId, WebinarsCreateWebinarTemplateRequest webinarsCreateWebinarTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createWebinarTemplate(Async)");
        }

        return createWebinarTemplateCall(userId, webinarsCreateWebinarTemplateRequest, _callback);

    }


    private ApiResponse<WebinarsCreateWebinarTemplateResponse> createWebinarTemplateWithHttpInfo(String userId, WebinarsCreateWebinarTemplateRequest webinarsCreateWebinarTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createWebinarTemplateValidateBeforeCall(userId, webinarsCreateWebinarTemplateRequest, null);
        Type localVarReturnType = new TypeToken<WebinarsCreateWebinarTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWebinarTemplateAsync(String userId, WebinarsCreateWebinarTemplateRequest webinarsCreateWebinarTemplateRequest, final ApiCallback<WebinarsCreateWebinarTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebinarTemplateValidateBeforeCall(userId, webinarsCreateWebinarTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarsCreateWebinarTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWebinarTemplateRequestBuilder {
        private final String userId;
        private Long webinarId;
        private String name;
        private Boolean saveRecurrence;
        private Boolean overwrite;

        private CreateWebinarTemplateRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set webinarId
         * @param webinarId The webinar ID in long (int64) format. (optional)
         * @return CreateWebinarTemplateRequestBuilder
         */
        public CreateWebinarTemplateRequestBuilder webinarId(Long webinarId) {
            this.webinarId = webinarId;
            return this;
        }
        
        /**
         * Set name
         * @param name The webinar template&#39;s name. (optional)
         * @return CreateWebinarTemplateRequestBuilder
         */
        public CreateWebinarTemplateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set saveRecurrence
         * @param saveRecurrence If the field is set to true, the recurrence webinar template will be saved as the scheduled webinar. (optional, default to false)
         * @return CreateWebinarTemplateRequestBuilder
         */
        public CreateWebinarTemplateRequestBuilder saveRecurrence(Boolean saveRecurrence) {
            this.saveRecurrence = saveRecurrence;
            return this;
        }
        
        /**
         * Set overwrite
         * @param overwrite Overwrite an existing webinar template if the template is created from same existing webinar. (optional, default to false)
         * @return CreateWebinarTemplateRequestBuilder
         */
        public CreateWebinarTemplateRequestBuilder overwrite(Boolean overwrite) {
            this.overwrite = overwrite;
            return this;
        }
        
        /**
         * Build call for createWebinarTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar template created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.  **Error Code:** &#x60;300&#x60; &lt;br&gt; You can only create up to 40 webinar templates.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access meeting info.  * Webinar template name already exists: {templateName}.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; * User does not exist.  * User {userId} does not exist or does not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsCreateWebinarTemplateRequest webinarsCreateWebinarTemplateRequest = buildBodyParams();
            return createWebinarTemplateCall(userId, webinarsCreateWebinarTemplateRequest, _callback);
        }

        private WebinarsCreateWebinarTemplateRequest buildBodyParams() {
            WebinarsCreateWebinarTemplateRequest webinarsCreateWebinarTemplateRequest = new WebinarsCreateWebinarTemplateRequest();
            webinarsCreateWebinarTemplateRequest.webinarId(this.webinarId);
            webinarsCreateWebinarTemplateRequest.name(this.name);
            webinarsCreateWebinarTemplateRequest.saveRecurrence(this.saveRecurrence);
            webinarsCreateWebinarTemplateRequest.overwrite(this.overwrite);
            return webinarsCreateWebinarTemplateRequest;
        }

        /**
         * Execute createWebinarTemplate request
         * @return WebinarsCreateWebinarTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar template created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.  **Error Code:** &#x60;300&#x60; &lt;br&gt; You can only create up to 40 webinar templates.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access meeting info.  * Webinar template name already exists: {templateName}.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; * User does not exist.  * User {userId} does not exist or does not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsCreateWebinarTemplateResponse execute() throws ApiException {
            WebinarsCreateWebinarTemplateRequest webinarsCreateWebinarTemplateRequest = buildBodyParams();
            ApiResponse<WebinarsCreateWebinarTemplateResponse> localVarResp = createWebinarTemplateWithHttpInfo(userId, webinarsCreateWebinarTemplateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWebinarTemplate request with HTTP info returned
         * @return ApiResponse&lt;WebinarsCreateWebinarTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar template created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.  **Error Code:** &#x60;300&#x60; &lt;br&gt; You can only create up to 40 webinar templates.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access meeting info.  * Webinar template name already exists: {templateName}.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; * User does not exist.  * User {userId} does not exist or does not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsCreateWebinarTemplateResponse> executeWithHttpInfo() throws ApiException {
            WebinarsCreateWebinarTemplateRequest webinarsCreateWebinarTemplateRequest = buildBodyParams();
            return createWebinarTemplateWithHttpInfo(userId, webinarsCreateWebinarTemplateRequest);
        }

        /**
         * Execute createWebinarTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar template created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.  **Error Code:** &#x60;300&#x60; &lt;br&gt; You can only create up to 40 webinar templates.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access meeting info.  * Webinar template name already exists: {templateName}.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; * User does not exist.  * User {userId} does not exist or does not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsCreateWebinarTemplateResponse> _callback) throws ApiException {
            WebinarsCreateWebinarTemplateRequest webinarsCreateWebinarTemplateRequest = buildBodyParams();
            return createWebinarTemplateAsync(userId, webinarsCreateWebinarTemplateRequest, _callback);
        }
    }

    /**
     * Create a webinar template
     * Use this API to create a webinar template from an existing webinar.     **Scopes:** &#x60;webinar:write:admin&#x60;,&#x60;webinar:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param userId The user ID retrievable from the [List users](https://developers.zoom.us) API. (required)
     * @return CreateWebinarTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Webinar template created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.  **Error Code:** &#x60;300&#x60; &lt;br&gt; You can only create up to 40 webinar templates.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access meeting info.  * Webinar template name already exists: {templateName}.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; * User does not exist.  * User {userId} does not exist or does not belong to this account.   </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebinarTemplateRequestBuilder createWebinarTemplate(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new CreateWebinarTemplateRequestBuilder(userId);
    }
    private okhttp3.Call deleteBrandingNameTagCall(Long webinarId, String nameTagIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/branding/name_tags"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameTagIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name_tag_ids", nameTagIds));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBrandingNameTagValidateBeforeCall(Long webinarId, String nameTagIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling deleteBrandingNameTag(Async)");
        }

        return deleteBrandingNameTagCall(webinarId, nameTagIds, _callback);

    }


    private ApiResponse<Void> deleteBrandingNameTagWithHttpInfo(Long webinarId, String nameTagIds) throws ApiException {
        okhttp3.Call localVarCall = deleteBrandingNameTagValidateBeforeCall(webinarId, nameTagIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteBrandingNameTagAsync(Long webinarId, String nameTagIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBrandingNameTagValidateBeforeCall(webinarId, nameTagIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteBrandingNameTagRequestBuilder {
        private final Long webinarId;
        private String nameTagIds;

        private DeleteBrandingNameTagRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set nameTagIds
         * @param nameTagIds A comma-separated list of the name tag IDs to delete. (optional)
         * @return DeleteBrandingNameTagRequestBuilder
         */
        public DeleteBrandingNameTagRequestBuilder nameTagIds(String nameTagIds) {
            this.nameTagIds = nameTagIds;
            return this;
        }
        
        /**
         * Build call for deleteBrandingNameTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Name tag(s) deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: name_tag_ids  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBrandingNameTagCall(webinarId, nameTagIds, _callback);
        }


        /**
         * Execute deleteBrandingNameTag request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Name tag(s) deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: name_tag_ids  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteBrandingNameTagWithHttpInfo(webinarId, nameTagIds);
        }

        /**
         * Execute deleteBrandingNameTag request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Name tag(s) deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: name_tag_ids  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteBrandingNameTagWithHttpInfo(webinarId, nameTagIds);
        }

        /**
         * Execute deleteBrandingNameTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Name tag(s) deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: name_tag_ids  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteBrandingNameTagAsync(webinarId, nameTagIds, _callback);
        }
    }

    /**
     * Delete a webinar&#39;s branding name tag
     * Use this API to delete a webinar&#39;s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return DeleteBrandingNameTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Name tag(s) deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: name_tag_ids  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBrandingNameTagRequestBuilder deleteBrandingNameTag(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new DeleteBrandingNameTagRequestBuilder(webinarId);
    }
    private okhttp3.Call deleteBrandingVirtualBackgroundCall(Long webinarId, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/branding/virtual_backgrounds"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBrandingVirtualBackgroundValidateBeforeCall(Long webinarId, String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling deleteBrandingVirtualBackground(Async)");
        }

        return deleteBrandingVirtualBackgroundCall(webinarId, ids, _callback);

    }


    private ApiResponse<Void> deleteBrandingVirtualBackgroundWithHttpInfo(Long webinarId, String ids) throws ApiException {
        okhttp3.Call localVarCall = deleteBrandingVirtualBackgroundValidateBeforeCall(webinarId, ids, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteBrandingVirtualBackgroundAsync(Long webinarId, String ids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBrandingVirtualBackgroundValidateBeforeCall(webinarId, ids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteBrandingVirtualBackgroundRequestBuilder {
        private final Long webinarId;
        private String ids;

        private DeleteBrandingVirtualBackgroundRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set ids
         * @param ids A comma-separated list of the Virtual Background file IDs to delete. (optional)
         * @return DeleteBrandingVirtualBackgroundRequestBuilder
         */
        public DeleteBrandingVirtualBackgroundRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for deleteBrandingVirtualBackground
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Virtual Background file(s) deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: ids  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBrandingVirtualBackgroundCall(webinarId, ids, _callback);
        }


        /**
         * Execute deleteBrandingVirtualBackground request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Virtual Background file(s) deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: ids  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteBrandingVirtualBackgroundWithHttpInfo(webinarId, ids);
        }

        /**
         * Execute deleteBrandingVirtualBackground request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Virtual Background file(s) deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: ids  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteBrandingVirtualBackgroundWithHttpInfo(webinarId, ids);
        }

        /**
         * Execute deleteBrandingVirtualBackground request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Virtual Background file(s) deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: ids  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteBrandingVirtualBackgroundAsync(webinarId, ids, _callback);
        }
    }

    /**
     * Delete a webinar&#39;s branding Virtual Backgrounds
     * Use this API to delete a webinar&#39;s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return DeleteBrandingVirtualBackgroundRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Virtual Background file(s) deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: ids  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBrandingVirtualBackgroundRequestBuilder deleteBrandingVirtualBackground(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new DeleteBrandingVirtualBackgroundRequestBuilder(webinarId);
    }
    private okhttp3.Call deleteBrandingWallpaperCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/branding/wallpaper"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBrandingWallpaperValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling deleteBrandingWallpaper(Async)");
        }

        return deleteBrandingWallpaperCall(webinarId, _callback);

    }


    private ApiResponse<Void> deleteBrandingWallpaperWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = deleteBrandingWallpaperValidateBeforeCall(webinarId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteBrandingWallpaperAsync(Long webinarId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBrandingWallpaperValidateBeforeCall(webinarId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteBrandingWallpaperRequestBuilder {
        private final Long webinarId;

        private DeleteBrandingWallpaperRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for deleteBrandingWallpaper
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Webinar wallpaper deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: {id}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBrandingWallpaperCall(webinarId, _callback);
        }


        /**
         * Execute deleteBrandingWallpaper request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Webinar wallpaper deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: {id}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteBrandingWallpaperWithHttpInfo(webinarId);
        }

        /**
         * Execute deleteBrandingWallpaper request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Webinar wallpaper deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: {id}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteBrandingWallpaperWithHttpInfo(webinarId);
        }

        /**
         * Execute deleteBrandingWallpaper request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Webinar wallpaper deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: {id}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteBrandingWallpaperAsync(webinarId, _callback);
        }
    }

    /**
     * Delete a webinar&#39;s branding wallpaper
     * Use this API to delete a webinar&#39;s session branding wallpaper file.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return DeleteBrandingWallpaperRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Webinar wallpaper deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: {id}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBrandingWallpaperRequestBuilder deleteBrandingWallpaper(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new DeleteBrandingWallpaperRequestBuilder(webinarId);
    }
    private okhttp3.Call deleteMessageByIdCall(Long webinarId, String messageId, String fileIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_webinars/{webinarId}/chat/messages/{messageId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_ids", fileIds));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessageByIdValidateBeforeCall(Long webinarId, String messageId, String fileIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling deleteMessageById(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling deleteMessageById(Async)");
        }

        return deleteMessageByIdCall(webinarId, messageId, fileIds, _callback);

    }


    private ApiResponse<Void> deleteMessageByIdWithHttpInfo(Long webinarId, String messageId, String fileIds) throws ApiException {
        okhttp3.Call localVarCall = deleteMessageByIdValidateBeforeCall(webinarId, messageId, fileIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMessageByIdAsync(Long webinarId, String messageId, String fileIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessageByIdValidateBeforeCall(webinarId, messageId, fileIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMessageByIdRequestBuilder {
        private final Long webinarId;
        private final String messageId;
        private String fileIds;

        private DeleteMessageByIdRequestBuilder(Long webinarId, String messageId) {
            this.webinarId = webinarId;
            this.messageId = messageId;
        }

        /**
         * Set fileIds
         * @param fileIds The live webinar chat file&#39;s universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas. (optional)
         * @return DeleteMessageByIdRequestBuilder
         */
        public DeleteMessageByIdRequestBuilder fileIds(String fileIds) {
            this.fileIds = fileIds;
            return this;
        }
        
        /**
         * Build call for deleteMessageById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Webinar chat message deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Only available for paid accounts. * DLP is not enabled. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMessageByIdCall(webinarId, messageId, fileIds, _callback);
        }


        /**
         * Execute deleteMessageById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Webinar chat message deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Only available for paid accounts. * DLP is not enabled. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMessageByIdWithHttpInfo(webinarId, messageId, fileIds);
        }

        /**
         * Execute deleteMessageById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Webinar chat message deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Only available for paid accounts. * DLP is not enabled. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMessageByIdWithHttpInfo(webinarId, messageId, fileIds);
        }

        /**
         * Execute deleteMessageById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Webinar chat message deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Only available for paid accounts. * DLP is not enabled. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMessageByIdAsync(webinarId, messageId, fileIds, _callback);
        }
    }

    /**
     * Delete a live webinar message
     * Deletes a message in a live webinar based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @param messageId The live webinar chat message&#39;s unique identifier (UUID), in base64-encoded format. (required)
     * @return DeleteMessageByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Webinar chat message deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Only available for paid accounts. * DLP is not enabled. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar  {webinarId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMessageByIdRequestBuilder deleteMessageById(Long webinarId, String messageId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        if (messageId == null) throw new IllegalArgumentException("\"messageId\" is required but got null");
            

        return new DeleteMessageByIdRequestBuilder(webinarId, messageId);
    }
    private okhttp3.Call deletePollCall(Long webinarId, String pollId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/polls/{pollId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()))
            .replace("{" + "pollId" + "}", localVarApiClient.escapeString(pollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePollValidateBeforeCall(Long webinarId, String pollId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling deletePoll(Async)");
        }

        // verify the required parameter 'pollId' is set
        if (pollId == null) {
            throw new ApiException("Missing the required parameter 'pollId' when calling deletePoll(Async)");
        }

        return deletePollCall(webinarId, pollId, _callback);

    }


    private ApiResponse<Void> deletePollWithHttpInfo(Long webinarId, String pollId) throws ApiException {
        okhttp3.Call localVarCall = deletePollValidateBeforeCall(webinarId, pollId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePollAsync(Long webinarId, String pollId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePollValidateBeforeCall(webinarId, pollId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePollRequestBuilder {
        private final Long webinarId;
        private final String pollId;

        private DeletePollRequestBuilder(Long webinarId, String pollId) {
            this.webinarId = webinarId;
            this.pollId = pollId;
        }

        /**
         * Build call for deletePoll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar Poll deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePollCall(webinarId, pollId, _callback);
        }


        /**
         * Execute deletePoll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar Poll deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePollWithHttpInfo(webinarId, pollId);
        }

        /**
         * Execute deletePoll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar Poll deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePollWithHttpInfo(webinarId, pollId);
        }

        /**
         * Execute deletePoll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar Poll deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePollAsync(webinarId, pollId, _callback);
        }
    }

    /**
     * Delete a webinar poll
     * Delete a webinar&#39;s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @param pollId The poll ID (required)
     * @return DeletePollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar Poll deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public DeletePollRequestBuilder deletePoll(Long webinarId, String pollId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        if (pollId == null) throw new IllegalArgumentException("\"pollId\" is required but got null");
            

        return new DeletePollRequestBuilder(webinarId, pollId);
    }
    private okhttp3.Call deleteRegistrantCall(Integer webinarId, String registrantId, String occurrenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/registrants/{registrantId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()))
            .replace("{" + "registrantId" + "}", localVarApiClient.escapeString(registrantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRegistrantValidateBeforeCall(Integer webinarId, String registrantId, String occurrenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling deleteRegistrant(Async)");
        }

        // verify the required parameter 'registrantId' is set
        if (registrantId == null) {
            throw new ApiException("Missing the required parameter 'registrantId' when calling deleteRegistrant(Async)");
        }

        return deleteRegistrantCall(webinarId, registrantId, occurrenceId, _callback);

    }


    private ApiResponse<Void> deleteRegistrantWithHttpInfo(Integer webinarId, String registrantId, String occurrenceId) throws ApiException {
        okhttp3.Call localVarCall = deleteRegistrantValidateBeforeCall(webinarId, registrantId, occurrenceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRegistrantAsync(Integer webinarId, String registrantId, String occurrenceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRegistrantValidateBeforeCall(webinarId, registrantId, occurrenceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRegistrantRequestBuilder {
        private final Integer webinarId;
        private final String registrantId;
        private String occurrenceId;

        private DeleteRegistrantRequestBuilder(Integer webinarId, String registrantId) {
            this.webinarId = webinarId;
            this.registrantId = registrantId;
        }

        /**
         * Set occurrenceId
         * @param occurrenceId The webinar occurrence ID. (optional)
         * @return DeleteRegistrantRequestBuilder
         */
        public DeleteRegistrantRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Build call for deleteRegistrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP status code:** &#x60;204&#x60;      OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {0}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;404&#x60; &lt;br&gt;  Registration has not been enabled for this webinar: {0}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Registrant {0} was not found.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {0}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRegistrantCall(webinarId, registrantId, occurrenceId, _callback);
        }


        /**
         * Execute deleteRegistrant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP status code:** &#x60;204&#x60;      OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {0}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;404&#x60; &lt;br&gt;  Registration has not been enabled for this webinar: {0}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Registrant {0} was not found.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {0}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteRegistrantWithHttpInfo(webinarId, registrantId, occurrenceId);
        }

        /**
         * Execute deleteRegistrant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP status code:** &#x60;204&#x60;      OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {0}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;404&#x60; &lt;br&gt;  Registration has not been enabled for this webinar: {0}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Registrant {0} was not found.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {0}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRegistrantWithHttpInfo(webinarId, registrantId, occurrenceId);
        }

        /**
         * Execute deleteRegistrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP status code:** &#x60;204&#x60;      OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {0}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;404&#x60; &lt;br&gt;  Registration has not been enabled for this webinar: {0}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Registrant {0} was not found.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {0}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRegistrantAsync(webinarId, registrantId, occurrenceId, _callback);
        }
    }

    /**
     * Delete a webinar registrant
     * Delete a webinar registrant.            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar ID. (required)
     * @param registrantId The registrant ID. (required)
     * @return DeleteRegistrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP status code:** &#x60;204&#x60;      OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {0}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;404&#x60; &lt;br&gt;  Registration has not been enabled for this webinar: {0}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Registrant {0} was not found.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {0}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRegistrantRequestBuilder deleteRegistrant(Integer webinarId, String registrantId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        if (registrantId == null) throw new IllegalArgumentException("\"registrantId\" is required but got null");
            

        return new DeleteRegistrantRequestBuilder(webinarId, registrantId);
    }
    private okhttp3.Call deleteSurveyCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/survey"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSurveyValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling deleteSurvey(Async)");
        }

        return deleteSurveyCall(webinarId, _callback);

    }


    private ApiResponse<Void> deleteSurveyWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = deleteSurveyValidateBeforeCall(webinarId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSurveyAsync(Long webinarId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSurveyValidateBeforeCall(webinarId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSurveyRequestBuilder {
        private final Long webinarId;

        private DeleteSurveyRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for deleteSurvey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Webinar survey deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To enable this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSurveyCall(webinarId, _callback);
        }


        /**
         * Execute deleteSurvey request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Webinar survey deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To enable this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSurveyWithHttpInfo(webinarId);
        }

        /**
         * Execute deleteSurvey request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Webinar survey deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To enable this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSurveyWithHttpInfo(webinarId);
        }

        /**
         * Execute deleteSurvey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Webinar survey deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To enable this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSurveyAsync(webinarId, _callback);
        }
    }

    /**
     * Delete a webinar survey
     * Use this API to delete a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar Add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host&#39;s account.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return DeleteSurveyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Webinar survey deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To enable this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSurveyRequestBuilder deleteSurvey(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new DeleteSurveyRequestBuilder(webinarId);
    }
    private okhttp3.Call getDetailsCall(String webinarId, String occurrenceId, Boolean showPreviousOccurrences, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        if (showPreviousOccurrences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_previous_occurrences", showPreviousOccurrences));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String webinarId, String occurrenceId, Boolean showPreviousOccurrences, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getDetails(Async)");
        }

        return getDetailsCall(webinarId, occurrenceId, showPreviousOccurrences, _callback);

    }


    private ApiResponse<WebinarsGetDetailsResponse> getDetailsWithHttpInfo(String webinarId, String occurrenceId, Boolean showPreviousOccurrences) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(webinarId, occurrenceId, showPreviousOccurrences, null);
        Type localVarReturnType = new TypeToken<WebinarsGetDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String webinarId, String occurrenceId, Boolean showPreviousOccurrences, final ApiCallback<WebinarsGetDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(webinarId, occurrenceId, showPreviousOccurrences, _callback);
        Type localVarReturnType = new TypeToken<WebinarsGetDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String webinarId;
        private String occurrenceId;
        private Boolean showPreviousOccurrences;

        private GetDetailsRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set occurrenceId
         * @param occurrenceId Unique identifier for an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [**Create a webinar**](https://developers.zoom.us) API, you can retrieve the Occurrence ID from the response of the API call. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Set showPreviousOccurrences
         * @param showPreviousOccurrences Set the value of this field to &#x60;true&#x60; if you would like to view Webinar details of all previous occurrences of a recurring Webinar. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder showPreviousOccurrences(Boolean showPreviousOccurrences) {
            this.showPreviousOccurrences = showPreviousOccurrences;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user to perform this action. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(webinarId, occurrenceId, showPreviousOccurrences, _callback);
        }


        /**
         * Execute getDetails request
         * @return WebinarsGetDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user to perform this action. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsGetDetailsResponse execute() throws ApiException {
            ApiResponse<WebinarsGetDetailsResponse> localVarResp = getDetailsWithHttpInfo(webinarId, occurrenceId, showPreviousOccurrences);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;WebinarsGetDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user to perform this action. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsGetDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(webinarId, occurrenceId, showPreviousOccurrences);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user to perform this action. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsGetDetailsResponse> _callback) throws ApiException {
            return getDetailsAsync(webinarId, occurrenceId, showPreviousOccurrences, _callback);
        }
    }

    /**
     * Get a webinar
     * Get details for a scheduled Zoom Webinar.            **Prerequisites:** * Pro or higher plan with a Webinar add-on.  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID or universally unique ID (UUID). (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user to perform this action. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetDetailsRequestBuilder(webinarId);
    }
    private okhttp3.Call getJoinTokenLocalRecordingCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/jointoken/local_recording"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJoinTokenLocalRecordingValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getJoinTokenLocalRecording(Async)");
        }

        return getJoinTokenLocalRecordingCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsGetJoinTokenLocalRecordingResponse> getJoinTokenLocalRecordingWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = getJoinTokenLocalRecordingValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsGetJoinTokenLocalRecordingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJoinTokenLocalRecordingAsync(Long webinarId, final ApiCallback<WebinarsGetJoinTokenLocalRecordingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJoinTokenLocalRecordingValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsGetJoinTokenLocalRecordingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJoinTokenLocalRecordingRequestBuilder {
        private final Long webinarId;

        private GetJoinTokenLocalRecordingRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getJoinTokenLocalRecording
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar local recording token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local recording. To use this feature, enable the \&quot;Local Recording\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJoinTokenLocalRecordingCall(webinarId, _callback);
        }


        /**
         * Execute getJoinTokenLocalRecording request
         * @return WebinarsGetJoinTokenLocalRecordingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar local recording token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local recording. To use this feature, enable the \&quot;Local Recording\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsGetJoinTokenLocalRecordingResponse execute() throws ApiException {
            ApiResponse<WebinarsGetJoinTokenLocalRecordingResponse> localVarResp = getJoinTokenLocalRecordingWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJoinTokenLocalRecording request with HTTP info returned
         * @return ApiResponse&lt;WebinarsGetJoinTokenLocalRecordingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar local recording token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local recording. To use this feature, enable the \&quot;Local Recording\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsGetJoinTokenLocalRecordingResponse> executeWithHttpInfo() throws ApiException {
            return getJoinTokenLocalRecordingWithHttpInfo(webinarId);
        }

        /**
         * Execute getJoinTokenLocalRecording request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar local recording token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local recording. To use this feature, enable the \&quot;Local Recording\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsGetJoinTokenLocalRecordingResponse> _callback) throws ApiException {
            return getJoinTokenLocalRecordingAsync(webinarId, _callback);
        }
    }

    /**
     * Get a webinar&#39;s join token for local recording
     * Use this API to get a webinar&#39;s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom webinar. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** &#x60;webinar_token:read:admin:local_recording&#x60;,&#x60;webinar_token:read:local_recording&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return GetJoinTokenLocalRecordingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar local recording token returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local recording. To use this feature, enable the \&quot;Local Recording\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
     </table>
     */
    public GetJoinTokenLocalRecordingRequestBuilder getJoinTokenLocalRecording(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new GetJoinTokenLocalRecordingRequestBuilder(webinarId);
    }
    private okhttp3.Call getLiveStreamDetailsCall(String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/livestream"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiveStreamDetailsValidateBeforeCall(String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getLiveStreamDetails(Async)");
        }

        return getLiveStreamDetailsCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsGetLiveStreamDetailsResponse> getLiveStreamDetailsWithHttpInfo(String webinarId) throws ApiException {
        okhttp3.Call localVarCall = getLiveStreamDetailsValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsGetLiveStreamDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLiveStreamDetailsAsync(String webinarId, final ApiCallback<WebinarsGetLiveStreamDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiveStreamDetailsValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsGetLiveStreamDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLiveStreamDetailsRequestBuilder {
        private final String webinarId;

        private GetLiveStreamDetailsRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getLiveStreamDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**   Live stream details returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar ID does not exist.&lt;br&gt;* Invalid Webinar ID.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} does not exist.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. Subscribe to the webinar plan and enable webinars for user  {userId} in order to perform this action.&lt;br&gt;* The current user has not enabled the custom live streaming feature of the webinar. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLiveStreamDetailsCall(webinarId, _callback);
        }


        /**
         * Execute getLiveStreamDetails request
         * @return WebinarsGetLiveStreamDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**   Live stream details returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar ID does not exist.&lt;br&gt;* Invalid Webinar ID.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} does not exist.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. Subscribe to the webinar plan and enable webinars for user  {userId} in order to perform this action.&lt;br&gt;* The current user has not enabled the custom live streaming feature of the webinar. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsGetLiveStreamDetailsResponse execute() throws ApiException {
            ApiResponse<WebinarsGetLiveStreamDetailsResponse> localVarResp = getLiveStreamDetailsWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLiveStreamDetails request with HTTP info returned
         * @return ApiResponse&lt;WebinarsGetLiveStreamDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**   Live stream details returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar ID does not exist.&lt;br&gt;* Invalid Webinar ID.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} does not exist.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. Subscribe to the webinar plan and enable webinars for user  {userId} in order to perform this action.&lt;br&gt;* The current user has not enabled the custom live streaming feature of the webinar. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsGetLiveStreamDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getLiveStreamDetailsWithHttpInfo(webinarId);
        }

        /**
         * Execute getLiveStreamDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**   Live stream details returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar ID does not exist.&lt;br&gt;* Invalid Webinar ID.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} does not exist.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. Subscribe to the webinar plan and enable webinars for user  {userId} in order to perform this action.&lt;br&gt;* The current user has not enabled the custom live streaming feature of the webinar. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsGetLiveStreamDetailsResponse> _callback) throws ApiException {
            return getLiveStreamDetailsAsync(webinarId, _callback);
        }
    }

    /**
     * Get live stream details
     * Get a webinar&#39;s live stream configuration details, such as Stream URL, Stream Key and Page URL.  Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.       **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s unique ID. (required)
     * @return GetLiveStreamDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**   Live stream details returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar ID does not exist.&lt;br&gt;* Invalid Webinar ID.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} does not exist.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. Subscribe to the webinar plan and enable webinars for user  {userId} in order to perform this action.&lt;br&gt;* The current user has not enabled the custom live streaming feature of the webinar. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetLiveStreamDetailsRequestBuilder getLiveStreamDetails(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetLiveStreamDetailsRequestBuilder(webinarId);
    }
    private okhttp3.Call getMeetingArchiveTokenForLocalArchivingCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/jointoken/local_archiving"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingArchiveTokenForLocalArchivingValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getMeetingArchiveTokenForLocalArchiving(Async)");
        }

        return getMeetingArchiveTokenForLocalArchivingCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsGetMeetingArchiveTokenForLocalArchivingResponse> getMeetingArchiveTokenForLocalArchivingWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = getMeetingArchiveTokenForLocalArchivingValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsGetMeetingArchiveTokenForLocalArchivingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingArchiveTokenForLocalArchivingAsync(Long webinarId, final ApiCallback<WebinarsGetMeetingArchiveTokenForLocalArchivingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingArchiveTokenForLocalArchivingValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsGetMeetingArchiveTokenForLocalArchivingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingArchiveTokenForLocalArchivingRequestBuilder {
        private final Long webinarId;

        private GetMeetingArchiveTokenForLocalArchivingRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getMeetingArchiveTokenForLocalArchiving
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar local archiving token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local archiving. To use this feature, enable the \&quot;Archive meetings and webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingArchiveTokenForLocalArchivingCall(webinarId, _callback);
        }


        /**
         * Execute getMeetingArchiveTokenForLocalArchiving request
         * @return WebinarsGetMeetingArchiveTokenForLocalArchivingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar local archiving token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local archiving. To use this feature, enable the \&quot;Archive meetings and webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsGetMeetingArchiveTokenForLocalArchivingResponse execute() throws ApiException {
            ApiResponse<WebinarsGetMeetingArchiveTokenForLocalArchivingResponse> localVarResp = getMeetingArchiveTokenForLocalArchivingWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingArchiveTokenForLocalArchiving request with HTTP info returned
         * @return ApiResponse&lt;WebinarsGetMeetingArchiveTokenForLocalArchivingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar local archiving token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local archiving. To use this feature, enable the \&quot;Archive meetings and webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsGetMeetingArchiveTokenForLocalArchivingResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingArchiveTokenForLocalArchivingWithHttpInfo(webinarId);
        }

        /**
         * Execute getMeetingArchiveTokenForLocalArchiving request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar local archiving token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local archiving. To use this feature, enable the \&quot;Archive meetings and webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsGetMeetingArchiveTokenForLocalArchivingResponse> _callback) throws ApiException {
            return getMeetingArchiveTokenForLocalArchivingAsync(webinarId, _callback);
        }
    }

    /**
     * Get a webinar&#39;s archive token for local archiving
     * Use this API to get a webinar&#39;s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the webinar&#39;s raw audio and video media stream in real-time.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** &#x60;webinar_token:read:admin:local_archiving&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return GetMeetingArchiveTokenForLocalArchivingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar local archiving token returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local archiving. To use this feature, enable the \&quot;Archive meetings and webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingArchiveTokenForLocalArchivingRequestBuilder getMeetingArchiveTokenForLocalArchiving(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new GetMeetingArchiveTokenForLocalArchivingRequestBuilder(webinarId);
    }
    private okhttp3.Call getPollDetailsCall(Long webinarId, String pollId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/polls/{pollId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()))
            .replace("{" + "pollId" + "}", localVarApiClient.escapeString(pollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPollDetailsValidateBeforeCall(Long webinarId, String pollId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getPollDetails(Async)");
        }

        // verify the required parameter 'pollId' is set
        if (pollId == null) {
            throw new ApiException("Missing the required parameter 'pollId' when calling getPollDetails(Async)");
        }

        return getPollDetailsCall(webinarId, pollId, _callback);

    }


    private ApiResponse<WebinarsGetPollDetailsResponse> getPollDetailsWithHttpInfo(Long webinarId, String pollId) throws ApiException {
        okhttp3.Call localVarCall = getPollDetailsValidateBeforeCall(webinarId, pollId, null);
        Type localVarReturnType = new TypeToken<WebinarsGetPollDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPollDetailsAsync(Long webinarId, String pollId, final ApiCallback<WebinarsGetPollDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPollDetailsValidateBeforeCall(webinarId, pollId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsGetPollDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPollDetailsRequestBuilder {
        private final Long webinarId;
        private final String pollId;

        private GetPollDetailsRequestBuilder(Long webinarId, String pollId) {
            this.webinarId = webinarId;
            this.pollId = pollId;
        }

        /**
         * Build call for getPollDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar Poll object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPollDetailsCall(webinarId, pollId, _callback);
        }


        /**
         * Execute getPollDetails request
         * @return WebinarsGetPollDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar Poll object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsGetPollDetailsResponse execute() throws ApiException {
            ApiResponse<WebinarsGetPollDetailsResponse> localVarResp = getPollDetailsWithHttpInfo(webinarId, pollId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPollDetails request with HTTP info returned
         * @return ApiResponse&lt;WebinarsGetPollDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar Poll object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsGetPollDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getPollDetailsWithHttpInfo(webinarId, pollId);
        }

        /**
         * Execute getPollDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar Poll object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsGetPollDetailsResponse> _callback) throws ApiException {
            return getPollDetailsAsync(webinarId, pollId, _callback);
        }
    }

    /**
     * Get a webinar poll
     * Get a webinar&#39;s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.            **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @param pollId The poll ID (required)
     * @return GetPollDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar Poll object returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetPollDetailsRequestBuilder getPollDetails(Long webinarId, String pollId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        if (pollId == null) throw new IllegalArgumentException("\"pollId\" is required but got null");
            

        return new GetPollDetailsRequestBuilder(webinarId, pollId);
    }
    private okhttp3.Call getSessionBrandingCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/branding"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionBrandingValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getSessionBranding(Async)");
        }

        return getSessionBrandingCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsGetSessionBrandingResponse> getSessionBrandingWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = getSessionBrandingValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsGetSessionBrandingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSessionBrandingAsync(Long webinarId, final ApiCallback<WebinarsGetSessionBrandingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionBrandingValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsGetSessionBrandingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSessionBrandingRequestBuilder {
        private final Long webinarId;

        private GetSessionBrandingRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getSessionBranding
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar session branding returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; You cannot enable session branding for this webinar.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSessionBrandingCall(webinarId, _callback);
        }


        /**
         * Execute getSessionBranding request
         * @return WebinarsGetSessionBrandingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar session branding returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; You cannot enable session branding for this webinar.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsGetSessionBrandingResponse execute() throws ApiException {
            ApiResponse<WebinarsGetSessionBrandingResponse> localVarResp = getSessionBrandingWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSessionBranding request with HTTP info returned
         * @return ApiResponse&lt;WebinarsGetSessionBrandingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar session branding returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; You cannot enable session branding for this webinar.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsGetSessionBrandingResponse> executeWithHttpInfo() throws ApiException {
            return getSessionBrandingWithHttpInfo(webinarId);
        }

        /**
         * Execute getSessionBranding request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar session branding returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; You cannot enable session branding for this webinar.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsGetSessionBrandingResponse> _callback) throws ApiException {
            return getSessionBrandingAsync(webinarId, _callback);
        }
    }

    /**
     * Get webinar&#39;s session branding
     * Use this API to get the webinar&#39;s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) information. Session branding lets hosts visually customize a webinar by setting a webinar wallpaper that displays behind video tiles. Session branding also lets hosts set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:read&#x60;,&#x60;webinar:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return GetSessionBrandingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar session branding returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; You cannot enable session branding for this webinar.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
     </table>
     */
    public GetSessionBrandingRequestBuilder getSessionBranding(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new GetSessionBrandingRequestBuilder(webinarId);
    }
    private okhttp3.Call getSipUriWithPasscodeCall(Long webinarId, WebinarsGetSipUriWithPasscodeRequest webinarsGetSipUriWithPasscodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsGetSipUriWithPasscodeRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/sip_dialing"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSipUriWithPasscodeValidateBeforeCall(Long webinarId, WebinarsGetSipUriWithPasscodeRequest webinarsGetSipUriWithPasscodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getSipUriWithPasscode(Async)");
        }

        return getSipUriWithPasscodeCall(webinarId, webinarsGetSipUriWithPasscodeRequest, _callback);

    }


    private ApiResponse<WebinarsGetSipUriWithPasscodeResponse> getSipUriWithPasscodeWithHttpInfo(Long webinarId, WebinarsGetSipUriWithPasscodeRequest webinarsGetSipUriWithPasscodeRequest) throws ApiException {
        okhttp3.Call localVarCall = getSipUriWithPasscodeValidateBeforeCall(webinarId, webinarsGetSipUriWithPasscodeRequest, null);
        Type localVarReturnType = new TypeToken<WebinarsGetSipUriWithPasscodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSipUriWithPasscodeAsync(Long webinarId, WebinarsGetSipUriWithPasscodeRequest webinarsGetSipUriWithPasscodeRequest, final ApiCallback<WebinarsGetSipUriWithPasscodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSipUriWithPasscodeValidateBeforeCall(webinarId, webinarsGetSipUriWithPasscodeRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarsGetSipUriWithPasscodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSipUriWithPasscodeRequestBuilder {
        private final Long webinarId;
        private String passcode;

        private GetSipUriWithPasscodeRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set passcode
         * @param passcode If customers want a passcode to be embedded in the SIP URI dial string, they must supply the passcode. Zoom will not validate the passcode. (optional)
         * @return GetSipUriWithPasscodeRequestBuilder
         */
        public GetSipUriWithPasscodeRequestBuilder passcode(String passcode) {
            this.passcode = passcode;
            return this;
        }
        
        /**
         * Build call for getSipUriWithPasscode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;  Webinar&#39;s encoded SIP URI returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar Id does not exist. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid Webinar Id. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The webinar&#39;s SIP URI does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsGetSipUriWithPasscodeRequest webinarsGetSipUriWithPasscodeRequest = buildBodyParams();
            return getSipUriWithPasscodeCall(webinarId, webinarsGetSipUriWithPasscodeRequest, _callback);
        }

        private WebinarsGetSipUriWithPasscodeRequest buildBodyParams() {
            WebinarsGetSipUriWithPasscodeRequest webinarsGetSipUriWithPasscodeRequest = new WebinarsGetSipUriWithPasscodeRequest();
            webinarsGetSipUriWithPasscodeRequest.passcode(this.passcode);
            return webinarsGetSipUriWithPasscodeRequest;
        }

        /**
         * Execute getSipUriWithPasscode request
         * @return WebinarsGetSipUriWithPasscodeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;  Webinar&#39;s encoded SIP URI returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar Id does not exist. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid Webinar Id. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The webinar&#39;s SIP URI does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsGetSipUriWithPasscodeResponse execute() throws ApiException {
            WebinarsGetSipUriWithPasscodeRequest webinarsGetSipUriWithPasscodeRequest = buildBodyParams();
            ApiResponse<WebinarsGetSipUriWithPasscodeResponse> localVarResp = getSipUriWithPasscodeWithHttpInfo(webinarId, webinarsGetSipUriWithPasscodeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSipUriWithPasscode request with HTTP info returned
         * @return ApiResponse&lt;WebinarsGetSipUriWithPasscodeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;  Webinar&#39;s encoded SIP URI returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar Id does not exist. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid Webinar Id. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The webinar&#39;s SIP URI does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsGetSipUriWithPasscodeResponse> executeWithHttpInfo() throws ApiException {
            WebinarsGetSipUriWithPasscodeRequest webinarsGetSipUriWithPasscodeRequest = buildBodyParams();
            return getSipUriWithPasscodeWithHttpInfo(webinarId, webinarsGetSipUriWithPasscodeRequest);
        }

        /**
         * Execute getSipUriWithPasscode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;  Webinar&#39;s encoded SIP URI returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar Id does not exist. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid Webinar Id. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The webinar&#39;s SIP URI does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsGetSipUriWithPasscodeResponse> _callback) throws ApiException {
            WebinarsGetSipUriWithPasscodeRequest webinarsGetSipUriWithPasscodeRequest = buildBodyParams();
            return getSipUriWithPasscodeAsync(webinarId, webinarsGetSipUriWithPasscodeRequest, _callback);
        }
    }

    /**
     * Get a webinar SIP URI with Passcode
     * Get a webinar&#39;s SIP URI. The URI consists of the webinar ID, an optional user-supplied passcode, and participant identifier code. The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period in seconds.   **Scopes:** &#x60;webinar:write:admin:sip_dialing&#x60;,&#x60;webinar:write:sip_dialing&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Webinar IDs can exceed 10 digits. (required)
     * @return GetSipUriWithPasscodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;  Webinar&#39;s encoded SIP URI returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar Id does not exist. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid Webinar Id. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The webinar&#39;s SIP URI does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetSipUriWithPasscodeRequestBuilder getSipUriWithPasscode(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new GetSipUriWithPasscodeRequestBuilder(webinarId);
    }
    private okhttp3.Call getSurveyCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/survey"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSurveyValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getSurvey(Async)");
        }

        return getSurveyCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsGetSurveyResponse> getSurveyWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = getSurveyValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsGetSurveyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSurveyAsync(Long webinarId, final ApiCallback<WebinarsGetSurveyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSurveyValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsGetSurveyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSurveyRequestBuilder {
        private final Long webinarId;

        private GetSurveyRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getSurvey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Webinar survey object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To enable this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSurveyCall(webinarId, _callback);
        }


        /**
         * Execute getSurvey request
         * @return WebinarsGetSurveyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Webinar survey object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To enable this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsGetSurveyResponse execute() throws ApiException {
            ApiResponse<WebinarsGetSurveyResponse> localVarResp = getSurveyWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSurvey request with HTTP info returned
         * @return ApiResponse&lt;WebinarsGetSurveyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Webinar survey object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To enable this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsGetSurveyResponse> executeWithHttpInfo() throws ApiException {
            return getSurveyWithHttpInfo(webinarId);
        }

        /**
         * Execute getSurvey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Webinar survey object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To enable this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsGetSurveyResponse> _callback) throws ApiException {
            return getSurveyAsync(webinarId, _callback);
        }
    }

    /**
     * Get a webinar survey
     * Return information about a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host&#39;s account.  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return GetSurveyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Webinar survey object returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To enable this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetSurveyRequestBuilder getSurvey(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new GetSurveyRequestBuilder(webinarId);
    }
    private okhttp3.Call getWebinarTokenCall(Long webinarId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/token"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebinarTokenValidateBeforeCall(Long webinarId, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getWebinarToken(Async)");
        }

        return getWebinarTokenCall(webinarId, type, _callback);

    }


    private ApiResponse<WebinarsGetWebinarTokenResponse> getWebinarTokenWithHttpInfo(Long webinarId, String type) throws ApiException {
        okhttp3.Call localVarCall = getWebinarTokenValidateBeforeCall(webinarId, type, null);
        Type localVarReturnType = new TypeToken<WebinarsGetWebinarTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebinarTokenAsync(Long webinarId, String type, final ApiCallback<WebinarsGetWebinarTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebinarTokenValidateBeforeCall(webinarId, type, _callback);
        Type localVarReturnType = new TypeToken<WebinarsGetWebinarTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebinarTokenRequestBuilder {
        private final Long webinarId;
        private String type;

        private GetWebinarTokenRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set type
         * @param type The webinar token type:  * &#x60;closed_caption_token&#x60; &amp;mdash; The third-party closed caption API token.   This defaults to &#x60;closed_caption_token&#x60;. (optional, default to closed_caption_token)
         * @return GetWebinarTokenRequestBuilder
         */
        public GetWebinarTokenRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for getWebinarToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Closed captioning disabled. To enable this feature, enable the \&quot;Closed captioning\&quot; and \&quot;Allow use of caption API Token to integrate with 3rd-party Closed Captioning services\&quot; settings in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Webinar {webinarId} has not started.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebinarTokenCall(webinarId, type, _callback);
        }


        /**
         * Execute getWebinarToken request
         * @return WebinarsGetWebinarTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Closed captioning disabled. To enable this feature, enable the \&quot;Closed captioning\&quot; and \&quot;Allow use of caption API Token to integrate with 3rd-party Closed Captioning services\&quot; settings in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Webinar {webinarId} has not started.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsGetWebinarTokenResponse execute() throws ApiException {
            ApiResponse<WebinarsGetWebinarTokenResponse> localVarResp = getWebinarTokenWithHttpInfo(webinarId, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebinarToken request with HTTP info returned
         * @return ApiResponse&lt;WebinarsGetWebinarTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Closed captioning disabled. To enable this feature, enable the \&quot;Closed captioning\&quot; and \&quot;Allow use of caption API Token to integrate with 3rd-party Closed Captioning services\&quot; settings in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Webinar {webinarId} has not started.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsGetWebinarTokenResponse> executeWithHttpInfo() throws ApiException {
            return getWebinarTokenWithHttpInfo(webinarId, type);
        }

        /**
         * Execute getWebinarToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Closed captioning disabled. To enable this feature, enable the \&quot;Closed captioning\&quot; and \&quot;Allow use of caption API Token to integrate with 3rd-party Closed Captioning services\&quot; settings in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Webinar {webinarId} has not started.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsGetWebinarTokenResponse> _callback) throws ApiException {
            return getWebinarTokenAsync(webinarId, type, _callback);
        }
    }

    /**
     * Get webinar&#39;s token
     * Use this API to get a webinar&#39;s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Closed captioning** setting enabled in the Zoom web portal.  *  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** &#x60;webinar:read&#x60;,&#x60;webinar:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return GetWebinarTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar token returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Closed captioning disabled. To enable this feature, enable the \&quot;Closed captioning\&quot; and \&quot;Allow use of caption API Token to integrate with 3rd-party Closed Captioning services\&quot; settings in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Webinar {webinarId} has not started.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
     </table>
     */
    public GetWebinarTokenRequestBuilder getWebinarToken(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new GetWebinarTokenRequestBuilder(webinarId);
    }
    private okhttp3.Call joinTokenLiveStreamingCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/jointoken/live_streaming"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call joinTokenLiveStreamingValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling joinTokenLiveStreaming(Async)");
        }

        return joinTokenLiveStreamingCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsJoinTokenLiveStreamingResponse> joinTokenLiveStreamingWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = joinTokenLiveStreamingValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsJoinTokenLiveStreamingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call joinTokenLiveStreamingAsync(Long webinarId, final ApiCallback<WebinarsJoinTokenLiveStreamingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = joinTokenLiveStreamingValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsJoinTokenLiveStreamingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class JoinTokenLiveStreamingRequestBuilder {
        private final Long webinarId;

        private JoinTokenLiveStreamingRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for joinTokenLiveStreaming
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar live streaming token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start live streaming. To use this feature, enable the \&quot;Allow livestreaming of webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return joinTokenLiveStreamingCall(webinarId, _callback);
        }


        /**
         * Execute joinTokenLiveStreaming request
         * @return WebinarsJoinTokenLiveStreamingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar live streaming token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start live streaming. To use this feature, enable the \&quot;Allow livestreaming of webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsJoinTokenLiveStreamingResponse execute() throws ApiException {
            ApiResponse<WebinarsJoinTokenLiveStreamingResponse> localVarResp = joinTokenLiveStreamingWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute joinTokenLiveStreaming request with HTTP info returned
         * @return ApiResponse&lt;WebinarsJoinTokenLiveStreamingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar live streaming token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start live streaming. To use this feature, enable the \&quot;Allow livestreaming of webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsJoinTokenLiveStreamingResponse> executeWithHttpInfo() throws ApiException {
            return joinTokenLiveStreamingWithHttpInfo(webinarId);
        }

        /**
         * Execute joinTokenLiveStreaming request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar live streaming token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start live streaming. To use this feature, enable the \&quot;Allow livestreaming of webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsJoinTokenLiveStreamingResponse> _callback) throws ApiException {
            return joinTokenLiveStreamingAsync(webinarId, _callback);
        }
    }

    /**
     * Get a webinar&#39;s join token for live streaming
     * Use this API to get a webinar&#39;s archive token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &amp;quot;hosted by the issuer of the token&amp;quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Allow livestreaming of webinars** user setting enabled in the Zoom web portal.  **Scopes:** &#x60;webinar_token:read:admin:live_streaming&#x60;,&#x60;webinar_token:read:live_streaming&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return JoinTokenLiveStreamingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Webinar live streaming token returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid webinar ID.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start live streaming. To use this feature, enable the \&quot;Allow livestreaming of webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Webinar ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar does not exist: {webinarId}   </td><td>  -  </td></tr>
     </table>
     */
    public JoinTokenLiveStreamingRequestBuilder joinTokenLiveStreaming(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new JoinTokenLiveStreamingRequestBuilder(webinarId);
    }
    private okhttp3.Call listAbsenteesCall(String webinarId, String occurrenceId, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_webinars/{webinarId}/absentees"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAbsenteesValidateBeforeCall(String webinarId, String occurrenceId, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling listAbsentees(Async)");
        }

        return listAbsenteesCall(webinarId, occurrenceId, pageSize, nextPageToken, _callback);

    }


    private ApiResponse<WebinarsListAbsenteesResponse> listAbsenteesWithHttpInfo(String webinarId, String occurrenceId, Integer pageSize, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = listAbsenteesValidateBeforeCall(webinarId, occurrenceId, pageSize, nextPageToken, null);
        Type localVarReturnType = new TypeToken<WebinarsListAbsenteesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAbsenteesAsync(String webinarId, String occurrenceId, Integer pageSize, String nextPageToken, final ApiCallback<WebinarsListAbsenteesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAbsenteesValidateBeforeCall(webinarId, occurrenceId, pageSize, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListAbsenteesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAbsenteesRequestBuilder {
        private final String webinarId;
        private String occurrenceId;
        private Integer pageSize;
        private String nextPageToken;

        private ListAbsenteesRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set occurrenceId
         * @param occurrenceId The meeting or webinar occurrence ID. (optional)
         * @return ListAbsenteesRequestBuilder
         */
        public ListAbsenteesRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListAbsenteesRequestBuilder
         */
        public ListAbsenteesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return ListAbsenteesRequestBuilder
         */
        public ListAbsenteesRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for listAbsentees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success.    **Error Code:** &#x60;200&#x60;      Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  The request could not be completed because you have provided an invalid occurrence ID: {occurrenceId}&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  This Webinar has not registration required: {webinarUUID} &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting ID is invalid or not end. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAbsenteesCall(webinarId, occurrenceId, pageSize, nextPageToken, _callback);
        }


        /**
         * Execute listAbsentees request
         * @return WebinarsListAbsenteesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success.    **Error Code:** &#x60;200&#x60;      Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  The request could not be completed because you have provided an invalid occurrence ID: {occurrenceId}&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  This Webinar has not registration required: {webinarUUID} &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting ID is invalid or not end. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListAbsenteesResponse execute() throws ApiException {
            ApiResponse<WebinarsListAbsenteesResponse> localVarResp = listAbsenteesWithHttpInfo(webinarId, occurrenceId, pageSize, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAbsentees request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListAbsenteesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success.    **Error Code:** &#x60;200&#x60;      Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  The request could not be completed because you have provided an invalid occurrence ID: {occurrenceId}&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  This Webinar has not registration required: {webinarUUID} &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting ID is invalid or not end. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListAbsenteesResponse> executeWithHttpInfo() throws ApiException {
            return listAbsenteesWithHttpInfo(webinarId, occurrenceId, pageSize, nextPageToken);
        }

        /**
         * Execute listAbsentees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success.    **Error Code:** &#x60;200&#x60;      Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  The request could not be completed because you have provided an invalid occurrence ID: {occurrenceId}&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  This Webinar has not registration required: {webinarUUID} &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting ID is invalid or not end. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListAbsenteesResponse> _callback) throws ApiException {
            return listAbsenteesAsync(webinarId, occurrenceId, pageSize, nextPageToken, _callback);
        }
    }

    /**
     * Get webinar absentees
     * List absentees of a webinar.            **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;HEAVY&#x60;
     * @param webinarId The webinar&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
     * @return ListAbsenteesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Success.    **Error Code:** &#x60;200&#x60;      Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  The request could not be completed because you have provided an invalid occurrence ID: {occurrenceId}&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  This Webinar has not registration required: {webinarUUID} &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting ID is invalid or not end. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListAbsenteesRequestBuilder listAbsentees(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new ListAbsenteesRequestBuilder(webinarId);
    }
    private okhttp3.Call listPanelistsCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/panelists"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPanelistsValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling listPanelists(Async)");
        }

        return listPanelistsCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsListPanelistsResponse> listPanelistsWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = listPanelistsValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsListPanelistsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPanelistsAsync(Long webinarId, final ApiCallback<WebinarsListPanelistsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPanelistsValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListPanelistsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPanelistsRequestBuilder {
        private final Long webinarId;

        private ListPanelistsRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for listPanelists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar plan subscription missing. Enable webinar for this user once the subscription is added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPanelistsCall(webinarId, _callback);
        }


        /**
         * Execute listPanelists request
         * @return WebinarsListPanelistsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar plan subscription missing. Enable webinar for this user once the subscription is added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListPanelistsResponse execute() throws ApiException {
            ApiResponse<WebinarsListPanelistsResponse> localVarResp = listPanelistsWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPanelists request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListPanelistsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar plan subscription missing. Enable webinar for this user once the subscription is added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListPanelistsResponse> executeWithHttpInfo() throws ApiException {
            return listPanelistsWithHttpInfo(webinarId);
        }

        /**
         * Execute listPanelists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar plan subscription missing. Enable webinar for this user once the subscription is added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListPanelistsResponse> _callback) throws ApiException {
            return listPanelistsAsync(webinarId, _callback);
        }
    }

    /**
     * List panelists
     * List all of a webinar&#39;s panelists.    Webinar panelists can view and send video, screen share, annotate, and do much more compared to webinar attendees.    **Prerequisites:**     * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return ListPanelistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar plan subscription missing. Enable webinar for this user once the subscription is added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListPanelistsRequestBuilder listPanelists(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new ListPanelistsRequestBuilder(webinarId);
    }
    private okhttp3.Call listParticipantsCall(String webinarId, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_webinars/{webinarId}/participants"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listParticipantsValidateBeforeCall(String webinarId, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling listParticipants(Async)");
        }

        return listParticipantsCall(webinarId, pageSize, nextPageToken, _callback);

    }


    private ApiResponse<WebinarsListParticipantsResponse> listParticipantsWithHttpInfo(String webinarId, Integer pageSize, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = listParticipantsValidateBeforeCall(webinarId, pageSize, nextPageToken, null);
        Type localVarReturnType = new TypeToken<WebinarsListParticipantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listParticipantsAsync(String webinarId, Integer pageSize, String nextPageToken, final ApiCallback<WebinarsListParticipantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listParticipantsValidateBeforeCall(webinarId, pageSize, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListParticipantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListParticipantsRequestBuilder {
        private final String webinarId;
        private Integer pageSize;
        private String nextPageToken;

        private ListParticipantsRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListParticipantsRequestBuilder
         */
        public ListParticipantsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return ListParticipantsRequestBuilder
         */
        public ListParticipantsRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for listParticipants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Participants list returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; Only available for paid account: {accountId}.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The next page token is invalid or expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listParticipantsCall(webinarId, pageSize, nextPageToken, _callback);
        }


        /**
         * Execute listParticipants request
         * @return WebinarsListParticipantsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Participants list returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; Only available for paid account: {accountId}.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The next page token is invalid or expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListParticipantsResponse execute() throws ApiException {
            ApiResponse<WebinarsListParticipantsResponse> localVarResp = listParticipantsWithHttpInfo(webinarId, pageSize, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listParticipants request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListParticipantsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Participants list returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; Only available for paid account: {accountId}.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The next page token is invalid or expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListParticipantsResponse> executeWithHttpInfo() throws ApiException {
            return listParticipantsWithHttpInfo(webinarId, pageSize, nextPageToken);
        }

        /**
         * Execute listParticipants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Participants list returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; Only available for paid account: {accountId}.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The next page token is invalid or expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListParticipantsResponse> _callback) throws ApiException {
            return listParticipantsAsync(webinarId, pageSize, nextPageToken, _callback);
        }
    }

    /**
     * List webinar participants
     * Retrieve a list of all the participants who attended a webinar hosted in the past.   **Prerequisites:**  * A Pro or higher plan with a webinar add-on.  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param webinarId The webinar&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
     * @return ListParticipantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Participants list returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  No permission.&lt;br&gt; Only available for paid account: {accountId}.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The next page token is invalid or expired. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListParticipantsRequestBuilder listParticipants(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new ListParticipantsRequestBuilder(webinarId);
    }
    private okhttp3.Call listPastInstancesCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_webinars/{webinarId}/instances"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPastInstancesValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling listPastInstances(Async)");
        }

        return listPastInstancesCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsListPastInstancesResponse> listPastInstancesWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = listPastInstancesValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsListPastInstancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPastInstancesAsync(Long webinarId, final ApiCallback<WebinarsListPastInstancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPastInstancesValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListPastInstancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPastInstancesRequestBuilder {
        private final Long webinarId;

        private ListPastInstancesRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for listPastInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of past webinar instances returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPastInstancesCall(webinarId, _callback);
        }


        /**
         * Execute listPastInstances request
         * @return WebinarsListPastInstancesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of past webinar instances returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListPastInstancesResponse execute() throws ApiException {
            ApiResponse<WebinarsListPastInstancesResponse> localVarResp = listPastInstancesWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPastInstances request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListPastInstancesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of past webinar instances returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListPastInstancesResponse> executeWithHttpInfo() throws ApiException {
            return listPastInstancesWithHttpInfo(webinarId);
        }

        /**
         * Execute listPastInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of past webinar instances returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListPastInstancesResponse> _callback) throws ApiException {
            return listPastInstancesAsync(webinarId, _callback);
        }
    }

    /**
     * List past webinar instances
     * List past webinar instances.            **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return ListPastInstancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of past webinar instances returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
     </table>
     */
    public ListPastInstancesRequestBuilder listPastInstances(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new ListPastInstancesRequestBuilder(webinarId);
    }
    private okhttp3.Call listPastWebinarQaCall(String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_webinars/{webinarId}/qa"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPastWebinarQaValidateBeforeCall(String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling listPastWebinarQa(Async)");
        }

        return listPastWebinarQaCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsListPastWebinarQaResponse> listPastWebinarQaWithHttpInfo(String webinarId) throws ApiException {
        okhttp3.Call localVarCall = listPastWebinarQaValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsListPastWebinarQaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPastWebinarQaAsync(String webinarId, final ApiCallback<WebinarsListPastWebinarQaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPastWebinarQaValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListPastWebinarQaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPastWebinarQaRequestBuilder {
        private final String webinarId;

        private ListPastWebinarQaRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for listPastWebinarQa
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Q&amp;amp;A returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar ID is invalid or not end.&lt;br&gt; This webinar id does not belong to you:{webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPastWebinarQaCall(webinarId, _callback);
        }


        /**
         * Execute listPastWebinarQa request
         * @return WebinarsListPastWebinarQaResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Q&amp;amp;A returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar ID is invalid or not end.&lt;br&gt; This webinar id does not belong to you:{webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListPastWebinarQaResponse execute() throws ApiException {
            ApiResponse<WebinarsListPastWebinarQaResponse> localVarResp = listPastWebinarQaWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPastWebinarQa request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListPastWebinarQaResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Q&amp;amp;A returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar ID is invalid or not end.&lt;br&gt; This webinar id does not belong to you:{webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListPastWebinarQaResponse> executeWithHttpInfo() throws ApiException {
            return listPastWebinarQaWithHttpInfo(webinarId);
        }

        /**
         * Execute listPastWebinarQa request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Q&amp;amp;A returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar ID is invalid or not end.&lt;br&gt; This webinar id does not belong to you:{webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListPastWebinarQaResponse> _callback) throws ApiException {
            return listPastWebinarQaAsync(webinarId, _callback);
        }
    }

    /**
     * List Q&amp;As of a past webinar
     * List the Q&amp;amp;A of a specific past webinar.   The [question &amp;amp; answer (Q&amp;amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for webinars lets attendees ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.   **Prerequisites**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param webinarId The webinar&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
     * @return ListPastWebinarQaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Q&amp;amp;A returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar ID is invalid or not end.&lt;br&gt; This webinar id does not belong to you:{webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListPastWebinarQaRequestBuilder listPastWebinarQa(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new ListPastWebinarQaRequestBuilder(webinarId);
    }
    private okhttp3.Call listPollResultsCall(String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_webinars/{webinarId}/polls"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPollResultsValidateBeforeCall(String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling listPollResults(Async)");
        }

        return listPollResultsCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsListPollResultsResponse> listPollResultsWithHttpInfo(String webinarId) throws ApiException {
        okhttp3.Call localVarCall = listPollResultsValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsListPollResultsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPollResultsAsync(String webinarId, final ApiCallback<WebinarsListPollResultsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPollResultsValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListPollResultsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPollResultsRequestBuilder {
        private final String webinarId;

        private ListPollResultsRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for listPollResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Polls returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar ID is invalid or not end.&lt;br&gt; This webinar id does not belong to you:{webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPollResultsCall(webinarId, _callback);
        }


        /**
         * Execute listPollResults request
         * @return WebinarsListPollResultsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Polls returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar ID is invalid or not end.&lt;br&gt; This webinar id does not belong to you:{webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListPollResultsResponse execute() throws ApiException {
            ApiResponse<WebinarsListPollResultsResponse> localVarResp = listPollResultsWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPollResults request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListPollResultsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Polls returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar ID is invalid or not end.&lt;br&gt; This webinar id does not belong to you:{webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListPollResultsResponse> executeWithHttpInfo() throws ApiException {
            return listPollResultsWithHttpInfo(webinarId);
        }

        /**
         * Execute listPollResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Polls returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar ID is invalid or not end.&lt;br&gt; This webinar id does not belong to you:{webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListPollResultsResponse> _callback) throws ApiException {
            return listPollResultsAsync(webinarId, _callback);
        }
    }

    /**
     * List past webinar poll results
     * The polling feature for webinar lets you create single-choice or multiple-choice polling questions for your webinars. This API endpoint retrieves the results for webinar polls of a specific webinar.  **Prerequisites:**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param webinarId The webinar&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request. (required)
     * @return ListPollResultsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Polls returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar ID is invalid or not end.&lt;br&gt; This webinar id does not belong to you:{webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListPollResultsRequestBuilder listPollResults(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new ListPollResultsRequestBuilder(webinarId);
    }
    private okhttp3.Call listPollsCall(Long webinarId, Boolean anonymous, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/polls"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (anonymous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anonymous", anonymous));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPollsValidateBeforeCall(Long webinarId, Boolean anonymous, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling listPolls(Async)");
        }

        return listPollsCall(webinarId, anonymous, _callback);

    }


    private ApiResponse<WebinarsListPollsResponse> listPollsWithHttpInfo(Long webinarId, Boolean anonymous) throws ApiException {
        okhttp3.Call localVarCall = listPollsValidateBeforeCall(webinarId, anonymous, null);
        Type localVarReturnType = new TypeToken<WebinarsListPollsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPollsAsync(Long webinarId, Boolean anonymous, final ApiCallback<WebinarsListPollsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPollsValidateBeforeCall(webinarId, anonymous, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListPollsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPollsRequestBuilder {
        private final Long webinarId;
        private Boolean anonymous;

        private ListPollsRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set anonymous
         * @param anonymous Whether to query for polls with the **Anonymous** option enabled:  * &#x60;true&#x60; &amp;mdash; Query for polls with the **Anonymous** option enabled.  * &#x60;false&#x60; &amp;mdash; Do not query for polls with the **Anonymous** option enabled. (optional)
         * @return ListPollsRequestBuilder
         */
        public ListPollsRequestBuilder anonymous(Boolean anonymous) {
            this.anonymous = anonymous;
            return this;
        }
        
        /**
         * Build call for listPolls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List polls of a Webinar  returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPollsCall(webinarId, anonymous, _callback);
        }


        /**
         * Execute listPolls request
         * @return WebinarsListPollsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List polls of a Webinar  returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListPollsResponse execute() throws ApiException {
            ApiResponse<WebinarsListPollsResponse> localVarResp = listPollsWithHttpInfo(webinarId, anonymous);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPolls request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListPollsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List polls of a Webinar  returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListPollsResponse> executeWithHttpInfo() throws ApiException {
            return listPollsWithHttpInfo(webinarId, anonymous);
        }

        /**
         * Execute listPolls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List polls of a Webinar  returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListPollsResponse> _callback) throws ApiException {
            return listPollsAsync(webinarId, anonymous, _callback);
        }
    }

    /**
     * List a webinar&#39;s polls 
     * List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.            **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return ListPollsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List polls of a Webinar  returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
     </table>
     */
    public ListPollsRequestBuilder listPolls(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new ListPollsRequestBuilder(webinarId);
    }
    private okhttp3.Call listRegistrantsCall(Long webinarId, String occurrenceId, String status, String trackingSourceId, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/registrants"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (trackingSourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tracking_source_id", trackingSourceId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRegistrantsValidateBeforeCall(Long webinarId, String occurrenceId, String status, String trackingSourceId, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling listRegistrants(Async)");
        }

        return listRegistrantsCall(webinarId, occurrenceId, status, trackingSourceId, pageSize, pageNumber, nextPageToken, _callback);

    }


    private ApiResponse<WebinarsListRegistrantsResponse> listRegistrantsWithHttpInfo(Long webinarId, String occurrenceId, String status, String trackingSourceId, Integer pageSize, Integer pageNumber, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = listRegistrantsValidateBeforeCall(webinarId, occurrenceId, status, trackingSourceId, pageSize, pageNumber, nextPageToken, null);
        Type localVarReturnType = new TypeToken<WebinarsListRegistrantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRegistrantsAsync(Long webinarId, String occurrenceId, String status, String trackingSourceId, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback<WebinarsListRegistrantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRegistrantsValidateBeforeCall(webinarId, occurrenceId, status, trackingSourceId, pageSize, pageNumber, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListRegistrantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRegistrantsRequestBuilder {
        private final Long webinarId;
        private String occurrenceId;
        private String status;
        private String trackingSourceId;
        private Integer pageSize;
        private Integer pageNumber;
        private String nextPageToken;

        private ListRegistrantsRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set occurrenceId
         * @param occurrenceId The meeting or webinar occurrence ID. (optional)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Set status
         * @param status Query by the registrant&#39;s status.  * &#x60;pending&#x60; - The registration is pending.  * &#x60;approved&#x60; - The registrant is approved.  * &#x60;denied&#x60; - The registration is denied. (optional, default to approved)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set trackingSourceId
         * @param trackingSourceId The tracking source ID for the registrants. Useful if you share the webinar registration page in multiple locations. See [Creating source tracking links for webinar registration](https://support.zoom.us/hc/en-us/articles/360000315683-Creating-source-tracking-links-for-webinar-registration) for details. (optional)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder trackingSourceId(String trackingSourceId) {
            this.trackingSourceId = trackingSourceId;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber **Deprecated** This field will be deprecated. We will no longer support this field in a future release. Instead, use the &#x60;next_page_token&#x60; for pagination. (optional, default to 1)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for listRegistrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRegistrantsCall(webinarId, occurrenceId, status, trackingSourceId, pageSize, pageNumber, nextPageToken, _callback);
        }


        /**
         * Execute listRegistrants request
         * @return WebinarsListRegistrantsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListRegistrantsResponse execute() throws ApiException {
            ApiResponse<WebinarsListRegistrantsResponse> localVarResp = listRegistrantsWithHttpInfo(webinarId, occurrenceId, status, trackingSourceId, pageSize, pageNumber, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRegistrants request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListRegistrantsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListRegistrantsResponse> executeWithHttpInfo() throws ApiException {
            return listRegistrantsWithHttpInfo(webinarId, occurrenceId, status, trackingSourceId, pageSize, pageNumber, nextPageToken);
        }

        /**
         * Execute listRegistrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListRegistrantsResponse> _callback) throws ApiException {
            return listRegistrantsAsync(webinarId, occurrenceId, status, trackingSourceId, pageSize, pageNumber, nextPageToken, _callback);
        }
    }

    /**
     * List webinar registrants
     * List all users that have registered for a given webinar. Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar functionality lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.     **Prerequisites** * Pro or higher plan with a Webinar Add-on.       **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return ListRegistrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListRegistrantsRequestBuilder listRegistrants(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new ListRegistrantsRequestBuilder(webinarId);
    }
    private okhttp3.Call listRegistrationQuestionsCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/registrants/questions"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRegistrationQuestionsValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling listRegistrationQuestions(Async)");
        }

        return listRegistrationQuestionsCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsListRegistrationQuestionsResponse> listRegistrationQuestionsWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = listRegistrationQuestionsValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsListRegistrationQuestionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRegistrationQuestionsAsync(Long webinarId, final ApiCallback<WebinarsListRegistrationQuestionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRegistrationQuestionsValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListRegistrationQuestionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRegistrationQuestionsRequestBuilder {
        private final Long webinarId;

        private ListRegistrationQuestionsRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for listRegistrationQuestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;   Webinar registrant question object returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRegistrationQuestionsCall(webinarId, _callback);
        }


        /**
         * Execute listRegistrationQuestions request
         * @return WebinarsListRegistrationQuestionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;   Webinar registrant question object returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListRegistrationQuestionsResponse execute() throws ApiException {
            ApiResponse<WebinarsListRegistrationQuestionsResponse> localVarResp = listRegistrationQuestionsWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRegistrationQuestions request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListRegistrationQuestionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;   Webinar registrant question object returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListRegistrationQuestionsResponse> executeWithHttpInfo() throws ApiException {
            return listRegistrationQuestionsWithHttpInfo(webinarId);
        }

        /**
         * Execute listRegistrationQuestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;   Webinar registrant question object returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListRegistrationQuestionsResponse> _callback) throws ApiException {
            return listRegistrationQuestionsAsync(webinarId, _callback);
        }
    }

    /**
     * List registration questions
     * List registration questions and fields that are to be answered by users while registering for a webinar.    Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.       **Prerequisites:**      * Pro or higher plan with the webinar add-on.   **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return ListRegistrationQuestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;   Webinar registrant question object returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
     </table>
     */
    public ListRegistrationQuestionsRequestBuilder listRegistrationQuestions(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new ListRegistrationQuestionsRequestBuilder(webinarId);
    }
    private okhttp3.Call listTrackingSourcesCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/tracking_sources"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrackingSourcesValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling listTrackingSources(Async)");
        }

        return listTrackingSourcesCall(webinarId, _callback);

    }


    private ApiResponse<WebinarsListTrackingSourcesResponse> listTrackingSourcesWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = listTrackingSourcesValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarsListTrackingSourcesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTrackingSourcesAsync(Long webinarId, final ApiCallback<WebinarsListTrackingSourcesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrackingSourcesValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListTrackingSourcesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTrackingSourcesRequestBuilder {
        private final Long webinarId;

        private ListTrackingSourcesRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for listTrackingSources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTrackingSourcesCall(webinarId, _callback);
        }


        /**
         * Execute listTrackingSources request
         * @return WebinarsListTrackingSourcesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListTrackingSourcesResponse execute() throws ApiException {
            ApiResponse<WebinarsListTrackingSourcesResponse> localVarResp = listTrackingSourcesWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTrackingSources request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListTrackingSourcesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListTrackingSourcesResponse> executeWithHttpInfo() throws ApiException {
            return listTrackingSourcesWithHttpInfo(webinarId);
        }

        /**
         * Execute listTrackingSources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListTrackingSourcesResponse> _callback) throws ApiException {
            return listTrackingSourcesAsync(webinarId, _callback);
        }
    }

    /**
     * Get webinar tracking sources
     * [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.     Use this API to list information on all the tracking sources of a Webinar.      **Prerequisites**:     * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.   **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return ListTrackingSourcesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; </td><td>  -  </td></tr>
     </table>
     */
    public ListTrackingSourcesRequestBuilder listTrackingSources(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new ListTrackingSourcesRequestBuilder(webinarId);
    }
    private okhttp3.Call listWebinarTemplatesCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/webinar_templates"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebinarTemplatesValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listWebinarTemplates(Async)");
        }

        return listWebinarTemplatesCall(userId, _callback);

    }


    private ApiResponse<WebinarsListWebinarTemplatesResponse> listWebinarTemplatesWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = listWebinarTemplatesValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<WebinarsListWebinarTemplatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWebinarTemplatesAsync(String userId, final ApiCallback<WebinarsListWebinarTemplatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebinarTemplatesValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListWebinarTemplatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWebinarTemplatesRequestBuilder {
        private final String userId;

        private ListWebinarTemplatesRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for listWebinarTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  List of existing templates returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Cannot use webinar API, you need to subscribe webinar plan and then enable webinar for this user:{userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  * User not exist: {userId}. * User {userId} does not exist or does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWebinarTemplatesCall(userId, _callback);
        }


        /**
         * Execute listWebinarTemplates request
         * @return WebinarsListWebinarTemplatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  List of existing templates returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Cannot use webinar API, you need to subscribe webinar plan and then enable webinar for this user:{userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  * User not exist: {userId}. * User {userId} does not exist or does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListWebinarTemplatesResponse execute() throws ApiException {
            ApiResponse<WebinarsListWebinarTemplatesResponse> localVarResp = listWebinarTemplatesWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWebinarTemplates request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListWebinarTemplatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  List of existing templates returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Cannot use webinar API, you need to subscribe webinar plan and then enable webinar for this user:{userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  * User not exist: {userId}. * User {userId} does not exist or does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListWebinarTemplatesResponse> executeWithHttpInfo() throws ApiException {
            return listWebinarTemplatesWithHttpInfo(userId);
        }

        /**
         * Execute listWebinarTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  List of existing templates returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Cannot use webinar API, you need to subscribe webinar plan and then enable webinar for this user:{userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  * User not exist: {userId}. * User {userId} does not exist or does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListWebinarTemplatesResponse> _callback) throws ApiException {
            return listWebinarTemplatesAsync(userId, _callback);
        }
    }

    /**
     * List webinar templates
     * Display a list of a user&#39;s [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us) instead of the &#x60;userId&#x60; parameter. When you schedule a webinar, save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the &#x60;id&#x60; value in this API response in the &#x60;template_id&#x60; field of the [**Create a webinar**](https://developers.zoom.us) API. **Prerequisites:** * A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar).  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;
     * @param userId The user&#39;s ID. To get a user&#39;s ID, use the [**List users**](https://developers.zoom.us) API. For user-level apps, pass the &#x60;me&#x60; value instead of the user ID value. (required)
     * @return ListWebinarTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**  List of existing templates returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  Cannot use webinar API, you need to subscribe webinar plan and then enable webinar for this user:{userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  * User not exist: {userId}. * User {userId} does not exist or does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListWebinarTemplatesRequestBuilder listWebinarTemplates(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListWebinarTemplatesRequestBuilder(userId);
    }
    private okhttp3.Call listWebinarsCall(String userId, String type, Integer pageSize, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/webinars"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebinarsValidateBeforeCall(String userId, String type, Integer pageSize, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listWebinars(Async)");
        }

        return listWebinarsCall(userId, type, pageSize, pageNumber, _callback);

    }


    private ApiResponse<WebinarsListWebinarsResponse> listWebinarsWithHttpInfo(String userId, String type, Integer pageSize, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = listWebinarsValidateBeforeCall(userId, type, pageSize, pageNumber, null);
        Type localVarReturnType = new TypeToken<WebinarsListWebinarsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWebinarsAsync(String userId, String type, Integer pageSize, Integer pageNumber, final ApiCallback<WebinarsListWebinarsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebinarsValidateBeforeCall(userId, type, pageSize, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<WebinarsListWebinarsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWebinarsRequestBuilder {
        private final String userId;
        private String type;
        private Integer pageSize;
        private Integer pageNumber;

        private ListWebinarsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set type
         * @param type The type of webinar.  * &#x60;scheduled&#x60; - All valid previous (unexpired) webinars, live webinars, and upcoming scheduled webinars.  * &#x60;upcoming&#x60; - All upcoming webinars, including live webinars. (optional, default to scheduled)
         * @return ListWebinarsRequestBuilder
         */
        public ListWebinarsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListWebinarsRequestBuilder
         */
        public ListWebinarsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber **Deprecated** We will no longer support this field in a future release. Instead, use the &#x60;next_page_token&#x60; for pagination. (optional, default to 1)
         * @return ListWebinarsRequestBuilder
         */
        public ListWebinarsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for listWebinars
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of webinar objects returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWebinarsCall(userId, type, pageSize, pageNumber, _callback);
        }


        /**
         * Execute listWebinars request
         * @return WebinarsListWebinarsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of webinar objects returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsListWebinarsResponse execute() throws ApiException {
            ApiResponse<WebinarsListWebinarsResponse> localVarResp = listWebinarsWithHttpInfo(userId, type, pageSize, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWebinars request with HTTP info returned
         * @return ApiResponse&lt;WebinarsListWebinarsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of webinar objects returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsListWebinarsResponse> executeWithHttpInfo() throws ApiException {
            return listWebinarsWithHttpInfo(userId, type, pageSize, pageNumber);
        }

        /**
         * Execute listWebinars request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of webinar objects returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsListWebinarsResponse> _callback) throws ApiException {
            return listWebinarsAsync(userId, type, pageSize, pageNumber, _callback);
        }
    }

    /**
     * List webinars
     * List all the webinars scheduled by or on behalf a webinar host. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.    Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars let a host broadcast a Zoom meeting to up to 10,000 attendees.   **Note** This API only returns a user&#39;s [unexpired webinars](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).    **Prerequisites**  * A Pro or higher plan with the webinar add-on.  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param userId The user&#39;s user ID or email address. For user-level apps, pass the &#x60;me&#x60; value. (required)
     * @return ListWebinarsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of webinar objects returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListWebinarsRequestBuilder listWebinars(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListWebinarsRequestBuilder(userId);
    }
    private okhttp3.Call registrantDetailsCall(Long webinarId, String registrantId, String occurrenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/registrants/{registrantId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()))
            .replace("{" + "registrantId" + "}", localVarApiClient.escapeString(registrantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrantDetailsValidateBeforeCall(Long webinarId, String registrantId, String occurrenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling registrantDetails(Async)");
        }

        // verify the required parameter 'registrantId' is set
        if (registrantId == null) {
            throw new ApiException("Missing the required parameter 'registrantId' when calling registrantDetails(Async)");
        }

        return registrantDetailsCall(webinarId, registrantId, occurrenceId, _callback);

    }


    private ApiResponse<WebinarsRegistrantDetailsResponse> registrantDetailsWithHttpInfo(Long webinarId, String registrantId, String occurrenceId) throws ApiException {
        okhttp3.Call localVarCall = registrantDetailsValidateBeforeCall(webinarId, registrantId, occurrenceId, null);
        Type localVarReturnType = new TypeToken<WebinarsRegistrantDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call registrantDetailsAsync(Long webinarId, String registrantId, String occurrenceId, final ApiCallback<WebinarsRegistrantDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrantDetailsValidateBeforeCall(webinarId, registrantId, occurrenceId, _callback);
        Type localVarReturnType = new TypeToken<WebinarsRegistrantDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegistrantDetailsRequestBuilder {
        private final Long webinarId;
        private final String registrantId;
        private String occurrenceId;

        private RegistrantDetailsRequestBuilder(Long webinarId, String registrantId) {
            this.webinarId = webinarId;
            this.registrantId = registrantId;
        }

        /**
         * Set occurrenceId
         * @param occurrenceId The meeting or webinar occurrence ID. (optional)
         * @return RegistrantDetailsRequestBuilder
         */
        public RegistrantDetailsRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Build call for registrantDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return registrantDetailsCall(webinarId, registrantId, occurrenceId, _callback);
        }


        /**
         * Execute registrantDetails request
         * @return WebinarsRegistrantDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsRegistrantDetailsResponse execute() throws ApiException {
            ApiResponse<WebinarsRegistrantDetailsResponse> localVarResp = registrantDetailsWithHttpInfo(webinarId, registrantId, occurrenceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute registrantDetails request with HTTP info returned
         * @return ApiResponse&lt;WebinarsRegistrantDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsRegistrantDetailsResponse> executeWithHttpInfo() throws ApiException {
            return registrantDetailsWithHttpInfo(webinarId, registrantId, occurrenceId);
        }

        /**
         * Execute registrantDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsRegistrantDetailsResponse> _callback) throws ApiException {
            return registrantDetailsAsync(webinarId, registrantId, occurrenceId, _callback);
        }
    }

    /**
     * Get a webinar registrant
     * Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar feature lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.    Use this API to get details on a specific user who has registered for the webinar.           **Prerequisites:**     * The account must have a webinar plan.  **Scopes:** &#x60;webinar:read:admin&#x60;,&#x60;webinar:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @param registrantId The registrant ID. (required)
     * @return RegistrantDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public RegistrantDetailsRequestBuilder registrantDetails(Long webinarId, String registrantId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        if (registrantId == null) throw new IllegalArgumentException("\"registrantId\" is required but got null");
            

        return new RegistrantDetailsRequestBuilder(webinarId, registrantId);
    }
    private okhttp3.Call removePanelistCall(Long webinarId, String panelistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/panelists/{panelistId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()))
            .replace("{" + "panelistId" + "}", localVarApiClient.escapeString(panelistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePanelistValidateBeforeCall(Long webinarId, String panelistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling removePanelist(Async)");
        }

        // verify the required parameter 'panelistId' is set
        if (panelistId == null) {
            throw new ApiException("Missing the required parameter 'panelistId' when calling removePanelist(Async)");
        }

        return removePanelistCall(webinarId, panelistId, _callback);

    }


    private ApiResponse<Void> removePanelistWithHttpInfo(Long webinarId, String panelistId) throws ApiException {
        okhttp3.Call localVarCall = removePanelistValidateBeforeCall(webinarId, panelistId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePanelistAsync(Long webinarId, String panelistId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePanelistValidateBeforeCall(webinarId, panelistId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePanelistRequestBuilder {
        private final Long webinarId;
        private final String panelistId;

        private RemovePanelistRequestBuilder(Long webinarId, String panelistId) {
            this.webinarId = webinarId;
            this.panelistId = panelistId;
        }

        /**
         * Build call for removePanelist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Panelist removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User  {accountId} does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {email} does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePanelistCall(webinarId, panelistId, _callback);
        }


        /**
         * Execute removePanelist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Panelist removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User  {accountId} does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {email} does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePanelistWithHttpInfo(webinarId, panelistId);
        }

        /**
         * Execute removePanelist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Panelist removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User  {accountId} does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {email} does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePanelistWithHttpInfo(webinarId, panelistId);
        }

        /**
         * Execute removePanelist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Panelist removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User  {accountId} does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {email} does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePanelistAsync(webinarId, panelistId, _callback);
        }
    }

    /**
     * Remove a panelist
     * [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.     Retrieve the &#x60;panelistId&#x60; by calling **List Panelists API**.           **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @param panelistId The panelist&#39;s ID or email. (required)
     * @return RemovePanelistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Panelist removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User  {accountId} does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {email} does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public RemovePanelistRequestBuilder removePanelist(Long webinarId, String panelistId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        if (panelistId == null) throw new IllegalArgumentException("\"panelistId\" is required but got null");
            

        return new RemovePanelistRequestBuilder(webinarId, panelistId);
    }
    private okhttp3.Call removePanelistsCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/panelists"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePanelistsValidateBeforeCall(Long webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling removePanelists(Async)");
        }

        return removePanelistsCall(webinarId, _callback);

    }


    private ApiResponse<Void> removePanelistsWithHttpInfo(Long webinarId) throws ApiException {
        okhttp3.Call localVarCall = removePanelistsValidateBeforeCall(webinarId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePanelistsAsync(Long webinarId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePanelistsValidateBeforeCall(webinarId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePanelistsRequestBuilder {
        private final Long webinarId;

        private RemovePanelistsRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for removePanelists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Panelists removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePanelistsCall(webinarId, _callback);
        }


        /**
         * Execute removePanelists request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Panelists removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePanelistsWithHttpInfo(webinarId);
        }

        /**
         * Execute removePanelists request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Panelists removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePanelistsWithHttpInfo(webinarId);
        }

        /**
         * Execute removePanelists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Panelists removed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePanelistsAsync(webinarId, _callback);
        }
    }

    /**
     * Remove webinar panelists
     * Remove all the panelists from a webinar.     **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return RemovePanelistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Panelists removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public RemovePanelistsRequestBuilder removePanelists(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new RemovePanelistsRequestBuilder(webinarId);
    }
    private okhttp3.Call removeWebinarCall(Long webinarId, String occurrenceId, Boolean cancelWebinarReminder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        if (cancelWebinarReminder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cancel_webinar_reminder", cancelWebinarReminder));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeWebinarValidateBeforeCall(Long webinarId, String occurrenceId, Boolean cancelWebinarReminder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling removeWebinar(Async)");
        }

        return removeWebinarCall(webinarId, occurrenceId, cancelWebinarReminder, _callback);

    }


    private ApiResponse<Void> removeWebinarWithHttpInfo(Long webinarId, String occurrenceId, Boolean cancelWebinarReminder) throws ApiException {
        okhttp3.Call localVarCall = removeWebinarValidateBeforeCall(webinarId, occurrenceId, cancelWebinarReminder, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeWebinarAsync(Long webinarId, String occurrenceId, Boolean cancelWebinarReminder, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeWebinarValidateBeforeCall(webinarId, occurrenceId, cancelWebinarReminder, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveWebinarRequestBuilder {
        private final Long webinarId;
        private String occurrenceId;
        private Boolean cancelWebinarReminder;

        private RemoveWebinarRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set occurrenceId
         * @param occurrenceId The meeting or webinar occurrence ID. (optional)
         * @return RemoveWebinarRequestBuilder
         */
        public RemoveWebinarRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Set cancelWebinarReminder
         * @param cancelWebinarReminder &#x60;true&#x60; - Notify panelists and registrants about the webinar cancellation via email.   &#x60;false&#x60; - Do not send any email notification to webinar registrants and panelists.   The default value of this field is &#x60;false&#x60;. (optional)
         * @return RemoveWebinarRequestBuilder
         */
        public RemoveWebinarRequestBuilder cancelWebinarReminder(Boolean cancelWebinarReminder) {
            this.cancelWebinarReminder = cancelWebinarReminder;
            return this;
        }
        
        /**
         * Build call for removeWebinar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Webinar deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3002&#x60; &lt;br&gt;  Sorry, you cannot delete this webinar since it is in progress.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the webinar host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3007&#x60; &lt;br&gt;  Sorry, you cannot delete this webinar since it has ended.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3018&#x60; &lt;br&gt;  Not allowed to delete PMI.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3037&#x60; &lt;br&gt;  Not allowed to delete PAC.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeWebinarCall(webinarId, occurrenceId, cancelWebinarReminder, _callback);
        }


        /**
         * Execute removeWebinar request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Webinar deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3002&#x60; &lt;br&gt;  Sorry, you cannot delete this webinar since it is in progress.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the webinar host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3007&#x60; &lt;br&gt;  Sorry, you cannot delete this webinar since it has ended.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3018&#x60; &lt;br&gt;  Not allowed to delete PMI.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3037&#x60; &lt;br&gt;  Not allowed to delete PAC.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeWebinarWithHttpInfo(webinarId, occurrenceId, cancelWebinarReminder);
        }

        /**
         * Execute removeWebinar request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Webinar deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3002&#x60; &lt;br&gt;  Sorry, you cannot delete this webinar since it is in progress.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the webinar host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3007&#x60; &lt;br&gt;  Sorry, you cannot delete this webinar since it has ended.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3018&#x60; &lt;br&gt;  Not allowed to delete PMI.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3037&#x60; &lt;br&gt;  Not allowed to delete PAC.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeWebinarWithHttpInfo(webinarId, occurrenceId, cancelWebinarReminder);
        }

        /**
         * Execute removeWebinar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Webinar deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3002&#x60; &lt;br&gt;  Sorry, you cannot delete this webinar since it is in progress.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the webinar host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3007&#x60; &lt;br&gt;  Sorry, you cannot delete this webinar since it has ended.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3018&#x60; &lt;br&gt;  Not allowed to delete PMI.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3037&#x60; &lt;br&gt;  Not allowed to delete PAC.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeWebinarAsync(webinarId, occurrenceId, cancelWebinarReminder, _callback);
        }
    }

    /**
     * Delete a webinar
     * Delete a webinar.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return RemoveWebinarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Webinar deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3002&#x60; &lt;br&gt;  Sorry, you cannot delete this webinar since it is in progress.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the webinar host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3007&#x60; &lt;br&gt;  Sorry, you cannot delete this webinar since it has ended.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3018&#x60; &lt;br&gt;  Not allowed to delete PMI.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3037&#x60; &lt;br&gt;  Not allowed to delete PAC.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveWebinarRequestBuilder removeWebinar(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new RemoveWebinarRequestBuilder(webinarId);
    }
    private okhttp3.Call setDefaultBrandingVirtualBackgroundCall(Long webinarId, String id, Boolean setDefaultForAllPanelists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/branding/virtual_backgrounds"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (setDefaultForAllPanelists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("set_default_for_all_panelists", setDefaultForAllPanelists));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultBrandingVirtualBackgroundValidateBeforeCall(Long webinarId, String id, Boolean setDefaultForAllPanelists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling setDefaultBrandingVirtualBackground(Async)");
        }

        return setDefaultBrandingVirtualBackgroundCall(webinarId, id, setDefaultForAllPanelists, _callback);

    }


    private ApiResponse<Void> setDefaultBrandingVirtualBackgroundWithHttpInfo(Long webinarId, String id, Boolean setDefaultForAllPanelists) throws ApiException {
        okhttp3.Call localVarCall = setDefaultBrandingVirtualBackgroundValidateBeforeCall(webinarId, id, setDefaultForAllPanelists, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setDefaultBrandingVirtualBackgroundAsync(Long webinarId, String id, Boolean setDefaultForAllPanelists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefaultBrandingVirtualBackgroundValidateBeforeCall(webinarId, id, setDefaultForAllPanelists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetDefaultBrandingVirtualBackgroundRequestBuilder {
        private final Long webinarId;
        private String id;
        private Boolean setDefaultForAllPanelists;

        private SetDefaultBrandingVirtualBackgroundRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set id
         * @param id The Virtual Background file ID to update. (optional)
         * @return SetDefaultBrandingVirtualBackgroundRequestBuilder
         */
        public SetDefaultBrandingVirtualBackgroundRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set setDefaultForAllPanelists
         * @param setDefaultForAllPanelists Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background. (optional)
         * @return SetDefaultBrandingVirtualBackgroundRequestBuilder
         */
        public SetDefaultBrandingVirtualBackgroundRequestBuilder setDefaultForAllPanelists(Boolean setDefaultForAllPanelists) {
            this.setDefaultForAllPanelists = setDefaultForAllPanelists;
            return this;
        }
        
        /**
         * Build call for setDefaultBrandingVirtualBackground
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Virtual Background updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: {id}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setDefaultBrandingVirtualBackgroundCall(webinarId, id, setDefaultForAllPanelists, _callback);
        }


        /**
         * Execute setDefaultBrandingVirtualBackground request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Virtual Background updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: {id}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            setDefaultBrandingVirtualBackgroundWithHttpInfo(webinarId, id, setDefaultForAllPanelists);
        }

        /**
         * Execute setDefaultBrandingVirtualBackground request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Virtual Background updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: {id}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return setDefaultBrandingVirtualBackgroundWithHttpInfo(webinarId, id, setDefaultForAllPanelists);
        }

        /**
         * Execute setDefaultBrandingVirtualBackground request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Virtual Background updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: {id}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return setDefaultBrandingVirtualBackgroundAsync(webinarId, id, setDefaultForAllPanelists, _callback);
        }
    }

    /**
     * Set webinar&#39;s default branding Virtual Background
     * Use this API to set a webinar&#39;s default session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return SetDefaultBrandingVirtualBackgroundRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Virtual Background updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid parameter: {id}  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
     </table>
     */
    public SetDefaultBrandingVirtualBackgroundRequestBuilder setDefaultBrandingVirtualBackground(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new SetDefaultBrandingVirtualBackgroundRequestBuilder(webinarId);
    }
    private okhttp3.Call updateBrandingNameTagCall(Long webinarId, String nameTagId, WebinarsUpdateBrandingNameTagRequest webinarsUpdateBrandingNameTagRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsUpdateBrandingNameTagRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/branding/name_tags/{nameTagId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()))
            .replace("{" + "nameTagId" + "}", localVarApiClient.escapeString(nameTagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBrandingNameTagValidateBeforeCall(Long webinarId, String nameTagId, WebinarsUpdateBrandingNameTagRequest webinarsUpdateBrandingNameTagRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updateBrandingNameTag(Async)");
        }

        // verify the required parameter 'nameTagId' is set
        if (nameTagId == null) {
            throw new ApiException("Missing the required parameter 'nameTagId' when calling updateBrandingNameTag(Async)");
        }

        return updateBrandingNameTagCall(webinarId, nameTagId, webinarsUpdateBrandingNameTagRequest, _callback);

    }


    private ApiResponse<Void> updateBrandingNameTagWithHttpInfo(Long webinarId, String nameTagId, WebinarsUpdateBrandingNameTagRequest webinarsUpdateBrandingNameTagRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBrandingNameTagValidateBeforeCall(webinarId, nameTagId, webinarsUpdateBrandingNameTagRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateBrandingNameTagAsync(Long webinarId, String nameTagId, WebinarsUpdateBrandingNameTagRequest webinarsUpdateBrandingNameTagRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBrandingNameTagValidateBeforeCall(webinarId, nameTagId, webinarsUpdateBrandingNameTagRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateBrandingNameTagRequestBuilder {
        private final Long webinarId;
        private final String nameTagId;
        private String name;
        private String textColor;
        private String accentColor;
        private String backgroundColor;
        private Boolean isDefault;
        private Boolean setDefaultForAllPanelists;

        private UpdateBrandingNameTagRequestBuilder(Long webinarId, String nameTagId) {
            this.webinarId = webinarId;
            this.nameTagId = nameTagId;
        }

        /**
         * Set name
         * @param name The name tag&#39;s name.  **Note:** This value cannot exceed more than 50 characters. (optional)
         * @return UpdateBrandingNameTagRequestBuilder
         */
        public UpdateBrandingNameTagRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set textColor
         * @param textColor The name tag&#39;s text color. (optional)
         * @return UpdateBrandingNameTagRequestBuilder
         */
        public UpdateBrandingNameTagRequestBuilder textColor(String textColor) {
            this.textColor = textColor;
            return this;
        }
        
        /**
         * Set accentColor
         * @param accentColor The name tag&#39;s accent color. (optional)
         * @return UpdateBrandingNameTagRequestBuilder
         */
        public UpdateBrandingNameTagRequestBuilder accentColor(String accentColor) {
            this.accentColor = accentColor;
            return this;
        }
        
        /**
         * Set backgroundColor
         * @param backgroundColor The name tag&#39;s background color. (optional)
         * @return UpdateBrandingNameTagRequestBuilder
         */
        public UpdateBrandingNameTagRequestBuilder backgroundColor(String backgroundColor) {
            this.backgroundColor = backgroundColor;
            return this;
        }
        
        /**
         * Set isDefault
         * @param isDefault Whether set the name tag as the default name tag or not. (optional, default to false)
         * @return UpdateBrandingNameTagRequestBuilder
         */
        public UpdateBrandingNameTagRequestBuilder isDefault(Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        
        /**
         * Set setDefaultForAllPanelists
         * @param setDefaultForAllPanelists Whether to set the name tag as the new default for all panelists or not. This includes panelists not currently assigned a default name tag. (optional, default to true)
         * @return UpdateBrandingNameTagRequestBuilder
         */
        public UpdateBrandingNameTagRequestBuilder setDefaultForAllPanelists(Boolean setDefaultForAllPanelists) {
            this.setDefaultForAllPanelists = setDefaultForAllPanelists;
            return this;
        }
        
        /**
         * Build call for updateBrandingNameTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Name tag updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsUpdateBrandingNameTagRequest webinarsUpdateBrandingNameTagRequest = buildBodyParams();
            return updateBrandingNameTagCall(webinarId, nameTagId, webinarsUpdateBrandingNameTagRequest, _callback);
        }

        private WebinarsUpdateBrandingNameTagRequest buildBodyParams() {
            WebinarsUpdateBrandingNameTagRequest webinarsUpdateBrandingNameTagRequest = new WebinarsUpdateBrandingNameTagRequest();
            webinarsUpdateBrandingNameTagRequest.name(this.name);
            webinarsUpdateBrandingNameTagRequest.textColor(this.textColor);
            webinarsUpdateBrandingNameTagRequest.accentColor(this.accentColor);
            webinarsUpdateBrandingNameTagRequest.backgroundColor(this.backgroundColor);
            webinarsUpdateBrandingNameTagRequest.isDefault(this.isDefault);
            webinarsUpdateBrandingNameTagRequest.setDefaultForAllPanelists(this.setDefaultForAllPanelists);
            return webinarsUpdateBrandingNameTagRequest;
        }

        /**
         * Execute updateBrandingNameTag request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Name tag updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebinarsUpdateBrandingNameTagRequest webinarsUpdateBrandingNameTagRequest = buildBodyParams();
            updateBrandingNameTagWithHttpInfo(webinarId, nameTagId, webinarsUpdateBrandingNameTagRequest);
        }

        /**
         * Execute updateBrandingNameTag request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Name tag updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebinarsUpdateBrandingNameTagRequest webinarsUpdateBrandingNameTagRequest = buildBodyParams();
            return updateBrandingNameTagWithHttpInfo(webinarId, nameTagId, webinarsUpdateBrandingNameTagRequest);
        }

        /**
         * Execute updateBrandingNameTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Name tag updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebinarsUpdateBrandingNameTagRequest webinarsUpdateBrandingNameTagRequest = buildBodyParams();
            return updateBrandingNameTagAsync(webinarId, nameTagId, webinarsUpdateBrandingNameTagRequest, _callback);
        }
    }

    /**
     * Update a webinar&#39;s branding name tag
     * Use this API to update a webinar&#39;s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @param nameTagId The name tag&#39;s ID. (required)
     * @return UpdateBrandingNameTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      * No content.  * Name tag updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBrandingNameTagRequestBuilder updateBrandingNameTag(Long webinarId, String nameTagId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        if (nameTagId == null) throw new IllegalArgumentException("\"nameTagId\" is required but got null");
            

        return new UpdateBrandingNameTagRequestBuilder(webinarId, nameTagId);
    }
    private okhttp3.Call updateLiveStreamCall(Long webinarId, WebinarsUpdateLiveStreamRequest webinarsUpdateLiveStreamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsUpdateLiveStreamRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/livestream"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLiveStreamValidateBeforeCall(Long webinarId, WebinarsUpdateLiveStreamRequest webinarsUpdateLiveStreamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updateLiveStream(Async)");
        }

        return updateLiveStreamCall(webinarId, webinarsUpdateLiveStreamRequest, _callback);

    }


    private ApiResponse<Void> updateLiveStreamWithHttpInfo(Long webinarId, WebinarsUpdateLiveStreamRequest webinarsUpdateLiveStreamRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLiveStreamValidateBeforeCall(webinarId, webinarsUpdateLiveStreamRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLiveStreamAsync(Long webinarId, WebinarsUpdateLiveStreamRequest webinarsUpdateLiveStreamRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLiveStreamValidateBeforeCall(webinarId, webinarsUpdateLiveStreamRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLiveStreamRequestBuilder {
        private final URI pageUrl;
        private final String streamKey;
        private final String streamUrl;
        private final Long webinarId;
        private String resolution;

        private UpdateLiveStreamRequestBuilder(URI pageUrl, String streamKey, String streamUrl, Long webinarId) {
            this.pageUrl = pageUrl;
            this.streamKey = streamKey;
            this.streamUrl = streamUrl;
            this.webinarId = webinarId;
        }

        /**
         * Set resolution
         * @param resolution The number of pixels in each dimension that the video camera can display, required when a user enables 1080p. Use a value of &#x60;720p&#x60; or &#x60;1080p&#x60; (optional)
         * @return UpdateLiveStreamRequestBuilder
         */
        public UpdateLiveStreamRequestBuilder resolution(String resolution) {
            this.resolution = resolution;
            return this;
        }
        
        /**
         * Build call for updateLiveStream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting live stream updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.&lt;br&gt; * The current user has not enabled the custom live streaming feature of the webinar. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsUpdateLiveStreamRequest webinarsUpdateLiveStreamRequest = buildBodyParams();
            return updateLiveStreamCall(webinarId, webinarsUpdateLiveStreamRequest, _callback);
        }

        private WebinarsUpdateLiveStreamRequest buildBodyParams() {
            WebinarsUpdateLiveStreamRequest webinarsUpdateLiveStreamRequest = new WebinarsUpdateLiveStreamRequest();
            webinarsUpdateLiveStreamRequest.pageUrl(this.pageUrl);
            webinarsUpdateLiveStreamRequest.streamKey(this.streamKey);
            webinarsUpdateLiveStreamRequest.streamUrl(this.streamUrl);
            webinarsUpdateLiveStreamRequest.resolution(this.resolution);
            return webinarsUpdateLiveStreamRequest;
        }

        /**
         * Execute updateLiveStream request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting live stream updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.&lt;br&gt; * The current user has not enabled the custom live streaming feature of the webinar. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebinarsUpdateLiveStreamRequest webinarsUpdateLiveStreamRequest = buildBodyParams();
            updateLiveStreamWithHttpInfo(webinarId, webinarsUpdateLiveStreamRequest);
        }

        /**
         * Execute updateLiveStream request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting live stream updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.&lt;br&gt; * The current user has not enabled the custom live streaming feature of the webinar. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebinarsUpdateLiveStreamRequest webinarsUpdateLiveStreamRequest = buildBodyParams();
            return updateLiveStreamWithHttpInfo(webinarId, webinarsUpdateLiveStreamRequest);
        }

        /**
         * Execute updateLiveStream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting live stream updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.&lt;br&gt; * The current user has not enabled the custom live streaming feature of the webinar. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebinarsUpdateLiveStreamRequest webinarsUpdateLiveStreamRequest = buildBodyParams();
            return updateLiveStreamAsync(webinarId, webinarsUpdateLiveStreamRequest, _callback);
        }
    }

    /**
     * Update a live stream
     * Update a webinar&#39;s live stream information.         **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return UpdateLiveStreamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting live stream updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.&lt;br&gt; * The current user has not enabled the custom live streaming feature of the webinar. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLiveStreamRequestBuilder updateLiveStream(URI pageUrl, String streamKey, String streamUrl, Long webinarId) throws IllegalArgumentException {
        if (pageUrl == null) throw new IllegalArgumentException("\"pageUrl\" is required but got null");
            

        if (streamKey == null) throw new IllegalArgumentException("\"streamKey\" is required but got null");
            

        if (streamUrl == null) throw new IllegalArgumentException("\"streamUrl\" is required but got null");
            

        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new UpdateLiveStreamRequestBuilder(pageUrl, streamKey, streamUrl, webinarId);
    }
    private okhttp3.Call updateLiveStreamStatusCall(Long webinarId, WebinarsUpdateLiveStreamStatusRequest webinarsUpdateLiveStreamStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsUpdateLiveStreamStatusRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/livestream/status"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLiveStreamStatusValidateBeforeCall(Long webinarId, WebinarsUpdateLiveStreamStatusRequest webinarsUpdateLiveStreamStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updateLiveStreamStatus(Async)");
        }

        return updateLiveStreamStatusCall(webinarId, webinarsUpdateLiveStreamStatusRequest, _callback);

    }


    private ApiResponse<Void> updateLiveStreamStatusWithHttpInfo(Long webinarId, WebinarsUpdateLiveStreamStatusRequest webinarsUpdateLiveStreamStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLiveStreamStatusValidateBeforeCall(webinarId, webinarsUpdateLiveStreamStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLiveStreamStatusAsync(Long webinarId, WebinarsUpdateLiveStreamStatusRequest webinarsUpdateLiveStreamStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLiveStreamStatusValidateBeforeCall(webinarId, webinarsUpdateLiveStreamStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLiveStreamStatusRequestBuilder {
        private final Long webinarId;
        private String action;
        private WebinarsUpdateLiveStreamStatusRequestSettings settings;

        private UpdateLiveStreamStatusRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set action
         * @param action Update the live stream&#39;s status.   * &#x60;start&#x60; - Start a webinar live stream.  * &#x60;stop&#x60;- Stop an ongoing webinar live stream. (optional)
         * @return UpdateLiveStreamStatusRequestBuilder
         */
        public UpdateLiveStreamStatusRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return UpdateLiveStreamStatusRequestBuilder
         */
        public UpdateLiveStreamStatusRequestBuilder settings(WebinarsUpdateLiveStreamStatusRequestSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Build call for updateLiveStreamStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting live stream updated.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.&lt;br&gt; * The current user has not enabled the custom live streaming feature of the webinar.&lt;br&gt; * Webinar {0} has not started. &lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The current webinar is not configured with a custom streaming service. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsUpdateLiveStreamStatusRequest webinarsUpdateLiveStreamStatusRequest = buildBodyParams();
            return updateLiveStreamStatusCall(webinarId, webinarsUpdateLiveStreamStatusRequest, _callback);
        }

        private WebinarsUpdateLiveStreamStatusRequest buildBodyParams() {
            WebinarsUpdateLiveStreamStatusRequest webinarsUpdateLiveStreamStatusRequest = new WebinarsUpdateLiveStreamStatusRequest();
            if (this.action != null)
            webinarsUpdateLiveStreamStatusRequest.action(WebinarsUpdateLiveStreamStatusRequest.ActionEnum.fromValue(this.action));
            webinarsUpdateLiveStreamStatusRequest.settings(this.settings);
            return webinarsUpdateLiveStreamStatusRequest;
        }

        /**
         * Execute updateLiveStreamStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting live stream updated.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.&lt;br&gt; * The current user has not enabled the custom live streaming feature of the webinar.&lt;br&gt; * Webinar {0} has not started. &lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The current webinar is not configured with a custom streaming service. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebinarsUpdateLiveStreamStatusRequest webinarsUpdateLiveStreamStatusRequest = buildBodyParams();
            updateLiveStreamStatusWithHttpInfo(webinarId, webinarsUpdateLiveStreamStatusRequest);
        }

        /**
         * Execute updateLiveStreamStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting live stream updated.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.&lt;br&gt; * The current user has not enabled the custom live streaming feature of the webinar.&lt;br&gt; * Webinar {0} has not started. &lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The current webinar is not configured with a custom streaming service. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebinarsUpdateLiveStreamStatusRequest webinarsUpdateLiveStreamStatusRequest = buildBodyParams();
            return updateLiveStreamStatusWithHttpInfo(webinarId, webinarsUpdateLiveStreamStatusRequest);
        }

        /**
         * Execute updateLiveStreamStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting live stream updated.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.&lt;br&gt; * The current user has not enabled the custom live streaming feature of the webinar.&lt;br&gt; * Webinar {0} has not started. &lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The current webinar is not configured with a custom streaming service. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebinarsUpdateLiveStreamStatusRequest webinarsUpdateLiveStreamStatusRequest = buildBodyParams();
            return updateLiveStreamStatusAsync(webinarId, webinarsUpdateLiveStreamStatusRequest, _callback);
        }
    }

    /**
     * Update live stream status
     * Let users [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a webinar&#39;s live stream.          **Prerequisites:**     * Pro or higher plan with a Webinar Add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return UpdateLiveStreamStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting live stream updated.   </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Webinar Id does not exist.&lt;br&gt; * Invalid Webinar Id.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}.&lt;br&gt; * The current user has not enabled the custom live streaming feature of the webinar.&lt;br&gt; * Webinar {0} has not started. &lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The current webinar is not configured with a custom streaming service. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLiveStreamStatusRequestBuilder updateLiveStreamStatus(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new UpdateLiveStreamStatusRequestBuilder(webinarId);
    }
    private okhttp3.Call updatePollCall(Long webinarId, String pollId, WebinarsUpdatePollRequest webinarsUpdatePollRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsUpdatePollRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/polls/{pollId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()))
            .replace("{" + "pollId" + "}", localVarApiClient.escapeString(pollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePollValidateBeforeCall(Long webinarId, String pollId, WebinarsUpdatePollRequest webinarsUpdatePollRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updatePoll(Async)");
        }

        // verify the required parameter 'pollId' is set
        if (pollId == null) {
            throw new ApiException("Missing the required parameter 'pollId' when calling updatePoll(Async)");
        }

        return updatePollCall(webinarId, pollId, webinarsUpdatePollRequest, _callback);

    }


    private ApiResponse<Void> updatePollWithHttpInfo(Long webinarId, String pollId, WebinarsUpdatePollRequest webinarsUpdatePollRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePollValidateBeforeCall(webinarId, pollId, webinarsUpdatePollRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePollAsync(Long webinarId, String pollId, WebinarsUpdatePollRequest webinarsUpdatePollRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePollValidateBeforeCall(webinarId, pollId, webinarsUpdatePollRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePollRequestBuilder {
        private final Long webinarId;
        private final String pollId;
        private String title;
        private Boolean anonymous;
        private Integer pollType;
        private List<WebinarsUpdatePollRequestQuestionsInner> questions;

        private UpdatePollRequestBuilder(Long webinarId, String pollId) {
            this.webinarId = webinarId;
            this.pollId = pollId;
        }

        /**
         * Set title
         * @param title The poll&#39;s title, up to 64 characters. (optional)
         * @return UpdatePollRequestBuilder
         */
        public UpdatePollRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set anonymous
         * @param anonymous Allow meeting participants to answer poll questions anonymously.   This value defaults to &#x60;false&#x60;. (optional, default to false)
         * @return UpdatePollRequestBuilder
         */
        public UpdatePollRequestBuilder anonymous(Boolean anonymous) {
            this.anonymous = anonymous;
            return this;
        }
        
        /**
         * Set pollType
         * @param pollType The type of poll:  * &#x60;1&#x60; &amp;mdash; Poll.  * &#x60;2&#x60; &amp;mdash; Advanced Poll. This feature must be enabled in your Zoom account.  * &#x60;3&#x60; &amp;mdash; Quiz. This feature must be enabled in your Zoom account.    This value defaults to &#x60;1&#x60;. (optional)
         * @return UpdatePollRequestBuilder
         */
        public UpdatePollRequestBuilder pollType(Integer pollType) {
            this.pollType = pollType;
            return this;
        }
        
        /**
         * Set questions
         * @param questions Information about the poll&#39;s questions. (optional)
         * @return UpdatePollRequestBuilder
         */
        public UpdatePollRequestBuilder questions(List<WebinarsUpdatePollRequestQuestionsInner> questions) {
            this.questions = questions;
            return this;
        }
        
        /**
         * Build call for updatePoll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar Poll Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  * Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced webinar polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsUpdatePollRequest webinarsUpdatePollRequest = buildBodyParams();
            return updatePollCall(webinarId, pollId, webinarsUpdatePollRequest, _callback);
        }

        private WebinarsUpdatePollRequest buildBodyParams() {
            WebinarsUpdatePollRequest webinarsUpdatePollRequest = new WebinarsUpdatePollRequest();
            webinarsUpdatePollRequest.title(this.title);
            webinarsUpdatePollRequest.anonymous(this.anonymous);
            if (this.pollType != null)
            webinarsUpdatePollRequest.pollType(WebinarsUpdatePollRequest.PollTypeEnum.fromValue(this.pollType));
            webinarsUpdatePollRequest.questions(this.questions);
            return webinarsUpdatePollRequest;
        }

        /**
         * Execute updatePoll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar Poll Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  * Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced webinar polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebinarsUpdatePollRequest webinarsUpdatePollRequest = buildBodyParams();
            updatePollWithHttpInfo(webinarId, pollId, webinarsUpdatePollRequest);
        }

        /**
         * Execute updatePoll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar Poll Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  * Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced webinar polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebinarsUpdatePollRequest webinarsUpdatePollRequest = buildBodyParams();
            return updatePollWithHttpInfo(webinarId, pollId, webinarsUpdatePollRequest);
        }

        /**
         * Execute updatePoll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar Poll Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  * Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced webinar polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebinarsUpdatePollRequest webinarsUpdatePollRequest = buildBodyParams();
            return updatePollAsync(webinarId, pollId, webinarsUpdatePollRequest, _callback);
        }
    }

    /**
     * Update a webinar poll
     * Update a webinar&#39;s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @param pollId The poll ID (required)
     * @return UpdatePollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar Poll Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;4400&#x60; &lt;br&gt;  * Webinar polls disabled. To enable this feature, enable the \&quot;Webinar Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced webinar polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePollRequestBuilder updatePoll(Long webinarId, String pollId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        if (pollId == null) throw new IllegalArgumentException("\"pollId\" is required but got null");
            

        return new UpdatePollRequestBuilder(webinarId, pollId);
    }
    private okhttp3.Call updateRegistrantStatusCall(Long webinarId, String occurrenceId, WebinarsUpdateRegistrantStatusRequest webinarsUpdateRegistrantStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsUpdateRegistrantStatusRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/registrants/status"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegistrantStatusValidateBeforeCall(Long webinarId, String occurrenceId, WebinarsUpdateRegistrantStatusRequest webinarsUpdateRegistrantStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updateRegistrantStatus(Async)");
        }

        return updateRegistrantStatusCall(webinarId, occurrenceId, webinarsUpdateRegistrantStatusRequest, _callback);

    }


    private ApiResponse<Void> updateRegistrantStatusWithHttpInfo(Long webinarId, String occurrenceId, WebinarsUpdateRegistrantStatusRequest webinarsUpdateRegistrantStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRegistrantStatusValidateBeforeCall(webinarId, occurrenceId, webinarsUpdateRegistrantStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRegistrantStatusAsync(Long webinarId, String occurrenceId, WebinarsUpdateRegistrantStatusRequest webinarsUpdateRegistrantStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegistrantStatusValidateBeforeCall(webinarId, occurrenceId, webinarsUpdateRegistrantStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRegistrantStatusRequestBuilder {
        private final String action;
        private final Long webinarId;
        private List<WebinarsUpdateRegistrantStatusRequestRegistrantsInner> registrants;
        private String occurrenceId;

        private UpdateRegistrantStatusRequestBuilder(String action, Long webinarId) {
            this.action = action;
            this.webinarId = webinarId;
        }

        /**
         * Set registrants
         * @param registrants The registrant information. (optional)
         * @return UpdateRegistrantStatusRequestBuilder
         */
        public UpdateRegistrantStatusRequestBuilder registrants(List<WebinarsUpdateRegistrantStatusRequestRegistrantsInner> registrants) {
            this.registrants = registrants;
            return this;
        }
        
        /**
         * Set occurrenceId
         * @param occurrenceId The meeting or webinar occurrence ID. (optional)
         * @return UpdateRegistrantStatusRequestBuilder
         */
        public UpdateRegistrantStatusRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Build call for updateRegistrantStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId}. &lt;br&gt; **Error Code:** &#x60;3035&#x60; &lt;br&gt;  Webinar has reached maximum attendee capacity. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsUpdateRegistrantStatusRequest webinarsUpdateRegistrantStatusRequest = buildBodyParams();
            return updateRegistrantStatusCall(webinarId, occurrenceId, webinarsUpdateRegistrantStatusRequest, _callback);
        }

        private WebinarsUpdateRegistrantStatusRequest buildBodyParams() {
            WebinarsUpdateRegistrantStatusRequest webinarsUpdateRegistrantStatusRequest = new WebinarsUpdateRegistrantStatusRequest();
            if (this.action != null)
            webinarsUpdateRegistrantStatusRequest.action(WebinarsUpdateRegistrantStatusRequest.ActionEnum.fromValue(this.action));
            webinarsUpdateRegistrantStatusRequest.registrants(this.registrants);
            return webinarsUpdateRegistrantStatusRequest;
        }

        /**
         * Execute updateRegistrantStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId}. &lt;br&gt; **Error Code:** &#x60;3035&#x60; &lt;br&gt;  Webinar has reached maximum attendee capacity. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebinarsUpdateRegistrantStatusRequest webinarsUpdateRegistrantStatusRequest = buildBodyParams();
            updateRegistrantStatusWithHttpInfo(webinarId, occurrenceId, webinarsUpdateRegistrantStatusRequest);
        }

        /**
         * Execute updateRegistrantStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId}. &lt;br&gt; **Error Code:** &#x60;3035&#x60; &lt;br&gt;  Webinar has reached maximum attendee capacity. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebinarsUpdateRegistrantStatusRequest webinarsUpdateRegistrantStatusRequest = buildBodyParams();
            return updateRegistrantStatusWithHttpInfo(webinarId, occurrenceId, webinarsUpdateRegistrantStatusRequest);
        }

        /**
         * Execute updateRegistrantStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId}. &lt;br&gt; **Error Code:** &#x60;3035&#x60; &lt;br&gt;  Webinar has reached maximum attendee capacity. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebinarsUpdateRegistrantStatusRequest webinarsUpdateRegistrantStatusRequest = buildBodyParams();
            return updateRegistrantStatusAsync(webinarId, occurrenceId, webinarsUpdateRegistrantStatusRequest, _callback);
        }
    }

    /**
     * Update registrant&#39;s status
     * Update webinar registrants&#39; registration status. You can approve or deny a registrant, or revoke a registrant&#39;s approval.   **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return UpdateRegistrantStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Registrant status updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId}. &lt;br&gt; **Error Code:** &#x60;3035&#x60; &lt;br&gt;  Webinar has reached maximum attendee capacity. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests     </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRegistrantStatusRequestBuilder updateRegistrantStatus(String action, Long webinarId) throws IllegalArgumentException {
        if (action == null) throw new IllegalArgumentException("\"action\" is required but got null");
            

        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new UpdateRegistrantStatusRequestBuilder(action, webinarId);
    }
    private okhttp3.Call updateRegistrationQuestionsCall(Long webinarId, WebinarsUpdateRegistrationQuestionsRequest webinarsUpdateRegistrationQuestionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsUpdateRegistrationQuestionsRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/registrants/questions"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegistrationQuestionsValidateBeforeCall(Long webinarId, WebinarsUpdateRegistrationQuestionsRequest webinarsUpdateRegistrationQuestionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updateRegistrationQuestions(Async)");
        }

        return updateRegistrationQuestionsCall(webinarId, webinarsUpdateRegistrationQuestionsRequest, _callback);

    }


    private ApiResponse<Void> updateRegistrationQuestionsWithHttpInfo(Long webinarId, WebinarsUpdateRegistrationQuestionsRequest webinarsUpdateRegistrationQuestionsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRegistrationQuestionsValidateBeforeCall(webinarId, webinarsUpdateRegistrationQuestionsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRegistrationQuestionsAsync(Long webinarId, WebinarsUpdateRegistrationQuestionsRequest webinarsUpdateRegistrationQuestionsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegistrationQuestionsValidateBeforeCall(webinarId, webinarsUpdateRegistrationQuestionsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRegistrationQuestionsRequestBuilder {
        private final Long webinarId;
        private List<WebinarsUpdateRegistrationQuestionsRequestCustomQuestionsInner> customQuestions;
        private List<WebinarsUpdateRegistrationQuestionsRequestQuestionsInner> questions;

        private UpdateRegistrationQuestionsRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set customQuestions
         * @param customQuestions Array of custom questions for registrants. (optional)
         * @return UpdateRegistrationQuestionsRequestBuilder
         */
        public UpdateRegistrationQuestionsRequestBuilder customQuestions(List<WebinarsUpdateRegistrationQuestionsRequestCustomQuestionsInner> customQuestions) {
            this.customQuestions = customQuestions;
            return this;
        }
        
        /**
         * Set questions
         * @param questions Array of registration fields whose values should be provided by registrants. (optional)
         * @return UpdateRegistrationQuestionsRequestBuilder
         */
        public UpdateRegistrationQuestionsRequestBuilder questions(List<WebinarsUpdateRegistrationQuestionsRequestQuestionsInner> questions) {
            this.questions = questions;
            return this;
        }
        
        /**
         * Build call for updateRegistrationQuestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;   Webinar registrant questions updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsUpdateRegistrationQuestionsRequest webinarsUpdateRegistrationQuestionsRequest = buildBodyParams();
            return updateRegistrationQuestionsCall(webinarId, webinarsUpdateRegistrationQuestionsRequest, _callback);
        }

        private WebinarsUpdateRegistrationQuestionsRequest buildBodyParams() {
            WebinarsUpdateRegistrationQuestionsRequest webinarsUpdateRegistrationQuestionsRequest = new WebinarsUpdateRegistrationQuestionsRequest();
            webinarsUpdateRegistrationQuestionsRequest.customQuestions(this.customQuestions);
            webinarsUpdateRegistrationQuestionsRequest.questions(this.questions);
            return webinarsUpdateRegistrationQuestionsRequest;
        }

        /**
         * Execute updateRegistrationQuestions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;   Webinar registrant questions updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebinarsUpdateRegistrationQuestionsRequest webinarsUpdateRegistrationQuestionsRequest = buildBodyParams();
            updateRegistrationQuestionsWithHttpInfo(webinarId, webinarsUpdateRegistrationQuestionsRequest);
        }

        /**
         * Execute updateRegistrationQuestions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;   Webinar registrant questions updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebinarsUpdateRegistrationQuestionsRequest webinarsUpdateRegistrationQuestionsRequest = buildBodyParams();
            return updateRegistrationQuestionsWithHttpInfo(webinarId, webinarsUpdateRegistrationQuestionsRequest);
        }

        /**
         * Execute updateRegistrationQuestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;   Webinar registrant questions updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebinarsUpdateRegistrationQuestionsRequest webinarsUpdateRegistrationQuestionsRequest = buildBodyParams();
            return updateRegistrationQuestionsAsync(webinarId, webinarsUpdateRegistrationQuestionsRequest, _callback);
        }
    }

    /**
     * Update registration questions
     * Update registration questions and fields of a scheduled webinar for users to answer during webinar registration. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.          **Prerequisites:**       * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.    **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return UpdateRegistrationQuestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;   Webinar registrant questions updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRegistrationQuestionsRequestBuilder updateRegistrationQuestions(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new UpdateRegistrationQuestionsRequestBuilder(webinarId);
    }
    private okhttp3.Call updateScheduledWebinarCall(Long webinarId, String occurrenceId, WebinarsUpdateScheduledWebinarRequest webinarsUpdateScheduledWebinarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsUpdateScheduledWebinarRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScheduledWebinarValidateBeforeCall(Long webinarId, String occurrenceId, WebinarsUpdateScheduledWebinarRequest webinarsUpdateScheduledWebinarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updateScheduledWebinar(Async)");
        }

        return updateScheduledWebinarCall(webinarId, occurrenceId, webinarsUpdateScheduledWebinarRequest, _callback);

    }


    private ApiResponse<Void> updateScheduledWebinarWithHttpInfo(Long webinarId, String occurrenceId, WebinarsUpdateScheduledWebinarRequest webinarsUpdateScheduledWebinarRequest) throws ApiException {
        okhttp3.Call localVarCall = updateScheduledWebinarValidateBeforeCall(webinarId, occurrenceId, webinarsUpdateScheduledWebinarRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateScheduledWebinarAsync(Long webinarId, String occurrenceId, WebinarsUpdateScheduledWebinarRequest webinarsUpdateScheduledWebinarRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScheduledWebinarValidateBeforeCall(webinarId, occurrenceId, webinarsUpdateScheduledWebinarRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateScheduledWebinarRequestBuilder {
        private final Long webinarId;
        private String agenda;
        private Integer duration;
        private String password;
        private String scheduleFor;
        private WebinarsUpdateScheduledWebinarRequestRecurrence recurrence;
        private WebinarsUpdateScheduledWebinarRequestSettings settings;
        private OffsetDateTime startTime;
        private String timezone;
        private String topic;
        private List<WebinarsUpdateScheduledWebinarRequestTrackingFieldsInner> trackingFields;
        private Integer type;
        private Boolean isSimulive;
        private String recordFileId;
        private String occurrenceId;

        private UpdateScheduledWebinarRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set agenda
         * @param agenda Webinar description. (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder agenda(String agenda) {
            this.agenda = agenda;
            return this;
        }
        
        /**
         * Set duration
         * @param duration Webinar duration, in minutes. Used for scheduled webinar only. (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder duration(Integer duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set password
         * @param password [Webinar passcode](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords). By default, passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ * !] and can have a maximum of 10 characters.  **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements.         If the requirements are enabled, you can view those requirements by calling either the [**Get user settings**](https://developers.zoom.us) API or the [**Get account settings**](https://developers.zoom.us) API.   If **Require a passcode when scheduling new meetings** setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the webinar in the response even if it is not provided in the API request. (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set scheduleFor
         * @param scheduleFor The user&#39;s email address or &#x60;userId&#x60; to schedule a webinar for. (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder scheduleFor(String scheduleFor) {
            this.scheduleFor = scheduleFor;
            return this;
        }
        
        /**
         * Set recurrence
         * @param recurrence  (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder recurrence(WebinarsUpdateScheduledWebinarRequestRecurrence recurrence) {
            this.recurrence = recurrence;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder settings(WebinarsUpdateScheduledWebinarRequestSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime Webinar start time, in the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;&#x60;. Should be in GMT time. In the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#x60;. This should be in local time and the timezone should be specified. Only used for scheduled webinars and recurring webinars with a fixed time. (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone The timezone to assign to the &#x60;start_time&#x60; value. This field is only used for scheduled or recurring webinars with a fixed time.  For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones). (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set topic
         * @param topic The webinar topic. (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder topic(String topic) {
            this.topic = topic;
            return this;
        }
        
        /**
         * Set trackingFields
         * @param trackingFields Tracking fields. (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder trackingFields(List<WebinarsUpdateScheduledWebinarRequestTrackingFieldsInner> trackingFields) {
            this.trackingFields = trackingFields;
            return this;
        }
        
        /**
         * Set type
         * @param type Webinar types.   &#x60;5&#x60; - webinar.    &#x60;6&#x60; - Recurring webinar with no fixed time.    &#x60;9&#x60; - Recurring webinar with a fixed time. (optional, default to 5)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder type(Integer type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set isSimulive
         * @param isSimulive Whether to set the webinar simulive. (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder isSimulive(Boolean isSimulive) {
            this.isSimulive = isSimulive;
            return this;
        }
        
        /**
         * Set recordFileId
         * @param recordFileId The previously recorded file&#39;s ID for &#x60;simulive&#x60;. (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder recordFileId(String recordFileId) {
            this.recordFileId = recordFileId;
            return this;
        }
        
        /**
         * Set occurrenceId
         * @param occurrenceId Webinar occurrence ID. Support change of agenda, start time, duration, and settings &#x60;host_video&#x60;, &#x60;panelist_video&#x60;, &#x60;hd_video, watermark&#x60;, &#x60;auto_recording&#x60;. (optional)
         * @return UpdateScheduledWebinarRequestBuilder
         */
        public UpdateScheduledWebinarRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Build call for updateScheduledWebinar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  * You are not the meeting host.  * Users in \&quot;{0}\&quot; have been blocked from joining meetings and webinars. To unblock them, go to the \&quot;Settings\&quot; page in the Zoom web portal and update the \&quot;Block users in specific domains from joining meetings and webinars\&quot; setting. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot update or delete simulive webinars that have started using this method. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the schedule_for field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsUpdateScheduledWebinarRequest webinarsUpdateScheduledWebinarRequest = buildBodyParams();
            return updateScheduledWebinarCall(webinarId, occurrenceId, webinarsUpdateScheduledWebinarRequest, _callback);
        }

        private WebinarsUpdateScheduledWebinarRequest buildBodyParams() {
            WebinarsUpdateScheduledWebinarRequest webinarsUpdateScheduledWebinarRequest = new WebinarsUpdateScheduledWebinarRequest();
            webinarsUpdateScheduledWebinarRequest.agenda(this.agenda);
            webinarsUpdateScheduledWebinarRequest.duration(this.duration);
            webinarsUpdateScheduledWebinarRequest.password(this.password);
            webinarsUpdateScheduledWebinarRequest.scheduleFor(this.scheduleFor);
            webinarsUpdateScheduledWebinarRequest.recurrence(this.recurrence);
            webinarsUpdateScheduledWebinarRequest.settings(this.settings);
            webinarsUpdateScheduledWebinarRequest.startTime(this.startTime);
            webinarsUpdateScheduledWebinarRequest.timezone(this.timezone);
            webinarsUpdateScheduledWebinarRequest.topic(this.topic);
            webinarsUpdateScheduledWebinarRequest.trackingFields(this.trackingFields);
            if (this.type != null)
            webinarsUpdateScheduledWebinarRequest.type(WebinarsUpdateScheduledWebinarRequest.TypeEnum.fromValue(this.type));
            webinarsUpdateScheduledWebinarRequest.isSimulive(this.isSimulive);
            webinarsUpdateScheduledWebinarRequest.recordFileId(this.recordFileId);
            return webinarsUpdateScheduledWebinarRequest;
        }

        /**
         * Execute updateScheduledWebinar request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  * You are not the meeting host.  * Users in \&quot;{0}\&quot; have been blocked from joining meetings and webinars. To unblock them, go to the \&quot;Settings\&quot; page in the Zoom web portal and update the \&quot;Block users in specific domains from joining meetings and webinars\&quot; setting. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot update or delete simulive webinars that have started using this method. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the schedule_for field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebinarsUpdateScheduledWebinarRequest webinarsUpdateScheduledWebinarRequest = buildBodyParams();
            updateScheduledWebinarWithHttpInfo(webinarId, occurrenceId, webinarsUpdateScheduledWebinarRequest);
        }

        /**
         * Execute updateScheduledWebinar request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  * You are not the meeting host.  * Users in \&quot;{0}\&quot; have been blocked from joining meetings and webinars. To unblock them, go to the \&quot;Settings\&quot; page in the Zoom web portal and update the \&quot;Block users in specific domains from joining meetings and webinars\&quot; setting. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot update or delete simulive webinars that have started using this method. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the schedule_for field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebinarsUpdateScheduledWebinarRequest webinarsUpdateScheduledWebinarRequest = buildBodyParams();
            return updateScheduledWebinarWithHttpInfo(webinarId, occurrenceId, webinarsUpdateScheduledWebinarRequest);
        }

        /**
         * Execute updateScheduledWebinar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  * You are not the meeting host.  * Users in \&quot;{0}\&quot; have been blocked from joining meetings and webinars. To unblock them, go to the \&quot;Settings\&quot; page in the Zoom web portal and update the \&quot;Block users in specific domains from joining meetings and webinars\&quot; setting. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot update or delete simulive webinars that have started using this method. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the schedule_for field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebinarsUpdateScheduledWebinarRequest webinarsUpdateScheduledWebinarRequest = buildBodyParams();
            return updateScheduledWebinarAsync(webinarId, occurrenceId, webinarsUpdateScheduledWebinarRequest, _callback);
        }
    }

    /**
     * Update a webinar
     * Make updates to a scheduled webinar.   **100 requests per day**. The rate limit is applied to the &#x60;userId&#x60; of the **webinar host** used to make the request.   **Prerequisites**  * A Pro or higher plan with a webinar add-on.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return UpdateScheduledWebinarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Webinar updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId} &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  * You are not the meeting host.  * Users in \&quot;{0}\&quot; have been blocked from joining meetings and webinars. To unblock them, go to the \&quot;Settings\&quot; page in the Zoom web portal and update the \&quot;Block users in specific domains from joining meetings and webinars\&quot; setting. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot update or delete simulive webinars that have started using this method. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered for the schedule_for field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateScheduledWebinarRequestBuilder updateScheduledWebinar(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new UpdateScheduledWebinarRequestBuilder(webinarId);
    }
    private okhttp3.Call updateStatusCall(Long webinarId, WebinarsUpdateStatusRequest webinarsUpdateStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsUpdateStatusRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/status"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusValidateBeforeCall(Long webinarId, WebinarsUpdateStatusRequest webinarsUpdateStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updateStatus(Async)");
        }

        return updateStatusCall(webinarId, webinarsUpdateStatusRequest, _callback);

    }


    private ApiResponse<Object> updateStatusWithHttpInfo(Long webinarId, WebinarsUpdateStatusRequest webinarsUpdateStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStatusValidateBeforeCall(webinarId, webinarsUpdateStatusRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStatusAsync(Long webinarId, WebinarsUpdateStatusRequest webinarsUpdateStatusRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusValidateBeforeCall(webinarId, webinarsUpdateStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStatusRequestBuilder {
        private final Long webinarId;
        private String action;

        private UpdateStatusRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set action
         * @param action  (optional)
         * @return UpdateStatusRequestBuilder
         */
        public UpdateStatusRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Build call for updateStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3063&#x60; &lt;br&gt;  Can not end on-premise user&#39;s meeting:{meetingId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsUpdateStatusRequest webinarsUpdateStatusRequest = buildBodyParams();
            return updateStatusCall(webinarId, webinarsUpdateStatusRequest, _callback);
        }

        private WebinarsUpdateStatusRequest buildBodyParams() {
            WebinarsUpdateStatusRequest webinarsUpdateStatusRequest = new WebinarsUpdateStatusRequest();
            if (this.action != null)
            webinarsUpdateStatusRequest.action(WebinarsUpdateStatusRequest.ActionEnum.fromValue(this.action));
            return webinarsUpdateStatusRequest;
        }

        /**
         * Execute updateStatus request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3063&#x60; &lt;br&gt;  Can not end on-premise user&#39;s meeting:{meetingId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            WebinarsUpdateStatusRequest webinarsUpdateStatusRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateStatusWithHttpInfo(webinarId, webinarsUpdateStatusRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStatus request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3063&#x60; &lt;br&gt;  Can not end on-premise user&#39;s meeting:{meetingId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            WebinarsUpdateStatusRequest webinarsUpdateStatusRequest = buildBodyParams();
            return updateStatusWithHttpInfo(webinarId, webinarsUpdateStatusRequest);
        }

        /**
         * Execute updateStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3063&#x60; &lt;br&gt;  Can not end on-premise user&#39;s meeting:{meetingId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            WebinarsUpdateStatusRequest webinarsUpdateStatusRequest = buildBodyParams();
            return updateStatusAsync(webinarId, webinarsUpdateStatusRequest, _callback);
        }
    }

    /**
     * Update webinar status
     * Update a webinar&#39;s status. Use this API to end an ongoing webinar.          **Prerequisites:**     * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return UpdateStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3063&#x60; &lt;br&gt;  Can not end on-premise user&#39;s meeting:{meetingId}.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} does not exist or does not belong to this account.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar {webinarId} not found or has expired.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusRequestBuilder updateStatus(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new UpdateStatusRequestBuilder(webinarId);
    }
    private okhttp3.Call updateSurveyCall(Long webinarId, WebinarsUpdateSurveyRequest webinarsUpdateSurveyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsUpdateSurveyRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/survey"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSurveyValidateBeforeCall(Long webinarId, WebinarsUpdateSurveyRequest webinarsUpdateSurveyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updateSurvey(Async)");
        }

        return updateSurveyCall(webinarId, webinarsUpdateSurveyRequest, _callback);

    }


    private ApiResponse<Void> updateSurveyWithHttpInfo(Long webinarId, WebinarsUpdateSurveyRequest webinarsUpdateSurveyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSurveyValidateBeforeCall(webinarId, webinarsUpdateSurveyRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSurveyAsync(Long webinarId, WebinarsUpdateSurveyRequest webinarsUpdateSurveyRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSurveyValidateBeforeCall(webinarId, webinarsUpdateSurveyRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSurveyRequestBuilder {
        private final Long webinarId;
        private WebinarsUpdateSurveyRequestCustomSurvey customSurvey;
        private Boolean showInTheBrowser;
        private Boolean showInTheFollowUpEmail;
        private String thirdPartySurvey;

        private UpdateSurveyRequestBuilder(Long webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set customSurvey
         * @param customSurvey  (optional)
         * @return UpdateSurveyRequestBuilder
         */
        public UpdateSurveyRequestBuilder customSurvey(WebinarsUpdateSurveyRequestCustomSurvey customSurvey) {
            this.customSurvey = customSurvey;
            return this;
        }
        
        /**
         * Set showInTheBrowser
         * @param showInTheBrowser Whether the **Show in the browser when the webinar ends** option is enabled.  * &#x60;true&#x60; - Enabled.  * &#x60;false&#x60; - Disabled.    This value defaults to &#x60;true&#x60;. (optional, default to true)
         * @return UpdateSurveyRequestBuilder
         */
        public UpdateSurveyRequestBuilder showInTheBrowser(Boolean showInTheBrowser) {
            this.showInTheBrowser = showInTheBrowser;
            return this;
        }
        
        /**
         * Set showInTheFollowUpEmail
         * @param showInTheFollowUpEmail Whether the **Show the link on the follow-up email** option is enabled.  * &#x60;true&#x60; - Enabled.  * &#x60;false&#x60; - Disabled.    This value defaults to &#x60;false&#x60;. (optional, default to false)
         * @return UpdateSurveyRequestBuilder
         */
        public UpdateSurveyRequestBuilder showInTheFollowUpEmail(Boolean showInTheFollowUpEmail) {
            this.showInTheFollowUpEmail = showInTheFollowUpEmail;
            return this;
        }
        
        /**
         * Set thirdPartySurvey
         * @param thirdPartySurvey The link to the third party webinar survey. (optional)
         * @return UpdateSurveyRequestBuilder
         */
        public UpdateSurveyRequestBuilder thirdPartySurvey(String thirdPartySurvey) {
            this.thirdPartySurvey = thirdPartySurvey;
            return this;
        }
        
        /**
         * Build call for updateSurvey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Webinar survey updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid third party survey: {third_party_survey}. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To use this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The host isn&#39;t allowed to use a third party survey link. To use this feature, enable the \&quot;Allow host to use a 3rd-party survey link\&quot; setting in the \&quot;Account Settings\&quot; page of the Zoom web portal. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsUpdateSurveyRequest webinarsUpdateSurveyRequest = buildBodyParams();
            return updateSurveyCall(webinarId, webinarsUpdateSurveyRequest, _callback);
        }

        private WebinarsUpdateSurveyRequest buildBodyParams() {
            WebinarsUpdateSurveyRequest webinarsUpdateSurveyRequest = new WebinarsUpdateSurveyRequest();
            webinarsUpdateSurveyRequest.customSurvey(this.customSurvey);
            webinarsUpdateSurveyRequest.showInTheBrowser(this.showInTheBrowser);
            webinarsUpdateSurveyRequest.showInTheFollowUpEmail(this.showInTheFollowUpEmail);
            webinarsUpdateSurveyRequest.thirdPartySurvey(this.thirdPartySurvey);
            return webinarsUpdateSurveyRequest;
        }

        /**
         * Execute updateSurvey request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Webinar survey updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid third party survey: {third_party_survey}. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To use this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The host isn&#39;t allowed to use a third party survey link. To use this feature, enable the \&quot;Allow host to use a 3rd-party survey link\&quot; setting in the \&quot;Account Settings\&quot; page of the Zoom web portal. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebinarsUpdateSurveyRequest webinarsUpdateSurveyRequest = buildBodyParams();
            updateSurveyWithHttpInfo(webinarId, webinarsUpdateSurveyRequest);
        }

        /**
         * Execute updateSurvey request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Webinar survey updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid third party survey: {third_party_survey}. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To use this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The host isn&#39;t allowed to use a third party survey link. To use this feature, enable the \&quot;Allow host to use a 3rd-party survey link\&quot; setting in the \&quot;Account Settings\&quot; page of the Zoom web portal. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebinarsUpdateSurveyRequest webinarsUpdateSurveyRequest = buildBodyParams();
            return updateSurveyWithHttpInfo(webinarId, webinarsUpdateSurveyRequest);
        }

        /**
         * Execute updateSurvey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Webinar survey updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid third party survey: {third_party_survey}. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To use this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The host isn&#39;t allowed to use a third party survey link. To use this feature, enable the \&quot;Allow host to use a 3rd-party survey link\&quot; setting in the \&quot;Account Settings\&quot; page of the Zoom web portal. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebinarsUpdateSurveyRequest webinarsUpdateSurveyRequest = buildBodyParams();
            return updateSurveyAsync(webinarId, webinarsUpdateSurveyRequest, _callback);
        }
    }

    /**
     * Update a webinar survey
     * Update a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).  **Prerequisites:** * A Pro or higher plan with the Webinar add-on. * Enable the [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature in the host&#39;s account.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @return UpdateSurveyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Webinar survey updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid webinar ID. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid third party survey: {third_party_survey}. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Webinar survey disabled. To use this feature, enable the \&quot;Webinar Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  The host isn&#39;t allowed to use a third party survey link. To use this feature, enable the \&quot;Allow host to use a 3rd-party survey link\&quot; setting in the \&quot;Account Settings\&quot; page of the Zoom web portal. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Webinar ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Webinar does not exist: {webinarId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSurveyRequestBuilder updateSurvey(Long webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        return new UpdateSurveyRequestBuilder(webinarId);
    }
    private okhttp3.Call uploadBrandingVirtualBackgroundCall(Long webinarId, File _file, Boolean _default, Boolean setDefaultForAllPanelists, WebinarsUploadBrandingVirtualBackgroundRequest webinarsUploadBrandingVirtualBackgroundRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsUploadBrandingVirtualBackgroundRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/branding/virtual_backgrounds"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (_default != null) {
            localVarFormParams.put("default", _default);
        }

        if (setDefaultForAllPanelists != null) {
            localVarFormParams.put("set_default_for_all_panelists", setDefaultForAllPanelists);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadBrandingVirtualBackgroundValidateBeforeCall(Long webinarId, File _file, Boolean _default, Boolean setDefaultForAllPanelists, WebinarsUploadBrandingVirtualBackgroundRequest webinarsUploadBrandingVirtualBackgroundRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling uploadBrandingVirtualBackground(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadBrandingVirtualBackground(Async)");
        }

        return uploadBrandingVirtualBackgroundCall(webinarId, _file, _default, setDefaultForAllPanelists, webinarsUploadBrandingVirtualBackgroundRequest, _callback);

    }


    private ApiResponse<WebinarsUploadBrandingVirtualBackgroundResponse> uploadBrandingVirtualBackgroundWithHttpInfo(Long webinarId, File _file, Boolean _default, Boolean setDefaultForAllPanelists, WebinarsUploadBrandingVirtualBackgroundRequest webinarsUploadBrandingVirtualBackgroundRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadBrandingVirtualBackgroundValidateBeforeCall(webinarId, _file, _default, setDefaultForAllPanelists, webinarsUploadBrandingVirtualBackgroundRequest, null);
        Type localVarReturnType = new TypeToken<WebinarsUploadBrandingVirtualBackgroundResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadBrandingVirtualBackgroundAsync(Long webinarId, File _file, Boolean _default, Boolean setDefaultForAllPanelists, WebinarsUploadBrandingVirtualBackgroundRequest webinarsUploadBrandingVirtualBackgroundRequest, final ApiCallback<WebinarsUploadBrandingVirtualBackgroundResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadBrandingVirtualBackgroundValidateBeforeCall(webinarId, _file, _default, setDefaultForAllPanelists, webinarsUploadBrandingVirtualBackgroundRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarsUploadBrandingVirtualBackgroundResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadBrandingVirtualBackgroundRequestBuilder {
        private final Long webinarId;
        private final File _file;
        private Boolean _default;
        private Boolean setDefaultForAllPanelists;

        private UploadBrandingVirtualBackgroundRequestBuilder(Long webinarId, File _file) {
            this.webinarId = webinarId;
            this._file = _file;
        }

        /**
         * Set _default
         * @param _default Whether set the file as the default Virtual Background file. (optional, default to false)
         * @return UploadBrandingVirtualBackgroundRequestBuilder
         */
        public UploadBrandingVirtualBackgroundRequestBuilder _default(Boolean _default) {
            this._default = _default;
            return this;
        }
        
        /**
         * Set setDefaultForAllPanelists
         * @param setDefaultForAllPanelists Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background. (optional, default to true)
         * @return UploadBrandingVirtualBackgroundRequestBuilder
         */
        public UploadBrandingVirtualBackgroundRequestBuilder setDefaultForAllPanelists(Boolean setDefaultForAllPanelists) {
            this.setDefaultForAllPanelists = setDefaultForAllPanelists;
            return this;
        }
        
        /**
         * Build call for uploadBrandingVirtualBackground
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Virtual Background uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.  **Error Code:** &#x60;120&#x60; &lt;br&gt; * No file uploaded. Verify that a file has been uploaded.  * File size cannot exceed 15M.  * A maximum of 10 files are allowed for a webinar.  * Only JPG/JPEG, GIF, or PNG image files can be uploaded.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsUploadBrandingVirtualBackgroundRequest webinarsUploadBrandingVirtualBackgroundRequest = buildBodyParams();
            return uploadBrandingVirtualBackgroundCall(webinarId, _file, _default, setDefaultForAllPanelists, webinarsUploadBrandingVirtualBackgroundRequest, _callback);
        }

        private WebinarsUploadBrandingVirtualBackgroundRequest buildBodyParams() {
            WebinarsUploadBrandingVirtualBackgroundRequest webinarsUploadBrandingVirtualBackgroundRequest = new WebinarsUploadBrandingVirtualBackgroundRequest();
            webinarsUploadBrandingVirtualBackgroundRequest._file(this._file);
            webinarsUploadBrandingVirtualBackgroundRequest._default(this._default);
            webinarsUploadBrandingVirtualBackgroundRequest.setDefaultForAllPanelists(this.setDefaultForAllPanelists);
            return webinarsUploadBrandingVirtualBackgroundRequest;
        }

        /**
         * Execute uploadBrandingVirtualBackground request
         * @return WebinarsUploadBrandingVirtualBackgroundResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Virtual Background uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.  **Error Code:** &#x60;120&#x60; &lt;br&gt; * No file uploaded. Verify that a file has been uploaded.  * File size cannot exceed 15M.  * A maximum of 10 files are allowed for a webinar.  * Only JPG/JPEG, GIF, or PNG image files can be uploaded.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsUploadBrandingVirtualBackgroundResponse execute() throws ApiException {
            WebinarsUploadBrandingVirtualBackgroundRequest webinarsUploadBrandingVirtualBackgroundRequest = buildBodyParams();
            ApiResponse<WebinarsUploadBrandingVirtualBackgroundResponse> localVarResp = uploadBrandingVirtualBackgroundWithHttpInfo(webinarId, _file, _default, setDefaultForAllPanelists, webinarsUploadBrandingVirtualBackgroundRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadBrandingVirtualBackground request with HTTP info returned
         * @return ApiResponse&lt;WebinarsUploadBrandingVirtualBackgroundResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Virtual Background uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.  **Error Code:** &#x60;120&#x60; &lt;br&gt; * No file uploaded. Verify that a file has been uploaded.  * File size cannot exceed 15M.  * A maximum of 10 files are allowed for a webinar.  * Only JPG/JPEG, GIF, or PNG image files can be uploaded.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsUploadBrandingVirtualBackgroundResponse> executeWithHttpInfo() throws ApiException {
            WebinarsUploadBrandingVirtualBackgroundRequest webinarsUploadBrandingVirtualBackgroundRequest = buildBodyParams();
            return uploadBrandingVirtualBackgroundWithHttpInfo(webinarId, _file, _default, setDefaultForAllPanelists, webinarsUploadBrandingVirtualBackgroundRequest);
        }

        /**
         * Execute uploadBrandingVirtualBackground request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Virtual Background uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.  **Error Code:** &#x60;120&#x60; &lt;br&gt; * No file uploaded. Verify that a file has been uploaded.  * File size cannot exceed 15M.  * A maximum of 10 files are allowed for a webinar.  * Only JPG/JPEG, GIF, or PNG image files can be uploaded.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsUploadBrandingVirtualBackgroundResponse> _callback) throws ApiException {
            WebinarsUploadBrandingVirtualBackgroundRequest webinarsUploadBrandingVirtualBackgroundRequest = buildBodyParams();
            return uploadBrandingVirtualBackgroundAsync(webinarId, _file, _default, setDefaultForAllPanelists, webinarsUploadBrandingVirtualBackgroundRequest, _callback);
        }
    }

    /**
     * Upload a webinar&#39;s branding Virtual Background
     * Use this API to upload a webinar&#39;s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). Hosts and panelists can select and use these Virtual Backgrounds during the webinar. Branding Virtual Background files have the following restrictions:  * A webinar cannot exceed more than 10 Virtual Background files.  * You can only upload image files that are in JPG/JPEG, GIF or PNG format.  * The Virtual Background file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @param _file The Virtual Background&#39;s file path, in binary format. (required)
     * @return UploadBrandingVirtualBackgroundRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Virtual Background uploaded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.  **Error Code:** &#x60;120&#x60; &lt;br&gt; * No file uploaded. Verify that a file has been uploaded.  * File size cannot exceed 15M.  * A maximum of 10 files are allowed for a webinar.  * Only JPG/JPEG, GIF, or PNG image files can be uploaded.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
     </table>
     */
    public UploadBrandingVirtualBackgroundRequestBuilder uploadBrandingVirtualBackground(Long webinarId, File _file) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadBrandingVirtualBackgroundRequestBuilder(webinarId, _file);
    }
    private okhttp3.Call uploadBrandingWallpaperCall(Long webinarId, File _file, WebinarsUploadBrandingWallpaperRequest webinarsUploadBrandingWallpaperRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarsUploadBrandingWallpaperRequest;

        // create path and map variables
        String localVarPath = "/webinars/{webinarId}/branding/wallpaper"
            .replace("{" + "webinarId" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadBrandingWallpaperValidateBeforeCall(Long webinarId, File _file, WebinarsUploadBrandingWallpaperRequest webinarsUploadBrandingWallpaperRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling uploadBrandingWallpaper(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadBrandingWallpaper(Async)");
        }

        return uploadBrandingWallpaperCall(webinarId, _file, webinarsUploadBrandingWallpaperRequest, _callback);

    }


    private ApiResponse<WebinarsUploadBrandingWallpaperResponse> uploadBrandingWallpaperWithHttpInfo(Long webinarId, File _file, WebinarsUploadBrandingWallpaperRequest webinarsUploadBrandingWallpaperRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadBrandingWallpaperValidateBeforeCall(webinarId, _file, webinarsUploadBrandingWallpaperRequest, null);
        Type localVarReturnType = new TypeToken<WebinarsUploadBrandingWallpaperResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadBrandingWallpaperAsync(Long webinarId, File _file, WebinarsUploadBrandingWallpaperRequest webinarsUploadBrandingWallpaperRequest, final ApiCallback<WebinarsUploadBrandingWallpaperResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadBrandingWallpaperValidateBeforeCall(webinarId, _file, webinarsUploadBrandingWallpaperRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarsUploadBrandingWallpaperResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadBrandingWallpaperRequestBuilder {
        private final Long webinarId;
        private final File _file;

        private UploadBrandingWallpaperRequestBuilder(Long webinarId, File _file) {
            this.webinarId = webinarId;
            this._file = _file;
        }

        /**
         * Build call for uploadBrandingWallpaper
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar wallpaper uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.  **Error Code:** &#x60;120&#x60; &lt;br&gt; * No file uploaded. Verify that a file has been uploaded.  * File size cannot exceed 15M.  * A maximum of 10 files are allowed for a webinar.  * Only JPG/JPEG, GIF, or PNG image files can be uploaded.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarsUploadBrandingWallpaperRequest webinarsUploadBrandingWallpaperRequest = buildBodyParams();
            return uploadBrandingWallpaperCall(webinarId, _file, webinarsUploadBrandingWallpaperRequest, _callback);
        }

        private WebinarsUploadBrandingWallpaperRequest buildBodyParams() {
            WebinarsUploadBrandingWallpaperRequest webinarsUploadBrandingWallpaperRequest = new WebinarsUploadBrandingWallpaperRequest();
            webinarsUploadBrandingWallpaperRequest._file(this._file);
            return webinarsUploadBrandingWallpaperRequest;
        }

        /**
         * Execute uploadBrandingWallpaper request
         * @return WebinarsUploadBrandingWallpaperResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar wallpaper uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.  **Error Code:** &#x60;120&#x60; &lt;br&gt; * No file uploaded. Verify that a file has been uploaded.  * File size cannot exceed 15M.  * A maximum of 10 files are allowed for a webinar.  * Only JPG/JPEG, GIF, or PNG image files can be uploaded.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public WebinarsUploadBrandingWallpaperResponse execute() throws ApiException {
            WebinarsUploadBrandingWallpaperRequest webinarsUploadBrandingWallpaperRequest = buildBodyParams();
            ApiResponse<WebinarsUploadBrandingWallpaperResponse> localVarResp = uploadBrandingWallpaperWithHttpInfo(webinarId, _file, webinarsUploadBrandingWallpaperRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadBrandingWallpaper request with HTTP info returned
         * @return ApiResponse&lt;WebinarsUploadBrandingWallpaperResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar wallpaper uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.  **Error Code:** &#x60;120&#x60; &lt;br&gt; * No file uploaded. Verify that a file has been uploaded.  * File size cannot exceed 15M.  * A maximum of 10 files are allowed for a webinar.  * Only JPG/JPEG, GIF, or PNG image files can be uploaded.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebinarsUploadBrandingWallpaperResponse> executeWithHttpInfo() throws ApiException {
            WebinarsUploadBrandingWallpaperRequest webinarsUploadBrandingWallpaperRequest = buildBodyParams();
            return uploadBrandingWallpaperWithHttpInfo(webinarId, _file, webinarsUploadBrandingWallpaperRequest);
        }

        /**
         * Execute uploadBrandingWallpaper request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar wallpaper uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.  **Error Code:** &#x60;120&#x60; &lt;br&gt; * No file uploaded. Verify that a file has been uploaded.  * File size cannot exceed 15M.  * A maximum of 10 files are allowed for a webinar.  * Only JPG/JPEG, GIF, or PNG image files can be uploaded.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebinarsUploadBrandingWallpaperResponse> _callback) throws ApiException {
            WebinarsUploadBrandingWallpaperRequest webinarsUploadBrandingWallpaperRequest = buildBodyParams();
            return uploadBrandingWallpaperAsync(webinarId, _file, webinarsUploadBrandingWallpaperRequest, _callback);
        }
    }

    /**
     * Upload a webinar&#39;s branding wallpaper
     * Use this API to upload a webinar&#39;s session branding wallpaper file. Webinar branding wallpaper files have the following requirements:  * A webinar can only have one wallpaper file.  * You can only upload image files that are in JPG/JPEG, GIF, or PNG format.  * Image files must be 16:9 ratio. The recommended image size is 1920 x 1080 pixels (px).  * The wallpaper file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** &#x60;webinar:write&#x60;,&#x60;webinar:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param webinarId The webinar&#39;s ID. (required)
     * @param _file The wallpaper&#39;s file path, in binary format. (required)
     * @return UploadBrandingWallpaperRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Webinar wallpaper uploaded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; This webinar does not have session branding enabled.  **Error Code:** &#x60;120&#x60; &lt;br&gt; * No file uploaded. Verify that a file has been uploaded.  * File size cannot exceed 15M.  * A maximum of 10 files are allowed for a webinar.  * Only JPG/JPEG, GIF, or PNG image files can be uploaded.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Webinar \&quot;{webinarId}\&quot; not found or has expired.   </td><td>  -  </td></tr>
     </table>
     */
    public UploadBrandingWallpaperRequestBuilder uploadBrandingWallpaper(Long webinarId, File _file) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadBrandingWallpaperRequestBuilder(webinarId, _file);
    }
}
