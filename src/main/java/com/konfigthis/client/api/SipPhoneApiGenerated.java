/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SipPhoneEnableUserSipPhoneRequest;
import com.konfigthis.client.model.SipPhoneEnableUserSipPhoneResponse;
import com.konfigthis.client.model.SipPhoneListResponse;
import com.konfigthis.client.model.SipPhoneUpdateSpecificPhoneRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SipPhoneApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SipPhoneApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SipPhoneApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getOpenapiAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setOpenapiAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deletePhoneCall(String phoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sip_phones/{phoneId}"
            .replace("{" + "phoneId" + "}", localVarApiClient.escapeString(phoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePhoneValidateBeforeCall(String phoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneId' is set
        if (phoneId == null) {
            throw new ApiException("Missing the required parameter 'phoneId' when calling deletePhone(Async)");
        }

        return deletePhoneCall(phoneId, _callback);

    }


    private ApiResponse<Void> deletePhoneWithHttpInfo(String phoneId) throws ApiException {
        okhttp3.Call localVarCall = deletePhoneValidateBeforeCall(phoneId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePhoneAsync(String phoneId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePhoneValidateBeforeCall(phoneId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePhoneRequestBuilder {
        private final String phoneId;

        private DeletePhoneRequestBuilder(String phoneId) {
            this.phoneId = phoneId;
        }

        /**
         * Build call for deletePhone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **Error Code:** &#x60;200&#x60;    Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     SIP Phone deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePhoneCall(phoneId, _callback);
        }


        /**
         * Execute deletePhone request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **Error Code:** &#x60;200&#x60;    Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     SIP Phone deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePhoneWithHttpInfo(phoneId);
        }

        /**
         * Execute deletePhone request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **Error Code:** &#x60;200&#x60;    Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     SIP Phone deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePhoneWithHttpInfo(phoneId);
        }

        /**
         * Execute deletePhone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **Error Code:** &#x60;200&#x60;    Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     SIP Phone deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePhoneAsync(phoneId, _callback);
        }
    }

    /**
     * Delete SIP phone
     * Use this API to delete a Zoom account&#39;s SIP phone.    **Prerequisites**:  * Currently only supported on Cisco and Avaya PBX systems.  * The user must enable **SIP Phone Integration** by contacting the [Zoom Sales](https://zoom.us/contactsales) team.  **Scopes:** &#x60;sip_phone:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param phoneId The SIP phone ID. It can be retrieved from the List SIP Phones API. (required)
     * @return DeletePhoneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **Error Code:** &#x60;200&#x60;    Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     SIP Phone deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePhoneRequestBuilder deletePhone(String phoneId) throws IllegalArgumentException {
        if (phoneId == null) throw new IllegalArgumentException("\"phoneId\" is required but got null");
            

        return new DeletePhoneRequestBuilder(phoneId);
    }
    private okhttp3.Call enableUserSipPhoneCall(SipPhoneEnableUserSipPhoneRequest sipPhoneEnableUserSipPhoneRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sipPhoneEnableUserSipPhoneRequest;

        // create path and map variables
        String localVarPath = "/sip_phones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableUserSipPhoneValidateBeforeCall(SipPhoneEnableUserSipPhoneRequest sipPhoneEnableUserSipPhoneRequest, final ApiCallback _callback) throws ApiException {
        return enableUserSipPhoneCall(sipPhoneEnableUserSipPhoneRequest, _callback);

    }


    private ApiResponse<SipPhoneEnableUserSipPhoneResponse> enableUserSipPhoneWithHttpInfo(SipPhoneEnableUserSipPhoneRequest sipPhoneEnableUserSipPhoneRequest) throws ApiException {
        okhttp3.Call localVarCall = enableUserSipPhoneValidateBeforeCall(sipPhoneEnableUserSipPhoneRequest, null);
        Type localVarReturnType = new TypeToken<SipPhoneEnableUserSipPhoneResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enableUserSipPhoneAsync(SipPhoneEnableUserSipPhoneRequest sipPhoneEnableUserSipPhoneRequest, final ApiCallback<SipPhoneEnableUserSipPhoneResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableUserSipPhoneValidateBeforeCall(sipPhoneEnableUserSipPhoneRequest, _callback);
        Type localVarReturnType = new TypeToken<SipPhoneEnableUserSipPhoneResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnableUserSipPhoneRequestBuilder {
        private final String authorizationName;
        private final String domain;
        private final String password;
        private final String proxyServer;
        private final String registerServer;
        private final String userEmail;
        private final String userName;
        private final String voiceMail;
        private String proxyServer2;
        private String proxyServer3;
        private String registerServer2;
        private String registerServer3;
        private Integer registrationExpireTime;
        private String transportProtocol;
        private String transportProtocol2;
        private String transportProtocol3;

        private EnableUserSipPhoneRequestBuilder(String authorizationName, String domain, String password, String proxyServer, String registerServer, String userEmail, String userName, String voiceMail) {
            this.authorizationName = authorizationName;
            this.domain = domain;
            this.password = password;
            this.proxyServer = proxyServer;
            this.registerServer = registerServer;
            this.userEmail = userEmail;
            this.userName = userName;
            this.voiceMail = voiceMail;
        }

        /**
         * Set proxyServer2
         * @param proxyServer2 The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty. (optional)
         * @return EnableUserSipPhoneRequestBuilder
         */
        public EnableUserSipPhoneRequestBuilder proxyServer2(String proxyServer2) {
            this.proxyServer2 = proxyServer2;
            return this;
        }
        
        /**
         * Set proxyServer3
         * @param proxyServer3 The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty. (optional)
         * @return EnableUserSipPhoneRequestBuilder
         */
        public EnableUserSipPhoneRequestBuilder proxyServer3(String proxyServer3) {
            this.proxyServer3 = proxyServer3;
            return this;
        }
        
        /**
         * Set registerServer2
         * @param registerServer2 The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. (optional)
         * @return EnableUserSipPhoneRequestBuilder
         */
        public EnableUserSipPhoneRequestBuilder registerServer2(String registerServer2) {
            this.registerServer2 = registerServer2;
            return this;
        }
        
        /**
         * Set registerServer3
         * @param registerServer3 The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. (optional)
         * @return EnableUserSipPhoneRequestBuilder
         */
        public EnableUserSipPhoneRequestBuilder registerServer3(String registerServer3) {
            this.registerServer3 = registerServer3;
            return this;
        }
        
        /**
         * Set registrationExpireTime
         * @param registrationExpireTime The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server. (optional, default to 60)
         * @return EnableUserSipPhoneRequestBuilder
         */
        public EnableUserSipPhoneRequestBuilder registrationExpireTime(Integer registrationExpireTime) {
            this.registrationExpireTime = registrationExpireTime;
            return this;
        }
        
        /**
         * Set transportProtocol
         * @param transportProtocol Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;. (optional)
         * @return EnableUserSipPhoneRequestBuilder
         */
        public EnableUserSipPhoneRequestBuilder transportProtocol(String transportProtocol) {
            this.transportProtocol = transportProtocol;
            return this;
        }
        
        /**
         * Set transportProtocol2
         * @param transportProtocol2 Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;. (optional)
         * @return EnableUserSipPhoneRequestBuilder
         */
        public EnableUserSipPhoneRequestBuilder transportProtocol2(String transportProtocol2) {
            this.transportProtocol2 = transportProtocol2;
            return this;
        }
        
        /**
         * Set transportProtocol3
         * @param transportProtocol3 Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;. (optional)
         * @return EnableUserSipPhoneRequestBuilder
         */
        public EnableUserSipPhoneRequestBuilder transportProtocol3(String transportProtocol3) {
            this.transportProtocol3 = transportProtocol3;
            return this;
        }
        
        /**
         * Build call for enableUserSipPhone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     SIP Phone Created.  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; SIP Phone with the same email already exists.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SipPhoneEnableUserSipPhoneRequest sipPhoneEnableUserSipPhoneRequest = buildBodyParams();
            return enableUserSipPhoneCall(sipPhoneEnableUserSipPhoneRequest, _callback);
        }

        private SipPhoneEnableUserSipPhoneRequest buildBodyParams() {
            SipPhoneEnableUserSipPhoneRequest sipPhoneEnableUserSipPhoneRequest = new SipPhoneEnableUserSipPhoneRequest();
            sipPhoneEnableUserSipPhoneRequest.authorizationName(this.authorizationName);
            sipPhoneEnableUserSipPhoneRequest.domain(this.domain);
            sipPhoneEnableUserSipPhoneRequest.password(this.password);
            sipPhoneEnableUserSipPhoneRequest.proxyServer(this.proxyServer);
            sipPhoneEnableUserSipPhoneRequest.proxyServer2(this.proxyServer2);
            sipPhoneEnableUserSipPhoneRequest.proxyServer3(this.proxyServer3);
            sipPhoneEnableUserSipPhoneRequest.registerServer(this.registerServer);
            sipPhoneEnableUserSipPhoneRequest.registerServer2(this.registerServer2);
            sipPhoneEnableUserSipPhoneRequest.registerServer3(this.registerServer3);
            sipPhoneEnableUserSipPhoneRequest.registrationExpireTime(this.registrationExpireTime);
            if (this.transportProtocol != null)
            sipPhoneEnableUserSipPhoneRequest.transportProtocol(SipPhoneEnableUserSipPhoneRequest.TransportProtocolEnum.fromValue(this.transportProtocol));
            if (this.transportProtocol2 != null)
            sipPhoneEnableUserSipPhoneRequest.transportProtocol2(SipPhoneEnableUserSipPhoneRequest.TransportProtocol2Enum.fromValue(this.transportProtocol2));
            if (this.transportProtocol3 != null)
            sipPhoneEnableUserSipPhoneRequest.transportProtocol3(SipPhoneEnableUserSipPhoneRequest.TransportProtocol3Enum.fromValue(this.transportProtocol3));
            sipPhoneEnableUserSipPhoneRequest.userEmail(this.userEmail);
            sipPhoneEnableUserSipPhoneRequest.userName(this.userName);
            sipPhoneEnableUserSipPhoneRequest.voiceMail(this.voiceMail);
            return sipPhoneEnableUserSipPhoneRequest;
        }

        /**
         * Execute enableUserSipPhone request
         * @return SipPhoneEnableUserSipPhoneResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     SIP Phone Created.  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; SIP Phone with the same email already exists.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public SipPhoneEnableUserSipPhoneResponse execute() throws ApiException {
            SipPhoneEnableUserSipPhoneRequest sipPhoneEnableUserSipPhoneRequest = buildBodyParams();
            ApiResponse<SipPhoneEnableUserSipPhoneResponse> localVarResp = enableUserSipPhoneWithHttpInfo(sipPhoneEnableUserSipPhoneRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enableUserSipPhone request with HTTP info returned
         * @return ApiResponse&lt;SipPhoneEnableUserSipPhoneResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     SIP Phone Created.  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; SIP Phone with the same email already exists.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SipPhoneEnableUserSipPhoneResponse> executeWithHttpInfo() throws ApiException {
            SipPhoneEnableUserSipPhoneRequest sipPhoneEnableUserSipPhoneRequest = buildBodyParams();
            return enableUserSipPhoneWithHttpInfo(sipPhoneEnableUserSipPhoneRequest);
        }

        /**
         * Execute enableUserSipPhone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     SIP Phone Created.  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; SIP Phone with the same email already exists.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SipPhoneEnableUserSipPhoneResponse> _callback) throws ApiException {
            SipPhoneEnableUserSipPhoneRequest sipPhoneEnableUserSipPhoneRequest = buildBodyParams();
            return enableUserSipPhoneAsync(sipPhoneEnableUserSipPhoneRequest, _callback);
        }
    }

    /**
     * Enable SIP phone
     * Zoom&#39;s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to enable a user to use SIP phone.          **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.       **Scopes:** &#x60;sip_phone:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @return EnableUserSipPhoneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     SIP Phone Created.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; SIP Phone with the same email already exists.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} not exist or not belong to this account.   </td><td>  -  </td></tr>
     </table>
     */
    public EnableUserSipPhoneRequestBuilder enableUserSipPhone(String authorizationName, String domain, String password, String proxyServer, String registerServer, String userEmail, String userName, String voiceMail) throws IllegalArgumentException {
        if (authorizationName == null) throw new IllegalArgumentException("\"authorizationName\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        if (proxyServer == null) throw new IllegalArgumentException("\"proxyServer\" is required but got null");
            

        if (registerServer == null) throw new IllegalArgumentException("\"registerServer\" is required but got null");
            

        if (userEmail == null) throw new IllegalArgumentException("\"userEmail\" is required but got null");
            

        if (userName == null) throw new IllegalArgumentException("\"userName\" is required but got null");
            

        if (voiceMail == null) throw new IllegalArgumentException("\"voiceMail\" is required but got null");
            

        return new EnableUserSipPhoneRequestBuilder(authorizationName, domain, password, proxyServer, registerServer, userEmail, userName, voiceMail);
    }
    private okhttp3.Call listCall(Integer pageNumber, String searchKey, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sip_phones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (searchKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_key", searchKey));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer pageNumber, String searchKey, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        return listCall(pageNumber, searchKey, pageSize, nextPageToken, _callback);

    }


    private ApiResponse<SipPhoneListResponse> listWithHttpInfo(Integer pageNumber, String searchKey, Integer pageSize, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(pageNumber, searchKey, pageSize, nextPageToken, null);
        Type localVarReturnType = new TypeToken<SipPhoneListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer pageNumber, String searchKey, Integer pageSize, String nextPageToken, final ApiCallback<SipPhoneListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(pageNumber, searchKey, pageSize, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<SipPhoneListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Integer pageNumber;
        private String searchKey;
        private Integer pageSize;
        private String nextPageToken;

        private ListRequestBuilder() {
        }

        /**
         * Set pageNumber
         * @param pageNumber **Deprecated.** We will no longer support this field in a future release. Instead, use the &#x60;next_page_token&#x60; for pagination. (optional, default to 1)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set searchKey
         * @param searchKey User name or email address of a user. If this parameter is provided, only the SIP phone system integration enabled for that specific user will be returned. Otherwise, all SIP phones on an account will be returned. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder searchKey(String searchKey) {
            this.searchKey = searchKey;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     SIP Phones listed successfully.  **Error Code:** &#x60;200&#x60;     Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(pageNumber, searchKey, pageSize, nextPageToken, _callback);
        }


        /**
         * Execute list request
         * @return SipPhoneListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     SIP Phones listed successfully.  **Error Code:** &#x60;200&#x60;     Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request   </td><td>  -  </td></tr>
         </table>
         */
        public SipPhoneListResponse execute() throws ApiException {
            ApiResponse<SipPhoneListResponse> localVarResp = listWithHttpInfo(pageNumber, searchKey, pageSize, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;SipPhoneListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     SIP Phones listed successfully.  **Error Code:** &#x60;200&#x60;     Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SipPhoneListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(pageNumber, searchKey, pageSize, nextPageToken);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     SIP Phones listed successfully.  **Error Code:** &#x60;200&#x60;     Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SipPhoneListResponse> _callback) throws ApiException {
            return listAsync(pageNumber, searchKey, pageSize, nextPageToken, _callback);
        }
    }

    /**
     * List SIP phones
     * Zoom&#39;s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to list SIP phones on an account.          **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * User must enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.       **Scopes:** &#x60;sip_phone:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     SIP Phones listed successfully.  **Error Code:** &#x60;200&#x60;     Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request   </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateSpecificPhoneCall(String phoneId, SipPhoneUpdateSpecificPhoneRequest sipPhoneUpdateSpecificPhoneRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sipPhoneUpdateSpecificPhoneRequest;

        // create path and map variables
        String localVarPath = "/sip_phones/{phoneId}"
            .replace("{" + "phoneId" + "}", localVarApiClient.escapeString(phoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecificPhoneValidateBeforeCall(String phoneId, SipPhoneUpdateSpecificPhoneRequest sipPhoneUpdateSpecificPhoneRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneId' is set
        if (phoneId == null) {
            throw new ApiException("Missing the required parameter 'phoneId' when calling updateSpecificPhone(Async)");
        }

        return updateSpecificPhoneCall(phoneId, sipPhoneUpdateSpecificPhoneRequest, _callback);

    }


    private ApiResponse<Void> updateSpecificPhoneWithHttpInfo(String phoneId, SipPhoneUpdateSpecificPhoneRequest sipPhoneUpdateSpecificPhoneRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSpecificPhoneValidateBeforeCall(phoneId, sipPhoneUpdateSpecificPhoneRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSpecificPhoneAsync(String phoneId, SipPhoneUpdateSpecificPhoneRequest sipPhoneUpdateSpecificPhoneRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecificPhoneValidateBeforeCall(phoneId, sipPhoneUpdateSpecificPhoneRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSpecificPhoneRequestBuilder {
        private final String authorizationName;
        private final String domain;
        private final String password;
        private final String proxyServer;
        private final String proxyServer2;
        private final String proxyServer3;
        private final String registerServer;
        private final String registerServer2;
        private final String registerServer3;
        private final String userName;
        private final String voiceMail;
        private final String phoneId;
        private Integer registrationExpireTime;
        private String transportProtocol;
        private String transportProtocol2;
        private String transportProtocol3;

        private UpdateSpecificPhoneRequestBuilder(String authorizationName, String domain, String password, String proxyServer, String proxyServer2, String proxyServer3, String registerServer, String registerServer2, String registerServer3, String userName, String voiceMail, String phoneId) {
            this.authorizationName = authorizationName;
            this.domain = domain;
            this.password = password;
            this.proxyServer = proxyServer;
            this.proxyServer2 = proxyServer2;
            this.proxyServer3 = proxyServer3;
            this.registerServer = registerServer;
            this.registerServer2 = registerServer2;
            this.registerServer3 = registerServer3;
            this.userName = userName;
            this.voiceMail = voiceMail;
            this.phoneId = phoneId;
        }

        /**
         * Set registrationExpireTime
         * @param registrationExpireTime The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server. (optional, default to 60)
         * @return UpdateSpecificPhoneRequestBuilder
         */
        public UpdateSpecificPhoneRequestBuilder registrationExpireTime(Integer registrationExpireTime) {
            this.registrationExpireTime = registrationExpireTime;
            return this;
        }
        
        /**
         * Set transportProtocol
         * @param transportProtocol Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;. (optional)
         * @return UpdateSpecificPhoneRequestBuilder
         */
        public UpdateSpecificPhoneRequestBuilder transportProtocol(String transportProtocol) {
            this.transportProtocol = transportProtocol;
            return this;
        }
        
        /**
         * Set transportProtocol2
         * @param transportProtocol2 Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;. (optional)
         * @return UpdateSpecificPhoneRequestBuilder
         */
        public UpdateSpecificPhoneRequestBuilder transportProtocol2(String transportProtocol2) {
            this.transportProtocol2 = transportProtocol2;
            return this;
        }
        
        /**
         * Set transportProtocol3
         * @param transportProtocol3 Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;. (optional)
         * @return UpdateSpecificPhoneRequestBuilder
         */
        public UpdateSpecificPhoneRequestBuilder transportProtocol3(String transportProtocol3) {
            this.transportProtocol3 = transportProtocol3;
            return this;
        }
        
        /**
         * Build call for updateSpecificPhone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **Error Code:** &#x60;200&#x60;     Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.  </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     SIP Phone information updated successfully.  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SipPhoneUpdateSpecificPhoneRequest sipPhoneUpdateSpecificPhoneRequest = buildBodyParams();
            return updateSpecificPhoneCall(phoneId, sipPhoneUpdateSpecificPhoneRequest, _callback);
        }

        private SipPhoneUpdateSpecificPhoneRequest buildBodyParams() {
            SipPhoneUpdateSpecificPhoneRequest sipPhoneUpdateSpecificPhoneRequest = new SipPhoneUpdateSpecificPhoneRequest();
            sipPhoneUpdateSpecificPhoneRequest.authorizationName(this.authorizationName);
            sipPhoneUpdateSpecificPhoneRequest.domain(this.domain);
            sipPhoneUpdateSpecificPhoneRequest.password(this.password);
            sipPhoneUpdateSpecificPhoneRequest.proxyServer(this.proxyServer);
            sipPhoneUpdateSpecificPhoneRequest.proxyServer2(this.proxyServer2);
            sipPhoneUpdateSpecificPhoneRequest.proxyServer3(this.proxyServer3);
            sipPhoneUpdateSpecificPhoneRequest.registerServer(this.registerServer);
            sipPhoneUpdateSpecificPhoneRequest.registerServer2(this.registerServer2);
            sipPhoneUpdateSpecificPhoneRequest.registerServer3(this.registerServer3);
            sipPhoneUpdateSpecificPhoneRequest.registrationExpireTime(this.registrationExpireTime);
            if (this.transportProtocol != null)
            sipPhoneUpdateSpecificPhoneRequest.transportProtocol(SipPhoneUpdateSpecificPhoneRequest.TransportProtocolEnum.fromValue(this.transportProtocol));
            if (this.transportProtocol2 != null)
            sipPhoneUpdateSpecificPhoneRequest.transportProtocol2(SipPhoneUpdateSpecificPhoneRequest.TransportProtocol2Enum.fromValue(this.transportProtocol2));
            if (this.transportProtocol3 != null)
            sipPhoneUpdateSpecificPhoneRequest.transportProtocol3(SipPhoneUpdateSpecificPhoneRequest.TransportProtocol3Enum.fromValue(this.transportProtocol3));
            sipPhoneUpdateSpecificPhoneRequest.userName(this.userName);
            sipPhoneUpdateSpecificPhoneRequest.voiceMail(this.voiceMail);
            return sipPhoneUpdateSpecificPhoneRequest;
        }

        /**
         * Execute updateSpecificPhone request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **Error Code:** &#x60;200&#x60;     Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.  </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     SIP Phone information updated successfully.  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SipPhoneUpdateSpecificPhoneRequest sipPhoneUpdateSpecificPhoneRequest = buildBodyParams();
            updateSpecificPhoneWithHttpInfo(phoneId, sipPhoneUpdateSpecificPhoneRequest);
        }

        /**
         * Execute updateSpecificPhone request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **Error Code:** &#x60;200&#x60;     Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.  </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     SIP Phone information updated successfully.  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SipPhoneUpdateSpecificPhoneRequest sipPhoneUpdateSpecificPhoneRequest = buildBodyParams();
            return updateSpecificPhoneWithHttpInfo(phoneId, sipPhoneUpdateSpecificPhoneRequest);
        }

        /**
         * Execute updateSpecificPhone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **Error Code:** &#x60;200&#x60;     Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.  </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     SIP Phone information updated successfully.  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SipPhoneUpdateSpecificPhoneRequest sipPhoneUpdateSpecificPhoneRequest = buildBodyParams();
            return updateSpecificPhoneAsync(phoneId, sipPhoneUpdateSpecificPhoneRequest, _callback);
        }
    }

    /**
     * Update SIP phone
     * Zoom&#39;s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to update information of a specific SIP Phone on a Zoom account.          **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.       **Scopes:** &#x60;sip_phone:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param phoneId The SIP phone ID. This can be retrieved from the List SIP Phones API. (required)
     * @return UpdateSpecificPhoneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **Error Code:** &#x60;200&#x60;     Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     SIP Phone information updated successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSpecificPhoneRequestBuilder updateSpecificPhone(String authorizationName, String domain, String password, String proxyServer, String proxyServer2, String proxyServer3, String registerServer, String registerServer2, String registerServer3, String userName, String voiceMail, String phoneId) throws IllegalArgumentException {
        if (authorizationName == null) throw new IllegalArgumentException("\"authorizationName\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        if (proxyServer == null) throw new IllegalArgumentException("\"proxyServer\" is required but got null");
            

        if (proxyServer2 == null) throw new IllegalArgumentException("\"proxyServer2\" is required but got null");
            

        if (proxyServer3 == null) throw new IllegalArgumentException("\"proxyServer3\" is required but got null");
            

        if (registerServer == null) throw new IllegalArgumentException("\"registerServer\" is required but got null");
            

        if (registerServer2 == null) throw new IllegalArgumentException("\"registerServer2\" is required but got null");
            

        if (registerServer3 == null) throw new IllegalArgumentException("\"registerServer3\" is required but got null");
            

        if (userName == null) throw new IllegalArgumentException("\"userName\" is required but got null");
            

        if (voiceMail == null) throw new IllegalArgumentException("\"voiceMail\" is required but got null");
            

        if (phoneId == null) throw new IllegalArgumentException("\"phoneId\" is required but got null");
            

        return new UpdateSpecificPhoneRequestBuilder(authorizationName, domain, password, proxyServer, proxyServer2, proxyServer3, registerServer, registerServer2, registerServer3, userName, voiceMail, phoneId);
    }
}
