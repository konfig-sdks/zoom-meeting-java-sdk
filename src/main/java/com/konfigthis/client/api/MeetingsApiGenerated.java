/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.MeetingsAddRegistrantRequest;
import com.konfigthis.client.model.MeetingsAddRegistrantRequestCustomQuestionsInner;
import com.konfigthis.client.model.MeetingsAddRegistrantResponse;
import com.konfigthis.client.model.MeetingsBatchRegistrantsCreateRequest;
import com.konfigthis.client.model.MeetingsBatchRegistrantsCreateRequestRegistrantsInner;
import com.konfigthis.client.model.MeetingsBatchRegistrantsCreateResponse;
import com.konfigthis.client.model.MeetingsControlInMeetingFeaturesRequest;
import com.konfigthis.client.model.MeetingsControlInMeetingFeaturesRequestParams;
import com.konfigthis.client.model.MeetingsCreateBatchPollsRequest;
import com.konfigthis.client.model.MeetingsCreateBatchPollsRequestPollsInner;
import com.konfigthis.client.model.MeetingsCreateBatchPollsResponse;
import com.konfigthis.client.model.MeetingsCreateInviteLinksRequest;
import com.konfigthis.client.model.MeetingsCreateInviteLinksRequestAttendeesInner;
import com.konfigthis.client.model.MeetingsCreateInviteLinksResponse;
import com.konfigthis.client.model.MeetingsCreateMeetingRequest;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestRecurrence;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestSettings;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestTrackingFieldsInner;
import com.konfigthis.client.model.MeetingsCreateMeetingResponse;
import com.konfigthis.client.model.MeetingsCreatePollRequest;
import com.konfigthis.client.model.MeetingsCreatePollRequestQuestionsInner;
import com.konfigthis.client.model.MeetingsCreatePollResponse;
import com.konfigthis.client.model.MeetingsCreateTemplateFromMeetingRequest;
import com.konfigthis.client.model.MeetingsCreateTemplateFromMeetingResponse;
import com.konfigthis.client.model.MeetingsGetDetails200Response;
import com.konfigthis.client.model.MeetingsGetDetailsResponse;
import com.konfigthis.client.model.MeetingsGetInvitationNoteResponse;
import com.konfigthis.client.model.MeetingsGetJoinTokenLocalRecordingResponse;
import com.konfigthis.client.model.MeetingsGetJoinTokenResponse;
import com.konfigthis.client.model.MeetingsGetLivestreamDetailsResponse;
import com.konfigthis.client.model.MeetingsGetMeetingArchiveTokenForLocalArchivingResponse;
import com.konfigthis.client.model.MeetingsGetMeetingSummaryResponse;
import com.konfigthis.client.model.MeetingsGetMeetingSurveyResponse;
import com.konfigthis.client.model.MeetingsGetMeetingTokenResponse;
import com.konfigthis.client.model.MeetingsGetPastMeetingParticipantsResponse;
import com.konfigthis.client.model.MeetingsGetPollResponse;
import com.konfigthis.client.model.MeetingsGetRegistrantDetailsResponse;
import com.konfigthis.client.model.MeetingsGetSipUriWithPasscodeRequest;
import com.konfigthis.client.model.MeetingsGetSipUriWithPasscodeResponse;
import com.konfigthis.client.model.MeetingsListHostScheduledResponse;
import com.konfigthis.client.model.MeetingsListMeetingPollsResponse;
import com.konfigthis.client.model.MeetingsListMeetingSummariesResponse;
import com.konfigthis.client.model.MeetingsListMeetingTemplatesResponse;
import com.konfigthis.client.model.MeetingsListPastMeetingInstancesResponse;
import com.konfigthis.client.model.MeetingsListPastMeetingPollsResponse;
import com.konfigthis.client.model.MeetingsListPastMeetingQaResponse;
import com.konfigthis.client.model.MeetingsListRegistrantsResponse;
import com.konfigthis.client.model.MeetingsListRegistrationQuestionsResponse;
import com.konfigthis.client.model.MeetingsListUpcomingMeetingsResponse;
import com.konfigthis.client.model.MeetingsLivestreamStatusUpdateRequest;
import com.konfigthis.client.model.MeetingsLivestreamStatusUpdateRequestSettings;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequest;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestRecurrence;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettings;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestTrackingFieldsInner;
import com.konfigthis.client.model.MeetingsUpdateLivestreamRequest;
import com.konfigthis.client.model.MeetingsUpdateMeetingPollRequest;
import com.konfigthis.client.model.MeetingsUpdateMeetingPollRequestQuestionsInner;
import com.konfigthis.client.model.MeetingsUpdateMeetingStatusRequest;
import com.konfigthis.client.model.MeetingsUpdateMessageRequest;
import com.konfigthis.client.model.MeetingsUpdateRegistrantStatusRequest;
import com.konfigthis.client.model.MeetingsUpdateRegistrantStatusRequestRegistrantsInner;
import com.konfigthis.client.model.MeetingsUpdateRegistrationQuestionsRequest;
import com.konfigthis.client.model.MeetingsUpdateRegistrationQuestionsRequestCustomQuestionsInner;
import com.konfigthis.client.model.MeetingsUpdateRegistrationQuestionsRequestQuestionsInner;
import com.konfigthis.client.model.MeetingsUpdateSurveyRequest;
import com.konfigthis.client.model.MeetingsUpdateSurveyRequestCustomSurvey;
import java.time.OffsetDateTime;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MeetingsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeetingsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MeetingsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getOpenapiAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setOpenapiAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addRegistrantCall(Long meetingId, String occurrenceIds, MeetingsAddRegistrantRequest meetingsAddRegistrantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsAddRegistrantRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/registrants"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_ids", occurrenceIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRegistrantValidateBeforeCall(Long meetingId, String occurrenceIds, MeetingsAddRegistrantRequest meetingsAddRegistrantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling addRegistrant(Async)");
        }

        return addRegistrantCall(meetingId, occurrenceIds, meetingsAddRegistrantRequest, _callback);

    }


    private ApiResponse<MeetingsAddRegistrantResponse> addRegistrantWithHttpInfo(Long meetingId, String occurrenceIds, MeetingsAddRegistrantRequest meetingsAddRegistrantRequest) throws ApiException {
        okhttp3.Call localVarCall = addRegistrantValidateBeforeCall(meetingId, occurrenceIds, meetingsAddRegistrantRequest, null);
        Type localVarReturnType = new TypeToken<MeetingsAddRegistrantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addRegistrantAsync(Long meetingId, String occurrenceIds, MeetingsAddRegistrantRequest meetingsAddRegistrantRequest, final ApiCallback<MeetingsAddRegistrantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRegistrantValidateBeforeCall(meetingId, occurrenceIds, meetingsAddRegistrantRequest, _callback);
        Type localVarReturnType = new TypeToken<MeetingsAddRegistrantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddRegistrantRequestBuilder {
        private final String firstName;
        private final String email;
        private final Long meetingId;
        private String lastName;
        private String address;
        private String city;
        private String state;
        private String zip;
        private String country;
        private String phone;
        private String comments;
        private List<MeetingsAddRegistrantRequestCustomQuestionsInner> customQuestions;
        private String industry;
        private String jobTitle;
        private String noOfEmployees;
        private String org;
        private String purchasingTimeFrame;
        private String roleInPurchaseProcess;
        private String language;
        private Boolean autoApprove;
        private String occurrenceIds;

        private AddRegistrantRequestBuilder(String firstName, String email, Long meetingId) {
            this.firstName = firstName;
            this.email = email;
            this.meetingId = meetingId;
        }

        /**
         * Set lastName
         * @param lastName The registrant&#39;s last name. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set address
         * @param address The registrant&#39;s address. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set city
         * @param city The registrant&#39;s city. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state The registrant&#39;s state or province. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zip
         * @param zip The registrant&#39;s ZIP or postal code. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set country
         * @param country The registrant&#39;s two-letter [country code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries). (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set phone
         * @param phone The registrant&#39;s phone number. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set comments
         * @param comments The registrant&#39;s questions and comments. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Set customQuestions
         * @param customQuestions Information about custom questions. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder customQuestions(List<MeetingsAddRegistrantRequestCustomQuestionsInner> customQuestions) {
            this.customQuestions = customQuestions;
            return this;
        }
        
        /**
         * Set industry
         * @param industry The registrant&#39;s industry. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder industry(String industry) {
            this.industry = industry;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle The registrant&#39;s job title. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set noOfEmployees
         * @param noOfEmployees The registrant&#39;s number of employees:  * &#x60;1-20&#x60;  * &#x60;21-50&#x60;  * &#x60;51-100&#x60;  * &#x60;101-500&#x60;  * &#x60;500-1,000&#x60;  * &#x60;1,001-5,000&#x60;  * &#x60;5,001-10,000&#x60;  * &#x60;More than 10,000&#x60; (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder noOfEmployees(String noOfEmployees) {
            this.noOfEmployees = noOfEmployees;
            return this;
        }
        
        /**
         * Set org
         * @param org The registrant&#39;s organization. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder org(String org) {
            this.org = org;
            return this;
        }
        
        /**
         * Set purchasingTimeFrame
         * @param purchasingTimeFrame The registrant&#39;s purchasing time frame:  * &#x60;Within a month&#x60;  * &#x60;1-3 months&#x60;  * &#x60;4-6 months&#x60;  * &#x60;More than 6 months&#x60;  * &#x60;No timeframe&#x60; (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder purchasingTimeFrame(String purchasingTimeFrame) {
            this.purchasingTimeFrame = purchasingTimeFrame;
            return this;
        }
        
        /**
         * Set roleInPurchaseProcess
         * @param roleInPurchaseProcess The registrant&#39;s role in the purchase process:  * &#x60;Decision Maker&#x60;  * &#x60;Evaluator/Recommender&#x60;  * &#x60;Influencer&#x60;  * &#x60;Not involved&#x60; (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder roleInPurchaseProcess(String roleInPurchaseProcess) {
            this.roleInPurchaseProcess = roleInPurchaseProcess;
            return this;
        }
        
        /**
         * Set language
         * @param language The registrant&#39;s language preference for confirmation emails:  * &#x60;en-US&#x60; &amp;mdash; English (US)  * &#x60;de-DE&#x60; &amp;mdash; German (Germany)  * &#x60;es-ES&#x60; &amp;mdash; Spanish (Spain)  * &#x60;fr-FR&#x60; &amp;mdash; French (France)  * &#x60;jp-JP&#x60; &amp;mdash; Japanese  * &#x60;pt-PT&#x60; &amp;mdash; Portuguese (Portugal)  * &#x60;ru-RU&#x60; &amp;mdash; Russian  * &#x60;zh-CN&#x60; &amp;mdash; Chinese (PRC)  * &#x60;zh-TW&#x60; &amp;mdash; Chinese (Taiwan)  * &#x60;ko-KO&#x60; &amp;mdash; Korean  * &#x60;it-IT&#x60; &amp;mdash; Italian (Italy)  * &#x60;vi-VN&#x60; &amp;mdash; Vietnamese  * &#x60;pl-PL&#x60; &amp;mdash; Polish  * &#x60;Tr-TR&#x60; &amp;mdash; Turkish (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set autoApprove
         * @param autoApprove If a meeting was scheduled with the &#x60;approval_type&#x60; field value of &#x60;1&#x60; (manual approval) but you want to automatically approve meeting registrants, set the value of this field to &#x60;true&#x60;.   **Note:** You cannot use this field to change approval setting for a meeting originally scheduled with the &#x60;approval_type&#x60; field value of &#x60;0&#x60; (automatic approval). (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder autoApprove(Boolean autoApprove) {
            this.autoApprove = autoApprove;
            return this;
        }
        
        /**
         * Set occurrenceIds
         * @param occurrenceIds A comma-separated list of meeting occurrence IDs. You can get this value with the [Get a meeting](https://developers.zoom.us) API. (optional)
         * @return AddRegistrantRequestBuilder
         */
        public AddRegistrantRequestBuilder occurrenceIds(String occurrenceIds) {
            this.occurrenceIds = occurrenceIds;
            return this;
        }
        
        /**
         * Build call for addRegistrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting registration created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You are not the meeting host.  **Error Code:** &#x60;3043&#x60; &lt;br&gt; Meeting has reached maximum attendee capacity.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting info.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; Meeting host does not exist: {userId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsAddRegistrantRequest meetingsAddRegistrantRequest = buildBodyParams();
            return addRegistrantCall(meetingId, occurrenceIds, meetingsAddRegistrantRequest, _callback);
        }

        private MeetingsAddRegistrantRequest buildBodyParams() {
            MeetingsAddRegistrantRequest meetingsAddRegistrantRequest = new MeetingsAddRegistrantRequest();
            meetingsAddRegistrantRequest.firstName(this.firstName);
            meetingsAddRegistrantRequest.lastName(this.lastName);
            meetingsAddRegistrantRequest.email(this.email);
            meetingsAddRegistrantRequest.address(this.address);
            meetingsAddRegistrantRequest.city(this.city);
            meetingsAddRegistrantRequest.state(this.state);
            meetingsAddRegistrantRequest.zip(this.zip);
            meetingsAddRegistrantRequest.country(this.country);
            meetingsAddRegistrantRequest.phone(this.phone);
            meetingsAddRegistrantRequest.comments(this.comments);
            meetingsAddRegistrantRequest.customQuestions(this.customQuestions);
            meetingsAddRegistrantRequest.industry(this.industry);
            meetingsAddRegistrantRequest.jobTitle(this.jobTitle);
            if (this.noOfEmployees != null)
            meetingsAddRegistrantRequest.noOfEmployees(MeetingsAddRegistrantRequest.NoOfEmployeesEnum.fromValue(this.noOfEmployees));
            meetingsAddRegistrantRequest.org(this.org);
            if (this.purchasingTimeFrame != null)
            meetingsAddRegistrantRequest.purchasingTimeFrame(MeetingsAddRegistrantRequest.PurchasingTimeFrameEnum.fromValue(this.purchasingTimeFrame));
            if (this.roleInPurchaseProcess != null)
            meetingsAddRegistrantRequest.roleInPurchaseProcess(MeetingsAddRegistrantRequest.RoleInPurchaseProcessEnum.fromValue(this.roleInPurchaseProcess));
            if (this.language != null)
            meetingsAddRegistrantRequest.language(MeetingsAddRegistrantRequest.LanguageEnum.fromValue(this.language));
            meetingsAddRegistrantRequest.autoApprove(this.autoApprove);
            return meetingsAddRegistrantRequest;
        }

        /**
         * Execute addRegistrant request
         * @return MeetingsAddRegistrantResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting registration created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You are not the meeting host.  **Error Code:** &#x60;3043&#x60; &lt;br&gt; Meeting has reached maximum attendee capacity.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting info.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; Meeting host does not exist: {userId}   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsAddRegistrantResponse execute() throws ApiException {
            MeetingsAddRegistrantRequest meetingsAddRegistrantRequest = buildBodyParams();
            ApiResponse<MeetingsAddRegistrantResponse> localVarResp = addRegistrantWithHttpInfo(meetingId, occurrenceIds, meetingsAddRegistrantRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addRegistrant request with HTTP info returned
         * @return ApiResponse&lt;MeetingsAddRegistrantResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting registration created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You are not the meeting host.  **Error Code:** &#x60;3043&#x60; &lt;br&gt; Meeting has reached maximum attendee capacity.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting info.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; Meeting host does not exist: {userId}   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsAddRegistrantResponse> executeWithHttpInfo() throws ApiException {
            MeetingsAddRegistrantRequest meetingsAddRegistrantRequest = buildBodyParams();
            return addRegistrantWithHttpInfo(meetingId, occurrenceIds, meetingsAddRegistrantRequest);
        }

        /**
         * Execute addRegistrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting registration created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You are not the meeting host.  **Error Code:** &#x60;3043&#x60; &lt;br&gt; Meeting has reached maximum attendee capacity.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting info.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; Meeting host does not exist: {userId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsAddRegistrantResponse> _callback) throws ApiException {
            MeetingsAddRegistrantRequest meetingsAddRegistrantRequest = buildBodyParams();
            return addRegistrantAsync(meetingId, occurrenceIds, meetingsAddRegistrantRequest, _callback);
        }
    }

    /**
     * Add a meeting registrant
     * Create and submit a user&#39;s registration to a meeting. See [Customizing webinar registration](https://support.zoom.us/hc/en-us/articles/202835649-Customizing-webinar-registration) for details on how to set the requirements for these fields. Note that there is a maximum limit of 4,999 registrants per meeting and users will see an error if the meeting&#39;s capacity is reached.    **Prerequisites:**  * The host must be a **Licensed** user type.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return AddRegistrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting registration created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You are not the meeting host.  **Error Code:** &#x60;3043&#x60; &lt;br&gt; Meeting has reached maximum attendee capacity.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting info.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; Meeting host does not exist: {userId}   </td><td>  -  </td></tr>
     </table>
     */
    public AddRegistrantRequestBuilder addRegistrant(String firstName, String email, Long meetingId) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new AddRegistrantRequestBuilder(firstName, email, meetingId);
    }
    private okhttp3.Call batchRegistrantsCreateCall(String meetingId, MeetingsBatchRegistrantsCreateRequest meetingsBatchRegistrantsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsBatchRegistrantsCreateRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/batch_registrants"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchRegistrantsCreateValidateBeforeCall(String meetingId, MeetingsBatchRegistrantsCreateRequest meetingsBatchRegistrantsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling batchRegistrantsCreate(Async)");
        }

        return batchRegistrantsCreateCall(meetingId, meetingsBatchRegistrantsCreateRequest, _callback);

    }


    private ApiResponse<MeetingsBatchRegistrantsCreateResponse> batchRegistrantsCreateWithHttpInfo(String meetingId, MeetingsBatchRegistrantsCreateRequest meetingsBatchRegistrantsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = batchRegistrantsCreateValidateBeforeCall(meetingId, meetingsBatchRegistrantsCreateRequest, null);
        Type localVarReturnType = new TypeToken<MeetingsBatchRegistrantsCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batchRegistrantsCreateAsync(String meetingId, MeetingsBatchRegistrantsCreateRequest meetingsBatchRegistrantsCreateRequest, final ApiCallback<MeetingsBatchRegistrantsCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchRegistrantsCreateValidateBeforeCall(meetingId, meetingsBatchRegistrantsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<MeetingsBatchRegistrantsCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BatchRegistrantsCreateRequestBuilder {
        private final String meetingId;
        private Boolean autoApprove;
        private Boolean registrantsConfirmationEmail;
        private List<MeetingsBatchRegistrantsCreateRequestRegistrantsInner> registrants;

        private BatchRegistrantsCreateRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set autoApprove
         * @param autoApprove If a meeting was scheduled with approval_type &#x60;1&#x60; (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to &#x60;true&#x60;.   You **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type &#x60;0&#x60; (automatic approval). (optional)
         * @return BatchRegistrantsCreateRequestBuilder
         */
        public BatchRegistrantsCreateRequestBuilder autoApprove(Boolean autoApprove) {
            this.autoApprove = autoApprove;
            return this;
        }
        
        /**
         * Set registrantsConfirmationEmail
         * @param registrantsConfirmationEmail Send confirmation Email to Registrants (optional)
         * @return BatchRegistrantsCreateRequestBuilder
         */
        public BatchRegistrantsCreateRequestBuilder registrantsConfirmationEmail(Boolean registrantsConfirmationEmail) {
            this.registrantsConfirmationEmail = registrantsConfirmationEmail;
            return this;
        }
        
        /**
         * Set registrants
         * @param registrants  (optional)
         * @return BatchRegistrantsCreateRequestBuilder
         */
        public BatchRegistrantsCreateRequestBuilder registrants(List<MeetingsBatchRegistrantsCreateRequestRegistrantsInner> registrants) {
            this.registrants = registrants;
            return this;
        }
        
        /**
         * Build call for batchRegistrantsCreate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      Registrants added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3038&#x60; &lt;br&gt; Meeting is over, you can not register now. If you have any questions, please contact the Meeting host.&lt;br&gt;&lt;br&gt;  **Error Code:** &#x60;303&#x60; &lt;br&gt; This API can only be used for scheduled meeting(meeting type: 2). Batch registration is not supported for other meeting types.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.&lt;br&gt;  **Error Code:** &#x60;3043&#x60; &lt;br&gt; Meeting has reached maximum attendee capacity.&lt;br&gt;  **Error Code:** &#x60;404&#x60; &lt;br&gt; Registration has not been enabled for this meeting: {meetingId}.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsBatchRegistrantsCreateRequest meetingsBatchRegistrantsCreateRequest = buildBodyParams();
            return batchRegistrantsCreateCall(meetingId, meetingsBatchRegistrantsCreateRequest, _callback);
        }

        private MeetingsBatchRegistrantsCreateRequest buildBodyParams() {
            MeetingsBatchRegistrantsCreateRequest meetingsBatchRegistrantsCreateRequest = new MeetingsBatchRegistrantsCreateRequest();
            meetingsBatchRegistrantsCreateRequest.autoApprove(this.autoApprove);
            meetingsBatchRegistrantsCreateRequest.registrantsConfirmationEmail(this.registrantsConfirmationEmail);
            meetingsBatchRegistrantsCreateRequest.registrants(this.registrants);
            return meetingsBatchRegistrantsCreateRequest;
        }

        /**
         * Execute batchRegistrantsCreate request
         * @return MeetingsBatchRegistrantsCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      Registrants added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3038&#x60; &lt;br&gt; Meeting is over, you can not register now. If you have any questions, please contact the Meeting host.&lt;br&gt;&lt;br&gt;  **Error Code:** &#x60;303&#x60; &lt;br&gt; This API can only be used for scheduled meeting(meeting type: 2). Batch registration is not supported for other meeting types.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.&lt;br&gt;  **Error Code:** &#x60;3043&#x60; &lt;br&gt; Meeting has reached maximum attendee capacity.&lt;br&gt;  **Error Code:** &#x60;404&#x60; &lt;br&gt; Registration has not been enabled for this meeting: {meetingId}.   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsBatchRegistrantsCreateResponse execute() throws ApiException {
            MeetingsBatchRegistrantsCreateRequest meetingsBatchRegistrantsCreateRequest = buildBodyParams();
            ApiResponse<MeetingsBatchRegistrantsCreateResponse> localVarResp = batchRegistrantsCreateWithHttpInfo(meetingId, meetingsBatchRegistrantsCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute batchRegistrantsCreate request with HTTP info returned
         * @return ApiResponse&lt;MeetingsBatchRegistrantsCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      Registrants added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3038&#x60; &lt;br&gt; Meeting is over, you can not register now. If you have any questions, please contact the Meeting host.&lt;br&gt;&lt;br&gt;  **Error Code:** &#x60;303&#x60; &lt;br&gt; This API can only be used for scheduled meeting(meeting type: 2). Batch registration is not supported for other meeting types.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.&lt;br&gt;  **Error Code:** &#x60;3043&#x60; &lt;br&gt; Meeting has reached maximum attendee capacity.&lt;br&gt;  **Error Code:** &#x60;404&#x60; &lt;br&gt; Registration has not been enabled for this meeting: {meetingId}.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsBatchRegistrantsCreateResponse> executeWithHttpInfo() throws ApiException {
            MeetingsBatchRegistrantsCreateRequest meetingsBatchRegistrantsCreateRequest = buildBodyParams();
            return batchRegistrantsCreateWithHttpInfo(meetingId, meetingsBatchRegistrantsCreateRequest);
        }

        /**
         * Execute batchRegistrantsCreate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      Registrants added. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3038&#x60; &lt;br&gt; Meeting is over, you can not register now. If you have any questions, please contact the Meeting host.&lt;br&gt;&lt;br&gt;  **Error Code:** &#x60;303&#x60; &lt;br&gt; This API can only be used for scheduled meeting(meeting type: 2). Batch registration is not supported for other meeting types.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.&lt;br&gt;  **Error Code:** &#x60;3043&#x60; &lt;br&gt; Meeting has reached maximum attendee capacity.&lt;br&gt;  **Error Code:** &#x60;404&#x60; &lt;br&gt; Registration has not been enabled for this meeting: {meetingId}.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsBatchRegistrantsCreateResponse> _callback) throws ApiException {
            MeetingsBatchRegistrantsCreateRequest meetingsBatchRegistrantsCreateRequest = buildBodyParams();
            return batchRegistrantsCreateAsync(meetingId, meetingsBatchRegistrantsCreateRequest, _callback);
        }
    }

    /**
     * Perform batch registration
     * Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).       **Prerequisites:**     * The meeting host must be a Licensed user. * The meeting must require registration and should be of type &#x60;2&#x60;, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.            **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Heavy&#x60;
     * @param meetingId Unique identifier of the meeting (Meeting Number). (required)
     * @return BatchRegistrantsCreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      Registrants added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3038&#x60; &lt;br&gt; Meeting is over, you can not register now. If you have any questions, please contact the Meeting host.&lt;br&gt;&lt;br&gt;  **Error Code:** &#x60;303&#x60; &lt;br&gt; This API can only be used for scheduled meeting(meeting type: 2). Batch registration is not supported for other meeting types.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.&lt;br&gt;  **Error Code:** &#x60;3043&#x60; &lt;br&gt; Meeting has reached maximum attendee capacity.&lt;br&gt;  **Error Code:** &#x60;404&#x60; &lt;br&gt; Registration has not been enabled for this meeting: {meetingId}.   </td><td>  -  </td></tr>
     </table>
     */
    public BatchRegistrantsCreateRequestBuilder batchRegistrantsCreate(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new BatchRegistrantsCreateRequestBuilder(meetingId);
    }
    private okhttp3.Call controlInMeetingFeaturesCall(String meetingId, MeetingsControlInMeetingFeaturesRequest meetingsControlInMeetingFeaturesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsControlInMeetingFeaturesRequest;

        // create path and map variables
        String localVarPath = "/live_meetings/{meetingId}/events"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controlInMeetingFeaturesValidateBeforeCall(String meetingId, MeetingsControlInMeetingFeaturesRequest meetingsControlInMeetingFeaturesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling controlInMeetingFeatures(Async)");
        }

        return controlInMeetingFeaturesCall(meetingId, meetingsControlInMeetingFeaturesRequest, _callback);

    }


    private ApiResponse<Void> controlInMeetingFeaturesWithHttpInfo(String meetingId, MeetingsControlInMeetingFeaturesRequest meetingsControlInMeetingFeaturesRequest) throws ApiException {
        okhttp3.Call localVarCall = controlInMeetingFeaturesValidateBeforeCall(meetingId, meetingsControlInMeetingFeaturesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call controlInMeetingFeaturesAsync(String meetingId, MeetingsControlInMeetingFeaturesRequest meetingsControlInMeetingFeaturesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = controlInMeetingFeaturesValidateBeforeCall(meetingId, meetingsControlInMeetingFeaturesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ControlInMeetingFeaturesRequestBuilder {
        private final String meetingId;
        private String method;
        private MeetingsControlInMeetingFeaturesRequestParams params;

        private ControlInMeetingFeaturesRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set method
         * @param method The in-meeting method to control:  * &#x60;recording.start&#x60; &amp;mdash; Start the recording.  * &#x60;recording.stop&#x60; &amp;mdash; Stop the recording.  * &#x60;recording.pause&#x60; &amp;mdash; Pause the recording.  * &#x60;recording.resume&#x60; &amp;mdash; Resume a paused recording.  * &#x60;participant.invite&#x60; &amp;mdash; Invite a participant to the meeting.  * &#x60;participant.invite.callout&#x60; &amp;mdash; Invite a participant to the meeting through [call out (phone)](https://support.zoom.us/hc/en-us/articles/4404535651085-Inviting-others-by-phone-call-out).  * &#x60;participant.invite.room_system_callout&#x60; &amp;mdash; Invite a participant to the meeting through [call out (room system)]. (optional)
         * @return ControlInMeetingFeaturesRequestBuilder
         */
        public ControlInMeetingFeaturesRequestBuilder method(String method) {
            this.method = method;
            return this;
        }
        
        /**
         * Set params
         * @param params  (optional)
         * @return ControlInMeetingFeaturesRequestBuilder
         */
        public ControlInMeetingFeaturesRequestBuilder params(MeetingsControlInMeetingFeaturesRequestParams params) {
            this.params = params;
            return this;
        }
        
        /**
         * Build call for controlInMeetingFeatures
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> **HTTP Status:** &#x60;202&#x60; **Accepted** Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Meeting id does not exist.&lt;br&gt; * Invalid meeting id.&lt;br&gt; * Meeting does not exist.&lt;br&gt; * No permission.&lt;br&gt; * This API is not available for this account, please contact Zoom support. &lt;br&gt; **Error Code:** &#x60;3309&#x60; &lt;br&gt;  Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} is not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  undefined     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsControlInMeetingFeaturesRequest meetingsControlInMeetingFeaturesRequest = buildBodyParams();
            return controlInMeetingFeaturesCall(meetingId, meetingsControlInMeetingFeaturesRequest, _callback);
        }

        private MeetingsControlInMeetingFeaturesRequest buildBodyParams() {
            MeetingsControlInMeetingFeaturesRequest meetingsControlInMeetingFeaturesRequest = new MeetingsControlInMeetingFeaturesRequest();
            meetingsControlInMeetingFeaturesRequest.method(this.method);
            meetingsControlInMeetingFeaturesRequest.params(this.params);
            return meetingsControlInMeetingFeaturesRequest;
        }

        /**
         * Execute controlInMeetingFeatures request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> **HTTP Status:** &#x60;202&#x60; **Accepted** Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Meeting id does not exist.&lt;br&gt; * Invalid meeting id.&lt;br&gt; * Meeting does not exist.&lt;br&gt; * No permission.&lt;br&gt; * This API is not available for this account, please contact Zoom support. &lt;br&gt; **Error Code:** &#x60;3309&#x60; &lt;br&gt;  Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} is not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  undefined     </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MeetingsControlInMeetingFeaturesRequest meetingsControlInMeetingFeaturesRequest = buildBodyParams();
            controlInMeetingFeaturesWithHttpInfo(meetingId, meetingsControlInMeetingFeaturesRequest);
        }

        /**
         * Execute controlInMeetingFeatures request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> **HTTP Status:** &#x60;202&#x60; **Accepted** Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Meeting id does not exist.&lt;br&gt; * Invalid meeting id.&lt;br&gt; * Meeting does not exist.&lt;br&gt; * No permission.&lt;br&gt; * This API is not available for this account, please contact Zoom support. &lt;br&gt; **Error Code:** &#x60;3309&#x60; &lt;br&gt;  Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} is not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  undefined     </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MeetingsControlInMeetingFeaturesRequest meetingsControlInMeetingFeaturesRequest = buildBodyParams();
            return controlInMeetingFeaturesWithHttpInfo(meetingId, meetingsControlInMeetingFeaturesRequest);
        }

        /**
         * Execute controlInMeetingFeatures request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> **HTTP Status:** &#x60;202&#x60; **Accepted** Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Meeting id does not exist.&lt;br&gt; * Invalid meeting id.&lt;br&gt; * Meeting does not exist.&lt;br&gt; * No permission.&lt;br&gt; * This API is not available for this account, please contact Zoom support. &lt;br&gt; **Error Code:** &#x60;3309&#x60; &lt;br&gt;  Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} is not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  undefined     </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MeetingsControlInMeetingFeaturesRequest meetingsControlInMeetingFeaturesRequest = buildBodyParams();
            return controlInMeetingFeaturesAsync(meetingId, meetingsControlInMeetingFeaturesRequest, _callback);
        }
    }

    /**
     * Use in-meeting controls
     * Control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants.   **Note:** This API&#39;s recording control only works for cloud recordings. It does **not** work for local recordings.   **Prerequisites:** * The meeting **must** be a live meeting **except** inviting participants to the meeting through [call out (phone)/(room system)].  * Recording control: [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account.  * The user calling this API must be the host or an alternative meeting host.     **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;,&#x60;meeting:master&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param meetingId The live meeting&#39;s ID. (required)
     * @return ControlInMeetingFeaturesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> **HTTP Status:** &#x60;202&#x60; **Accepted** Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  * Meeting id does not exist.&lt;br&gt; * Invalid meeting id.&lt;br&gt; * Meeting does not exist.&lt;br&gt; * No permission.&lt;br&gt; * This API is not available for this account, please contact Zoom support. &lt;br&gt; **Error Code:** &#x60;3309&#x60; &lt;br&gt;  Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} is not found or has expired. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  undefined     </td><td>  -  </td></tr>
     </table>
     */
    public ControlInMeetingFeaturesRequestBuilder controlInMeetingFeatures(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new ControlInMeetingFeaturesRequestBuilder(meetingId);
    }
    private okhttp3.Call createBatchPollsCall(String meetingId, MeetingsCreateBatchPollsRequest meetingsCreateBatchPollsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsCreateBatchPollsRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/batch_polls"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBatchPollsValidateBeforeCall(String meetingId, MeetingsCreateBatchPollsRequest meetingsCreateBatchPollsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling createBatchPolls(Async)");
        }

        return createBatchPollsCall(meetingId, meetingsCreateBatchPollsRequest, _callback);

    }


    private ApiResponse<MeetingsCreateBatchPollsResponse> createBatchPollsWithHttpInfo(String meetingId, MeetingsCreateBatchPollsRequest meetingsCreateBatchPollsRequest) throws ApiException {
        okhttp3.Call localVarCall = createBatchPollsValidateBeforeCall(meetingId, meetingsCreateBatchPollsRequest, null);
        Type localVarReturnType = new TypeToken<MeetingsCreateBatchPollsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBatchPollsAsync(String meetingId, MeetingsCreateBatchPollsRequest meetingsCreateBatchPollsRequest, final ApiCallback<MeetingsCreateBatchPollsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBatchPollsValidateBeforeCall(meetingId, meetingsCreateBatchPollsRequest, _callback);
        Type localVarReturnType = new TypeToken<MeetingsCreateBatchPollsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBatchPollsRequestBuilder {
        private final String meetingId;
        private List<MeetingsCreateBatchPollsRequestPollsInner> polls;

        private CreateBatchPollsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set polls
         * @param polls Information about the meeting&#39;s polls. (optional)
         * @return CreateBatchPollsRequestBuilder
         */
        public CreateBatchPollsRequestBuilder polls(List<MeetingsCreateBatchPollsRequestPollsInner> polls) {
            this.polls = polls;
            return this;
        }
        
        /**
         * Build call for createBatchPolls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid Meeting ID.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting id does not exist.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.&lt;br&gt;  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * You can only add a maximum of 50 polls.  * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsCreateBatchPollsRequest meetingsCreateBatchPollsRequest = buildBodyParams();
            return createBatchPollsCall(meetingId, meetingsCreateBatchPollsRequest, _callback);
        }

        private MeetingsCreateBatchPollsRequest buildBodyParams() {
            MeetingsCreateBatchPollsRequest meetingsCreateBatchPollsRequest = new MeetingsCreateBatchPollsRequest();
            meetingsCreateBatchPollsRequest.polls(this.polls);
            return meetingsCreateBatchPollsRequest;
        }

        /**
         * Execute createBatchPolls request
         * @return MeetingsCreateBatchPollsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid Meeting ID.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting id does not exist.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.&lt;br&gt;  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * You can only add a maximum of 50 polls.  * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsCreateBatchPollsResponse execute() throws ApiException {
            MeetingsCreateBatchPollsRequest meetingsCreateBatchPollsRequest = buildBodyParams();
            ApiResponse<MeetingsCreateBatchPollsResponse> localVarResp = createBatchPollsWithHttpInfo(meetingId, meetingsCreateBatchPollsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBatchPolls request with HTTP info returned
         * @return ApiResponse&lt;MeetingsCreateBatchPollsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid Meeting ID.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting id does not exist.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.&lt;br&gt;  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * You can only add a maximum of 50 polls.  * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsCreateBatchPollsResponse> executeWithHttpInfo() throws ApiException {
            MeetingsCreateBatchPollsRequest meetingsCreateBatchPollsRequest = buildBodyParams();
            return createBatchPollsWithHttpInfo(meetingId, meetingsCreateBatchPollsRequest);
        }

        /**
         * Execute createBatchPolls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid Meeting ID.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting id does not exist.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.&lt;br&gt;  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * You can only add a maximum of 50 polls.  * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsCreateBatchPollsResponse> _callback) throws ApiException {
            MeetingsCreateBatchPollsRequest meetingsCreateBatchPollsRequest = buildBodyParams();
            return createBatchPollsAsync(meetingId, meetingsCreateBatchPollsRequest, _callback);
        }
    }

    /**
     * Perform batch poll creation
     * Polls allow the meeting host to survey attendees. Create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host&#39;s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId  (required)
     * @return CreateBatchPollsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting Poll Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid Meeting ID.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting id does not exist.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.&lt;br&gt;  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * You can only add a maximum of 50 polls.  * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
     </table>
     */
    public CreateBatchPollsRequestBuilder createBatchPolls(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new CreateBatchPollsRequestBuilder(meetingId);
    }
    private okhttp3.Call createInviteLinksCall(Long meetingId, MeetingsCreateInviteLinksRequest meetingsCreateInviteLinksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsCreateInviteLinksRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/invite_links"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInviteLinksValidateBeforeCall(Long meetingId, MeetingsCreateInviteLinksRequest meetingsCreateInviteLinksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling createInviteLinks(Async)");
        }

        return createInviteLinksCall(meetingId, meetingsCreateInviteLinksRequest, _callback);

    }


    private ApiResponse<MeetingsCreateInviteLinksResponse> createInviteLinksWithHttpInfo(Long meetingId, MeetingsCreateInviteLinksRequest meetingsCreateInviteLinksRequest) throws ApiException {
        okhttp3.Call localVarCall = createInviteLinksValidateBeforeCall(meetingId, meetingsCreateInviteLinksRequest, null);
        Type localVarReturnType = new TypeToken<MeetingsCreateInviteLinksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInviteLinksAsync(Long meetingId, MeetingsCreateInviteLinksRequest meetingsCreateInviteLinksRequest, final ApiCallback<MeetingsCreateInviteLinksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInviteLinksValidateBeforeCall(meetingId, meetingsCreateInviteLinksRequest, _callback);
        Type localVarReturnType = new TypeToken<MeetingsCreateInviteLinksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInviteLinksRequestBuilder {
        private final Long meetingId;
        private List<MeetingsCreateInviteLinksRequestAttendeesInner> attendees;
        private Long ttl;

        private CreateInviteLinksRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set attendees
         * @param attendees The attendees list. (optional)
         * @return CreateInviteLinksRequestBuilder
         */
        public CreateInviteLinksRequestBuilder attendees(List<MeetingsCreateInviteLinksRequestAttendeesInner> attendees) {
            this.attendees = attendees;
            return this;
        }
        
        /**
         * Set ttl
         * @param ttl The invite link&#39;s expiration time, in seconds.   This value defaults to &#x60;7200&#x60;. (optional, default to 7200)
         * @return CreateInviteLinksRequestBuilder
         */
        public CreateInviteLinksRequestBuilder ttl(Long ttl) {
            this.ttl = ttl;
            return this;
        }
        
        /**
         * Build call for createInviteLinks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting invitation links created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; * Meeting ID does not exist.  * Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar information.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsCreateInviteLinksRequest meetingsCreateInviteLinksRequest = buildBodyParams();
            return createInviteLinksCall(meetingId, meetingsCreateInviteLinksRequest, _callback);
        }

        private MeetingsCreateInviteLinksRequest buildBodyParams() {
            MeetingsCreateInviteLinksRequest meetingsCreateInviteLinksRequest = new MeetingsCreateInviteLinksRequest();
            meetingsCreateInviteLinksRequest.attendees(this.attendees);
            meetingsCreateInviteLinksRequest.ttl(this.ttl);
            return meetingsCreateInviteLinksRequest;
        }

        /**
         * Execute createInviteLinks request
         * @return MeetingsCreateInviteLinksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting invitation links created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; * Meeting ID does not exist.  * Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar information.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsCreateInviteLinksResponse execute() throws ApiException {
            MeetingsCreateInviteLinksRequest meetingsCreateInviteLinksRequest = buildBodyParams();
            ApiResponse<MeetingsCreateInviteLinksResponse> localVarResp = createInviteLinksWithHttpInfo(meetingId, meetingsCreateInviteLinksRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInviteLinks request with HTTP info returned
         * @return ApiResponse&lt;MeetingsCreateInviteLinksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting invitation links created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; * Meeting ID does not exist.  * Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar information.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsCreateInviteLinksResponse> executeWithHttpInfo() throws ApiException {
            MeetingsCreateInviteLinksRequest meetingsCreateInviteLinksRequest = buildBodyParams();
            return createInviteLinksWithHttpInfo(meetingId, meetingsCreateInviteLinksRequest);
        }

        /**
         * Execute createInviteLinks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting invitation links created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; * Meeting ID does not exist.  * Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar information.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsCreateInviteLinksResponse> _callback) throws ApiException {
            MeetingsCreateInviteLinksRequest meetingsCreateInviteLinksRequest = buildBodyParams();
            return createInviteLinksAsync(meetingId, meetingsCreateInviteLinksRequest, _callback);
        }
    }

    /**
     * Create meeting&#39;s invite links
     * Create a batch of invitation links for a meeting.    **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return CreateInviteLinksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting invitation links created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; * Meeting ID does not exist.  * Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar information.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
     </table>
     */
    public CreateInviteLinksRequestBuilder createInviteLinks(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new CreateInviteLinksRequestBuilder(meetingId);
    }
    private okhttp3.Call createMeetingCall(String userId, MeetingsCreateMeetingRequest meetingsCreateMeetingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsCreateMeetingRequest;

        // create path and map variables
        String localVarPath = "/users/{userId}/meetings"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMeetingValidateBeforeCall(String userId, MeetingsCreateMeetingRequest meetingsCreateMeetingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createMeeting(Async)");
        }

        return createMeetingCall(userId, meetingsCreateMeetingRequest, _callback);

    }


    private ApiResponse<MeetingsCreateMeetingResponse> createMeetingWithHttpInfo(String userId, MeetingsCreateMeetingRequest meetingsCreateMeetingRequest) throws ApiException {
        okhttp3.Call localVarCall = createMeetingValidateBeforeCall(userId, meetingsCreateMeetingRequest, null);
        Type localVarReturnType = new TypeToken<MeetingsCreateMeetingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMeetingAsync(String userId, MeetingsCreateMeetingRequest meetingsCreateMeetingRequest, final ApiCallback<MeetingsCreateMeetingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMeetingValidateBeforeCall(userId, meetingsCreateMeetingRequest, _callback);
        Type localVarReturnType = new TypeToken<MeetingsCreateMeetingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMeetingRequestBuilder {
        private final String userId;
        private String agenda;
        private Boolean defaultPassword;
        private Integer duration;
        private String password;
        private Boolean preSchedule;
        private MeetingsCreateMeetingRequestRecurrence recurrence;
        private String scheduleFor;
        private MeetingsCreateMeetingRequestSettings settings;
        private OffsetDateTime startTime;
        private String templateId;
        private String timezone;
        private String topic;
        private List<MeetingsCreateMeetingRequestTrackingFieldsInner> trackingFields;
        private Integer type;

        private CreateMeetingRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set agenda
         * @param agenda The meeting&#39;s agenda. This value has a maximum length of 2,000 characters. (optional)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder agenda(String agenda) {
            this.agenda = agenda;
            return this;
        }
        
        /**
         * Set defaultPassword
         * @param defaultPassword Whether to generate a default passcode using the user&#39;s settings. This value defaults to &#x60;false&#x60;.   If this value is &#x60;true&#x60; and the user has the PMI setting enabled with a passcode, then the user&#39;s meetings will use the PMI passcode. It will **not** use a default passcode. (optional, default to false)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder defaultPassword(Boolean defaultPassword) {
            this.defaultPassword = defaultPassword;
            return this;
        }
        
        /**
         * Set duration
         * @param duration The meeting&#39;s scheduled duration, in minutes. This field is only used for scheduled meetings (&#x60;2&#x60;). (optional)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder duration(Integer duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set password
         * @param password The passcode required to join the meeting. By default, a passcode can **only** have a maximum length of 10 characters and only contain alphanumeric characters and the &#x60;@&#x60;, &#x60;-&#x60;, &#x60;_&#x60;, and &#x60;*&#x60; characters.  * If the account owner or administrator has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode **must** meet those requirements.  * If passcode requirements are enabled, use the [**Get user settings**](https://developers.zoom.us/docs/api-reference/zoom-api/methods#operation/userSettings) API or the [**Get account settings**](https://developers.zoom.us/docs/api-reference/zoom-api/ma#operation/accountSettings) API to get the requirements. (optional)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set preSchedule
         * @param preSchedule Whether to create a prescheduled meeting via the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting &#x60;type&#x60; value of &#x60;2&#x60; (scheduled meetings) and &#x60;3&#x60; (recurring meetings with no fixed time).  * &#x60;true&#x60; - Create a prescheduled meeting.  * &#x60;false&#x60; - Create a regular meeting. (optional, default to false)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder preSchedule(Boolean preSchedule) {
            this.preSchedule = preSchedule;
            return this;
        }
        
        /**
         * Set recurrence
         * @param recurrence  (optional)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder recurrence(MeetingsCreateMeetingRequestRecurrence recurrence) {
            this.recurrence = recurrence;
            return this;
        }
        
        /**
         * Set scheduleFor
         * @param scheduleFor The email address or user ID of the user to schedule a meeting for. (optional)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder scheduleFor(String scheduleFor) {
            this.scheduleFor = scheduleFor;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder settings(MeetingsCreateMeetingRequestSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime The meeting&#39;s start time. This field is only used for scheduled or recurring meetings with a fixed time. This supports local time and GMT formats.  * To set a meeting&#39;s start time in GMT, use the &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; date-time format. For example, &#x60;2020-03-31T12:02:00Z&#x60;.  * To set a meeting&#39;s start time using a specific timezone, use the &#x60;yyyy-MM-ddTHH:mm:ss&#x60; date-time format and specify the [timezone ID](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones) in the &#x60;timezone&#x60; field. If you do not specify a timezone, the &#x60;timezone&#x60; value defaults to your Zoom account&#39;s timezone. You can also use &#x60;UTC&#x60; for the &#x60;timezone&#x60; value. **Note:** If no &#x60;start_time&#x60; is set for a scheduled meeting, the &#x60;start_time&#x60; is set at the current time and the meeting type changes to an instant meeting, which expires after 30 days. (optional)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set templateId
         * @param templateId The account admin meeting template ID used to schedule a meeting using a [meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates). For a list of account admin-provided meeting templates, use the [**List meeting templates**](https://developers.zoom.us/docs/api-reference/zoom-api/methods#operation/listMeetingTemplates) API.  * At this time, this field **only** accepts account admin meeting template IDs.  * To enable the account admin meeting templates feature, [contact Zoom support](https://support.zoom.us/hc/en-us). (optional)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder templateId(String templateId) {
            this.templateId = templateId;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone The timezone to assign to the &#x60;start_time&#x60; value. This field is only used for scheduled or recurring meetings with a fixed time.  For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones). (optional)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set topic
         * @param topic The meeting&#39;s topic. (optional)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder topic(String topic) {
            this.topic = topic;
            return this;
        }
        
        /**
         * Set trackingFields
         * @param trackingFields Information about the meeting&#39;s tracking fields. (optional)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder trackingFields(List<MeetingsCreateMeetingRequestTrackingFieldsInner> trackingFields) {
            this.trackingFields = trackingFields;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of meeting. * &#x60;1&#x60; - An instant meeting.  * &#x60;2&#x60; - A scheduled meeting.  * &#x60;3&#x60; - A recurring meeting with no fixed time.  * &#x60;8&#x60; - A recurring meeting with fixed time. (optional, default to 2)
         * @return CreateMeetingRequestBuilder
         */
        public CreateMeetingRequestBuilder type(Integer type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for createMeeting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Meeting created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Instant meetings do not support the &#x60;schedule_for&#x60; parameter, and you can&#39;t schedule an instant meeting for another user. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Users in &#39;{userId}&#39; have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId} &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered in the &#x60;schedule_for&#x60; field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid &#x60;enforce_login_domains&#x60;. Separate multiple domains with semicolons. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests      </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsCreateMeetingRequest meetingsCreateMeetingRequest = buildBodyParams();
            return createMeetingCall(userId, meetingsCreateMeetingRequest, _callback);
        }

        private MeetingsCreateMeetingRequest buildBodyParams() {
            MeetingsCreateMeetingRequest meetingsCreateMeetingRequest = new MeetingsCreateMeetingRequest();
            meetingsCreateMeetingRequest.agenda(this.agenda);
            meetingsCreateMeetingRequest.defaultPassword(this.defaultPassword);
            meetingsCreateMeetingRequest.duration(this.duration);
            meetingsCreateMeetingRequest.password(this.password);
            meetingsCreateMeetingRequest.preSchedule(this.preSchedule);
            meetingsCreateMeetingRequest.recurrence(this.recurrence);
            meetingsCreateMeetingRequest.scheduleFor(this.scheduleFor);
            meetingsCreateMeetingRequest.settings(this.settings);
            meetingsCreateMeetingRequest.startTime(this.startTime);
            meetingsCreateMeetingRequest.templateId(this.templateId);
            meetingsCreateMeetingRequest.timezone(this.timezone);
            meetingsCreateMeetingRequest.topic(this.topic);
            meetingsCreateMeetingRequest.trackingFields(this.trackingFields);
            if (this.type != null)
            meetingsCreateMeetingRequest.type(MeetingsCreateMeetingRequest.TypeEnum.fromValue(this.type));
            return meetingsCreateMeetingRequest;
        }

        /**
         * Execute createMeeting request
         * @return MeetingsCreateMeetingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Meeting created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Instant meetings do not support the &#x60;schedule_for&#x60; parameter, and you can&#39;t schedule an instant meeting for another user. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Users in &#39;{userId}&#39; have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId} &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered in the &#x60;schedule_for&#x60; field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid &#x60;enforce_login_domains&#x60;. Separate multiple domains with semicolons. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests      </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsCreateMeetingResponse execute() throws ApiException {
            MeetingsCreateMeetingRequest meetingsCreateMeetingRequest = buildBodyParams();
            ApiResponse<MeetingsCreateMeetingResponse> localVarResp = createMeetingWithHttpInfo(userId, meetingsCreateMeetingRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMeeting request with HTTP info returned
         * @return ApiResponse&lt;MeetingsCreateMeetingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Meeting created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Instant meetings do not support the &#x60;schedule_for&#x60; parameter, and you can&#39;t schedule an instant meeting for another user. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Users in &#39;{userId}&#39; have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId} &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered in the &#x60;schedule_for&#x60; field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid &#x60;enforce_login_domains&#x60;. Separate multiple domains with semicolons. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests      </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsCreateMeetingResponse> executeWithHttpInfo() throws ApiException {
            MeetingsCreateMeetingRequest meetingsCreateMeetingRequest = buildBodyParams();
            return createMeetingWithHttpInfo(userId, meetingsCreateMeetingRequest);
        }

        /**
         * Execute createMeeting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Meeting created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Instant meetings do not support the &#x60;schedule_for&#x60; parameter, and you can&#39;t schedule an instant meeting for another user. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Users in &#39;{userId}&#39; have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId} &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered in the &#x60;schedule_for&#x60; field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid &#x60;enforce_login_domains&#x60;. Separate multiple domains with semicolons. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests      </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsCreateMeetingResponse> _callback) throws ApiException {
            MeetingsCreateMeetingRequest meetingsCreateMeetingRequest = buildBodyParams();
            return createMeetingAsync(userId, meetingsCreateMeetingRequest, _callback);
        }
    }

    /**
     * Create a meeting
     * [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.  * A meeting&#39;s &#x60;start_url&#x60; value is the URL a host or an alternative host can use to start a meeting. The expiration time for the &#x60;start_url&#x60; value is **two hours** for all regular users. * For &#x60;custCreate&#x60; meeting hosts (users created with the &#x60;custCreate&#x60; parameter via the [**Create users**](https://developers.zoom.us/docs/api/rest/reference/zoom-api/methods/#operation/userCreate) API), the expiration time of the &#x60;start_url&#x60; parameter is **90 days** from the generation of the &#x60;start_url&#x60;.  **Note:**   For security reasons, the recommended way to programmatically get the updated &#x60;start_url&#x60; value after expiry is to call the [**Get a meeting**](/api-reference/zoom-api/methods#operation/meeting) API. Refer to the &#x60;start_url&#x60; value in the response.    **100 requests per day**. The rate limit is applied against the &#x60;userId&#x60; of the **meeting host** used to make the request.  **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param userId The user&#39;s user ID or email address. For user-level apps, pass the &#x60;me&#x60; value. (required)
     * @return CreateMeetingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Meeting created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Instant meetings do not support the &#x60;schedule_for&#x60; parameter, and you can&#39;t schedule an instant meeting for another user. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Users in &#39;{userId}&#39; have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId} &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered in the &#x60;schedule_for&#x60; field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid &#x60;enforce_login_domains&#x60;. Separate multiple domains with semicolons. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests      </td><td>  -  </td></tr>
     </table>
     */
    public CreateMeetingRequestBuilder createMeeting(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new CreateMeetingRequestBuilder(userId);
    }
    private okhttp3.Call createPollCall(Long meetingId, MeetingsCreatePollRequest meetingsCreatePollRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsCreatePollRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/polls"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPollValidateBeforeCall(Long meetingId, MeetingsCreatePollRequest meetingsCreatePollRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling createPoll(Async)");
        }

        return createPollCall(meetingId, meetingsCreatePollRequest, _callback);

    }


    private ApiResponse<MeetingsCreatePollResponse> createPollWithHttpInfo(Long meetingId, MeetingsCreatePollRequest meetingsCreatePollRequest) throws ApiException {
        okhttp3.Call localVarCall = createPollValidateBeforeCall(meetingId, meetingsCreatePollRequest, null);
        Type localVarReturnType = new TypeToken<MeetingsCreatePollResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPollAsync(Long meetingId, MeetingsCreatePollRequest meetingsCreatePollRequest, final ApiCallback<MeetingsCreatePollResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPollValidateBeforeCall(meetingId, meetingsCreatePollRequest, _callback);
        Type localVarReturnType = new TypeToken<MeetingsCreatePollResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePollRequestBuilder {
        private final Long meetingId;
        private String title;
        private Boolean anonymous;
        private Integer pollType;
        private List<MeetingsCreatePollRequestQuestionsInner> questions;

        private CreatePollRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set title
         * @param title The poll&#39;s title, up to 64 characters. (optional)
         * @return CreatePollRequestBuilder
         */
        public CreatePollRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set anonymous
         * @param anonymous Allow meeting participants to answer poll questions anonymously.   This value defaults to &#x60;false&#x60;. (optional, default to false)
         * @return CreatePollRequestBuilder
         */
        public CreatePollRequestBuilder anonymous(Boolean anonymous) {
            this.anonymous = anonymous;
            return this;
        }
        
        /**
         * Set pollType
         * @param pollType The type of poll:  * &#x60;1&#x60; &amp;mdash; Poll.  * &#x60;2&#x60; &amp;mdash; Advanced Poll. This feature must be enabled in your Zoom account.  * &#x60;3&#x60; &amp;mdash; Quiz. This feature must be enabled in your Zoom account.    This value defaults to &#x60;1&#x60;. (optional)
         * @return CreatePollRequestBuilder
         */
        public CreatePollRequestBuilder pollType(Integer pollType) {
            this.pollType = pollType;
            return this;
        }
        
        /**
         * Set questions
         * @param questions Information about the poll&#39;s questions. (optional)
         * @return CreatePollRequestBuilder
         */
        public CreatePollRequestBuilder questions(List<MeetingsCreatePollRequestQuestionsInner> questions) {
            this.questions = questions;
            return this;
        }
        
        /**
         * Build call for createPoll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting not found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsCreatePollRequest meetingsCreatePollRequest = buildBodyParams();
            return createPollCall(meetingId, meetingsCreatePollRequest, _callback);
        }

        private MeetingsCreatePollRequest buildBodyParams() {
            MeetingsCreatePollRequest meetingsCreatePollRequest = new MeetingsCreatePollRequest();
            meetingsCreatePollRequest.title(this.title);
            meetingsCreatePollRequest.anonymous(this.anonymous);
            if (this.pollType != null)
            meetingsCreatePollRequest.pollType(MeetingsCreatePollRequest.PollTypeEnum.fromValue(this.pollType));
            meetingsCreatePollRequest.questions(this.questions);
            return meetingsCreatePollRequest;
        }

        /**
         * Execute createPoll request
         * @return MeetingsCreatePollResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting not found   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsCreatePollResponse execute() throws ApiException {
            MeetingsCreatePollRequest meetingsCreatePollRequest = buildBodyParams();
            ApiResponse<MeetingsCreatePollResponse> localVarResp = createPollWithHttpInfo(meetingId, meetingsCreatePollRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPoll request with HTTP info returned
         * @return ApiResponse&lt;MeetingsCreatePollResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting not found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsCreatePollResponse> executeWithHttpInfo() throws ApiException {
            MeetingsCreatePollRequest meetingsCreatePollRequest = buildBodyParams();
            return createPollWithHttpInfo(meetingId, meetingsCreatePollRequest);
        }

        /**
         * Execute createPoll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting Poll Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting not found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsCreatePollResponse> _callback) throws ApiException {
            MeetingsCreatePollRequest meetingsCreatePollRequest = buildBodyParams();
            return createPollAsync(meetingId, meetingsCreatePollRequest, _callback);
        }
    }

    /**
     * Create a meeting poll
     * Polls allow the meeting host to survey attendees. Create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host&#39;s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return CreatePollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;      Meeting Poll Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting not found   </td><td>  -  </td></tr>
     </table>
     */
    public CreatePollRequestBuilder createPoll(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new CreatePollRequestBuilder(meetingId);
    }
    private okhttp3.Call createTemplateFromMeetingCall(String userId, MeetingsCreateTemplateFromMeetingRequest meetingsCreateTemplateFromMeetingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsCreateTemplateFromMeetingRequest;

        // create path and map variables
        String localVarPath = "/users/{userId}/meeting_templates"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTemplateFromMeetingValidateBeforeCall(String userId, MeetingsCreateTemplateFromMeetingRequest meetingsCreateTemplateFromMeetingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createTemplateFromMeeting(Async)");
        }

        return createTemplateFromMeetingCall(userId, meetingsCreateTemplateFromMeetingRequest, _callback);

    }


    private ApiResponse<MeetingsCreateTemplateFromMeetingResponse> createTemplateFromMeetingWithHttpInfo(String userId, MeetingsCreateTemplateFromMeetingRequest meetingsCreateTemplateFromMeetingRequest) throws ApiException {
        okhttp3.Call localVarCall = createTemplateFromMeetingValidateBeforeCall(userId, meetingsCreateTemplateFromMeetingRequest, null);
        Type localVarReturnType = new TypeToken<MeetingsCreateTemplateFromMeetingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTemplateFromMeetingAsync(String userId, MeetingsCreateTemplateFromMeetingRequest meetingsCreateTemplateFromMeetingRequest, final ApiCallback<MeetingsCreateTemplateFromMeetingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTemplateFromMeetingValidateBeforeCall(userId, meetingsCreateTemplateFromMeetingRequest, _callback);
        Type localVarReturnType = new TypeToken<MeetingsCreateTemplateFromMeetingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTemplateFromMeetingRequestBuilder {
        private final String userId;
        private Long meetingId;
        private String name;
        private Boolean saveRecurrence;
        private Boolean overwrite;

        private CreateTemplateFromMeetingRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set meetingId
         * @param meetingId The meeting ID aka the meeting number in long (int64) format. (optional)
         * @return CreateTemplateFromMeetingRequestBuilder
         */
        public CreateTemplateFromMeetingRequestBuilder meetingId(Long meetingId) {
            this.meetingId = meetingId;
            return this;
        }
        
        /**
         * Set name
         * @param name The template name. (optional)
         * @return CreateTemplateFromMeetingRequestBuilder
         */
        public CreateTemplateFromMeetingRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set saveRecurrence
         * @param saveRecurrence If the field is set to true, the recurrence meeting template will be saved as the scheduled meeting. (optional, default to false)
         * @return CreateTemplateFromMeetingRequestBuilder
         */
        public CreateTemplateFromMeetingRequestBuilder saveRecurrence(Boolean saveRecurrence) {
            this.saveRecurrence = saveRecurrence;
            return this;
        }
        
        /**
         * Set overwrite
         * @param overwrite Overwrite an existing meeting template if the template is created from same existing meeting. (optional, default to false)
         * @return CreateTemplateFromMeetingRequestBuilder
         */
        public CreateTemplateFromMeetingRequestBuilder overwrite(Boolean overwrite) {
            this.overwrite = overwrite;
            return this;
        }
        
        /**
         * Build call for createTemplateFromMeeting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Meeting template created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; * Meeting ID does not exist.  * Invalid meeting ID.  * You can only create up to 40 meeting templates.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access webinar information.  * Meeting template name already exists: {templateName}.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; * User not exist: {userId}.  * User {userId} does not exist or does not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsCreateTemplateFromMeetingRequest meetingsCreateTemplateFromMeetingRequest = buildBodyParams();
            return createTemplateFromMeetingCall(userId, meetingsCreateTemplateFromMeetingRequest, _callback);
        }

        private MeetingsCreateTemplateFromMeetingRequest buildBodyParams() {
            MeetingsCreateTemplateFromMeetingRequest meetingsCreateTemplateFromMeetingRequest = new MeetingsCreateTemplateFromMeetingRequest();
            meetingsCreateTemplateFromMeetingRequest.meetingId(this.meetingId);
            meetingsCreateTemplateFromMeetingRequest.name(this.name);
            meetingsCreateTemplateFromMeetingRequest.saveRecurrence(this.saveRecurrence);
            meetingsCreateTemplateFromMeetingRequest.overwrite(this.overwrite);
            return meetingsCreateTemplateFromMeetingRequest;
        }

        /**
         * Execute createTemplateFromMeeting request
         * @return MeetingsCreateTemplateFromMeetingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Meeting template created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; * Meeting ID does not exist.  * Invalid meeting ID.  * You can only create up to 40 meeting templates.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access webinar information.  * Meeting template name already exists: {templateName}.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; * User not exist: {userId}.  * User {userId} does not exist or does not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsCreateTemplateFromMeetingResponse execute() throws ApiException {
            MeetingsCreateTemplateFromMeetingRequest meetingsCreateTemplateFromMeetingRequest = buildBodyParams();
            ApiResponse<MeetingsCreateTemplateFromMeetingResponse> localVarResp = createTemplateFromMeetingWithHttpInfo(userId, meetingsCreateTemplateFromMeetingRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTemplateFromMeeting request with HTTP info returned
         * @return ApiResponse&lt;MeetingsCreateTemplateFromMeetingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Meeting template created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; * Meeting ID does not exist.  * Invalid meeting ID.  * You can only create up to 40 meeting templates.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access webinar information.  * Meeting template name already exists: {templateName}.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; * User not exist: {userId}.  * User {userId} does not exist or does not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsCreateTemplateFromMeetingResponse> executeWithHttpInfo() throws ApiException {
            MeetingsCreateTemplateFromMeetingRequest meetingsCreateTemplateFromMeetingRequest = buildBodyParams();
            return createTemplateFromMeetingWithHttpInfo(userId, meetingsCreateTemplateFromMeetingRequest);
        }

        /**
         * Execute createTemplateFromMeeting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Meeting template created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; * Meeting ID does not exist.  * Invalid meeting ID.  * You can only create up to 40 meeting templates.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access webinar information.  * Meeting template name already exists: {templateName}.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; * User not exist: {userId}.  * User {userId} does not exist or does not belong to this account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsCreateTemplateFromMeetingResponse> _callback) throws ApiException {
            MeetingsCreateTemplateFromMeetingRequest meetingsCreateTemplateFromMeetingRequest = buildBodyParams();
            return createTemplateFromMeetingAsync(userId, meetingsCreateTemplateFromMeetingRequest, _callback);
        }
    }

    /**
     * Create a meeting template from an existing meeting
     * Create a meeting template from an existing meeting.     **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param userId The user ID retrievable from the [List users](https://developers.zoom.us) API. (required)
     * @return CreateTemplateFromMeetingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     Meeting template created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; * Meeting ID does not exist.  * Invalid meeting ID.  * You can only create up to 40 meeting templates.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access webinar information.  * Meeting template name already exists: {templateName}.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; * User not exist: {userId}.  * User {userId} does not exist or does not belong to this account.   </td><td>  -  </td></tr>
     </table>
     */
    public CreateTemplateFromMeetingRequestBuilder createTemplateFromMeeting(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new CreateTemplateFromMeetingRequestBuilder(userId);
    }
    private okhttp3.Call deleteMeetingChatMessageCall(Long meetingId, String messageId, String fileIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_meetings/{meetingId}/chat/messages/{messageId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_ids", fileIds));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeetingChatMessageValidateBeforeCall(Long meetingId, String messageId, String fileIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling deleteMeetingChatMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling deleteMeetingChatMessage(Async)");
        }

        return deleteMeetingChatMessageCall(meetingId, messageId, fileIds, _callback);

    }


    private ApiResponse<Void> deleteMeetingChatMessageWithHttpInfo(Long meetingId, String messageId, String fileIds) throws ApiException {
        okhttp3.Call localVarCall = deleteMeetingChatMessageValidateBeforeCall(meetingId, messageId, fileIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMeetingChatMessageAsync(Long meetingId, String messageId, String fileIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeetingChatMessageValidateBeforeCall(meetingId, messageId, fileIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMeetingChatMessageRequestBuilder {
        private final Long meetingId;
        private final String messageId;
        private String fileIds;

        private DeleteMeetingChatMessageRequestBuilder(Long meetingId, String messageId) {
            this.meetingId = meetingId;
            this.messageId = messageId;
        }

        /**
         * Set fileIds
         * @param fileIds The live webinar chat file&#39;s universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas. (optional)
         * @return DeleteMeetingChatMessageRequestBuilder
         */
        public DeleteMeetingChatMessageRequestBuilder fileIds(String fileIds) {
            this.fileIds = fileIds;
            return this;
        }
        
        /**
         * Build call for deleteMeetingChatMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting chat message deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Only available for Paid accounts.  * DLP is not enabled. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMeetingChatMessageCall(meetingId, messageId, fileIds, _callback);
        }


        /**
         * Execute deleteMeetingChatMessage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting chat message deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Only available for Paid accounts.  * DLP is not enabled. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMeetingChatMessageWithHttpInfo(meetingId, messageId, fileIds);
        }

        /**
         * Execute deleteMeetingChatMessage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting chat message deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Only available for Paid accounts.  * DLP is not enabled. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMeetingChatMessageWithHttpInfo(meetingId, messageId, fileIds);
        }

        /**
         * Execute deleteMeetingChatMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting chat message deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Only available for Paid accounts.  * DLP is not enabled. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMeetingChatMessageAsync(meetingId, messageId, fileIds, _callback);
        }
    }

    /**
     * Delete a live meeting message
     * Delete a message in a live meeting, based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @param messageId The live meeting chat message&#39;s unique identifier (UUID), in base64-encoded format. (required)
     * @return DeleteMeetingChatMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting chat message deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;200&#x60; &lt;br&gt;  * Only available for Paid accounts.  * DLP is not enabled. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMeetingChatMessageRequestBuilder deleteMeetingChatMessage(Long meetingId, String messageId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        if (messageId == null) throw new IllegalArgumentException("\"messageId\" is required but got null");
            

        return new DeleteMeetingChatMessageRequestBuilder(meetingId, messageId);
    }
    private okhttp3.Call deleteMeetingSurveyCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/survey"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeetingSurveyValidateBeforeCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling deleteMeetingSurvey(Async)");
        }

        return deleteMeetingSurveyCall(meetingId, _callback);

    }


    private ApiResponse<Void> deleteMeetingSurveyWithHttpInfo(Long meetingId) throws ApiException {
        okhttp3.Call localVarCall = deleteMeetingSurveyValidateBeforeCall(meetingId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMeetingSurveyAsync(Long meetingId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeetingSurveyValidateBeforeCall(meetingId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMeetingSurveyRequestBuilder {
        private final Long meetingId;

        private DeleteMeetingSurveyRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for deleteMeetingSurvey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Meeting survey deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access Webinar information. &lt;br&gt;  * Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMeetingSurveyCall(meetingId, _callback);
        }


        /**
         * Execute deleteMeetingSurvey request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Meeting survey deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access Webinar information. &lt;br&gt;  * Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMeetingSurveyWithHttpInfo(meetingId);
        }

        /**
         * Execute deleteMeetingSurvey request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Meeting survey deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access Webinar information. &lt;br&gt;  * Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMeetingSurveyWithHttpInfo(meetingId);
        }

        /**
         * Execute deleteMeetingSurvey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Meeting survey deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access Webinar information. &lt;br&gt;  * Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMeetingSurveyAsync(meetingId, _callback);
        }
    }

    /**
     * Delete a meeting survey
     * Delete a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).    **Prerequisites:**  * The host must be a **Pro** user type.  * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host&#39;s account.  * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return DeleteMeetingSurveyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Meeting survey deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access Webinar information. &lt;br&gt;  * Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}.   </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMeetingSurveyRequestBuilder deleteMeetingSurvey(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new DeleteMeetingSurveyRequestBuilder(meetingId);
    }
    private okhttp3.Call deleteRegistrantCall(Integer meetingId, String registrantId, String occurrenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/registrants/{registrantId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "registrantId" + "}", localVarApiClient.escapeString(registrantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRegistrantValidateBeforeCall(Integer meetingId, String registrantId, String occurrenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling deleteRegistrant(Async)");
        }

        // verify the required parameter 'registrantId' is set
        if (registrantId == null) {
            throw new ApiException("Missing the required parameter 'registrantId' when calling deleteRegistrant(Async)");
        }

        return deleteRegistrantCall(meetingId, registrantId, occurrenceId, _callback);

    }


    private ApiResponse<Void> deleteRegistrantWithHttpInfo(Integer meetingId, String registrantId, String occurrenceId) throws ApiException {
        okhttp3.Call localVarCall = deleteRegistrantValidateBeforeCall(meetingId, registrantId, occurrenceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRegistrantAsync(Integer meetingId, String registrantId, String occurrenceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRegistrantValidateBeforeCall(meetingId, registrantId, occurrenceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRegistrantRequestBuilder {
        private final Integer meetingId;
        private final String registrantId;
        private String occurrenceId;

        private DeleteRegistrantRequestBuilder(Integer meetingId, String registrantId) {
            this.meetingId = meetingId;
            this.registrantId = registrantId;
        }

        /**
         * Set occurrenceId
         * @param occurrenceId The meeting occurrence ID. (optional)
         * @return DeleteRegistrantRequestBuilder
         */
        public DeleteRegistrantRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Build call for deleteRegistrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP status code:** &#x60;204&#x60;      OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for paid users: {0}.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.&lt;br&gt;  **Error Code:** &#x60;404&#x60; &lt;br&gt; Registration has not been enabled for this meeting: {0}.&lt;br&gt;  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {0}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRegistrantCall(meetingId, registrantId, occurrenceId, _callback);
        }


        /**
         * Execute deleteRegistrant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP status code:** &#x60;204&#x60;      OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for paid users: {0}.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.&lt;br&gt;  **Error Code:** &#x60;404&#x60; &lt;br&gt; Registration has not been enabled for this meeting: {0}.&lt;br&gt;  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {0}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteRegistrantWithHttpInfo(meetingId, registrantId, occurrenceId);
        }

        /**
         * Execute deleteRegistrant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP status code:** &#x60;204&#x60;      OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for paid users: {0}.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.&lt;br&gt;  **Error Code:** &#x60;404&#x60; &lt;br&gt; Registration has not been enabled for this meeting: {0}.&lt;br&gt;  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {0}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRegistrantWithHttpInfo(meetingId, registrantId, occurrenceId);
        }

        /**
         * Execute deleteRegistrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP status code:** &#x60;204&#x60;      OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for paid users: {0}.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.&lt;br&gt;  **Error Code:** &#x60;404&#x60; &lt;br&gt; Registration has not been enabled for this meeting: {0}.&lt;br&gt;  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {0}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRegistrantAsync(meetingId, registrantId, occurrenceId, _callback);
        }
    }

    /**
     * Delete a meeting registrant
     * Delete a meeting registrant.            **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting ID. (required)
     * @param registrantId The meeting registrant ID. (required)
     * @return DeleteRegistrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP status code:** &#x60;204&#x60;      OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for paid users: {0}.&lt;br&gt;  **Error Code:** &#x60;300&#x60; &lt;br&gt; The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.&lt;br&gt;  **Error Code:** &#x60;404&#x60; &lt;br&gt; Registration has not been enabled for this meeting: {0}.&lt;br&gt;  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist or does not belong to this account.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {0}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRegistrantRequestBuilder deleteRegistrant(Integer meetingId, String registrantId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        if (registrantId == null) throw new IllegalArgumentException("\"registrantId\" is required but got null");
            

        return new DeleteRegistrantRequestBuilder(meetingId, registrantId);
    }
    private okhttp3.Call getDetailsCall(Long meetingId, String occurrenceId, Boolean showPreviousOccurrences, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        if (showPreviousOccurrences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_previous_occurrences", showPreviousOccurrences));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(Long meetingId, String occurrenceId, Boolean showPreviousOccurrences, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getDetails(Async)");
        }

        return getDetailsCall(meetingId, occurrenceId, showPreviousOccurrences, _callback);

    }


    private ApiResponse<MeetingsGetDetailsResponse> getDetailsWithHttpInfo(Long meetingId, String occurrenceId, Boolean showPreviousOccurrences) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(meetingId, occurrenceId, showPreviousOccurrences, null);
        Type localVarReturnType = new TypeToken<MeetingsGetDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(Long meetingId, String occurrenceId, Boolean showPreviousOccurrences, final ApiCallback<MeetingsGetDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(meetingId, occurrenceId, showPreviousOccurrences, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final Long meetingId;
        private String occurrenceId;
        private Boolean showPreviousOccurrences;

        private GetDetailsRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set occurrenceId
         * @param occurrenceId Meeting occurrence ID. Provide this field to view meeting details of a particular occurrence of the [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings). (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Set showPreviousOccurrences
         * @param showPreviousOccurrences Set this field&#39;s value to &#x60;true&#x60; to view meeting details of all previous occurrences of a [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder showPreviousOccurrences(Boolean showPreviousOccurrences) {
            this.showPreviousOccurrences = showPreviousOccurrences;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access webinar info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(meetingId, occurrenceId, showPreviousOccurrences, _callback);
        }


        /**
         * Execute getDetails request
         * @return MeetingsGetDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access webinar info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetDetailsResponse execute() throws ApiException {
            ApiResponse<MeetingsGetDetailsResponse> localVarResp = getDetailsWithHttpInfo(meetingId, occurrenceId, showPreviousOccurrences);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access webinar info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(meetingId, occurrenceId, showPreviousOccurrences);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access webinar info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetDetailsResponse> _callback) throws ApiException {
            return getDetailsAsync(meetingId, occurrenceId, showPreviousOccurrences, _callback);
        }
    }

    /**
     * Get a meeting
     * Retrieve the given meeting&#39;s details.         **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be more than 10 digits. (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting object returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access webinar info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new GetDetailsRequestBuilder(meetingId);
    }
    private okhttp3.Call getDetails_0Call(Object meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_meetings/{meetingId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetails_0ValidateBeforeCall(Object meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getDetails_0(Async)");
        }

        return getDetails_0Call(meetingId, _callback);

    }


    private ApiResponse<MeetingsGetDetails200Response> getDetails_0WithHttpInfo(Object meetingId) throws ApiException {
        okhttp3.Call localVarCall = getDetails_0ValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<MeetingsGetDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetails_0Async(Object meetingId, final ApiCallback<MeetingsGetDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetails_0ValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetails0RequestBuilder {
        private final Object meetingId;

        private GetDetails0RequestBuilder(Object meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for getDetails_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting information returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; * User does not exist: {userId}  * User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Cannot access meeting information.  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for paid account: {accountId}  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a meeting a year ago.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; * This meeting is not available or the meeting ID is invalid.  * The meeting ID is invalid or the meeting has not ended.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetails_0Call(meetingId, _callback);
        }


        /**
         * Execute getDetails_0 request
         * @return MeetingsGetDetails200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting information returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; * User does not exist: {userId}  * User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Cannot access meeting information.  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for paid account: {accountId}  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a meeting a year ago.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; * This meeting is not available or the meeting ID is invalid.  * The meeting ID is invalid or the meeting has not ended.   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetDetails200Response execute() throws ApiException {
            ApiResponse<MeetingsGetDetails200Response> localVarResp = getDetails_0WithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails_0 request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetDetails200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting information returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; * User does not exist: {userId}  * User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Cannot access meeting information.  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for paid account: {accountId}  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a meeting a year ago.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; * This meeting is not available or the meeting ID is invalid.  * The meeting ID is invalid or the meeting has not ended.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetDetails200Response> executeWithHttpInfo() throws ApiException {
            return getDetails_0WithHttpInfo(meetingId);
        }

        /**
         * Execute getDetails_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting information returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; * User does not exist: {userId}  * User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Cannot access meeting information.  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for paid account: {accountId}  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a meeting a year ago.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; * This meeting is not available or the meeting ID is invalid.  * The meeting ID is invalid or the meeting has not ended.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetDetails200Response> _callback) throws ApiException {
            return getDetails_0Async(meetingId, _callback);
        }
    }

    /**
     * Get past meeting details
     * Get information about a past meeting.      **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request. (required)
     * @return GetDetails0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting information returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; * User does not exist: {userId}  * User \&quot;{userId}\&quot; does not exist or does not belong to this account.  **Error Code:** &#x60;300&#x60; &lt;br&gt; Cannot access meeting information.  **Error Code:** &#x60;200&#x60; &lt;br&gt; Only available for paid account: {accountId}  **Error Code:** &#x60;12702&#x60; &lt;br&gt; Can not access a meeting a year ago.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;3001&#x60; &lt;br&gt; * This meeting is not available or the meeting ID is invalid.  * The meeting ID is invalid or the meeting has not ended.   </td><td>  -  </td></tr>
     </table>
     */
    public GetDetails0RequestBuilder getDetails_0(Object meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new GetDetails0RequestBuilder(meetingId);
    }
    private okhttp3.Call getInvitationNoteCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/invitation"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvitationNoteValidateBeforeCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getInvitationNote(Async)");
        }

        return getInvitationNoteCall(meetingId, _callback);

    }


    private ApiResponse<MeetingsGetInvitationNoteResponse> getInvitationNoteWithHttpInfo(Long meetingId) throws ApiException {
        okhttp3.Call localVarCall = getInvitationNoteValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<MeetingsGetInvitationNoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInvitationNoteAsync(Long meetingId, final ApiCallback<MeetingsGetInvitationNoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvitationNoteValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetInvitationNoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInvitationNoteRequestBuilder {
        private final Long meetingId;

        private GetInvitationNoteRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for getInvitationNote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting invitation returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInvitationNoteCall(meetingId, _callback);
        }


        /**
         * Execute getInvitationNote request
         * @return MeetingsGetInvitationNoteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting invitation returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetInvitationNoteResponse execute() throws ApiException {
            ApiResponse<MeetingsGetInvitationNoteResponse> localVarResp = getInvitationNoteWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInvitationNote request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetInvitationNoteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting invitation returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetInvitationNoteResponse> executeWithHttpInfo() throws ApiException {
            return getInvitationNoteWithHttpInfo(meetingId);
        }

        /**
         * Execute getInvitationNote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting invitation returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetInvitationNoteResponse> _callback) throws ApiException {
            return getInvitationNoteAsync(meetingId, _callback);
        }
    }

    /**
     * Get meeting invitation
     * Retrieve the meeting invitation note for a specific meeting.  **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return GetInvitationNoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting invitation returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetInvitationNoteRequestBuilder getInvitationNote(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new GetInvitationNoteRequestBuilder(meetingId);
    }
    private okhttp3.Call getJoinTokenCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/jointoken/live_streaming"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJoinTokenValidateBeforeCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getJoinToken(Async)");
        }

        return getJoinTokenCall(meetingId, _callback);

    }


    private ApiResponse<MeetingsGetJoinTokenResponse> getJoinTokenWithHttpInfo(Long meetingId) throws ApiException {
        okhttp3.Call localVarCall = getJoinTokenValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<MeetingsGetJoinTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJoinTokenAsync(Long meetingId, final ApiCallback<MeetingsGetJoinTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJoinTokenValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetJoinTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJoinTokenRequestBuilder {
        private final Long meetingId;

        private GetJoinTokenRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for getJoinToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting live streaming token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access Webinar information.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start live streaming. To use this feature, enable the \&quot;Allow livestreaming of meetings\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJoinTokenCall(meetingId, _callback);
        }


        /**
         * Execute getJoinToken request
         * @return MeetingsGetJoinTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting live streaming token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access Webinar information.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start live streaming. To use this feature, enable the \&quot;Allow livestreaming of meetings\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetJoinTokenResponse execute() throws ApiException {
            ApiResponse<MeetingsGetJoinTokenResponse> localVarResp = getJoinTokenWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJoinToken request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetJoinTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting live streaming token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access Webinar information.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start live streaming. To use this feature, enable the \&quot;Allow livestreaming of meetings\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetJoinTokenResponse> executeWithHttpInfo() throws ApiException {
            return getJoinTokenWithHttpInfo(meetingId);
        }

        /**
         * Execute getJoinToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting live streaming token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access Webinar information.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start live streaming. To use this feature, enable the \&quot;Allow livestreaming of meetings\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetJoinTokenResponse> _callback) throws ApiException {
            return getJoinTokenAsync(meetingId, _callback);
        }
    }

    /**
     * Get a meeting&#39;s join token for live streaming
     * Get a meeting&#39;s join token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &amp;quot;hosted by the issuer of the token&amp;quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Allow livestreaming of meetings** user setting enabled in the Zoom web portal.  **Scopes:** &#x60;meeting_token:read:admin:live_streaming&#x60;,&#x60;meeting_token:read:live_streaming&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return GetJoinTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting live streaming token returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access Webinar information.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start live streaming. To use this feature, enable the \&quot;Allow livestreaming of meetings\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
     </table>
     */
    public GetJoinTokenRequestBuilder getJoinToken(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new GetJoinTokenRequestBuilder(meetingId);
    }
    private okhttp3.Call getJoinTokenLocalRecordingCall(Long meetingId, Boolean bypassWaitingRoom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/jointoken/local_recording"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bypassWaitingRoom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bypass_waiting_room", bypassWaitingRoom));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJoinTokenLocalRecordingValidateBeforeCall(Long meetingId, Boolean bypassWaitingRoom, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getJoinTokenLocalRecording(Async)");
        }

        return getJoinTokenLocalRecordingCall(meetingId, bypassWaitingRoom, _callback);

    }


    private ApiResponse<MeetingsGetJoinTokenLocalRecordingResponse> getJoinTokenLocalRecordingWithHttpInfo(Long meetingId, Boolean bypassWaitingRoom) throws ApiException {
        okhttp3.Call localVarCall = getJoinTokenLocalRecordingValidateBeforeCall(meetingId, bypassWaitingRoom, null);
        Type localVarReturnType = new TypeToken<MeetingsGetJoinTokenLocalRecordingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJoinTokenLocalRecordingAsync(Long meetingId, Boolean bypassWaitingRoom, final ApiCallback<MeetingsGetJoinTokenLocalRecordingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJoinTokenLocalRecordingValidateBeforeCall(meetingId, bypassWaitingRoom, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetJoinTokenLocalRecordingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJoinTokenLocalRecordingRequestBuilder {
        private final Long meetingId;
        private Boolean bypassWaitingRoom;

        private GetJoinTokenLocalRecordingRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set bypassWaitingRoom
         * @param bypassWaitingRoom Whether to bypass the waiting room. (optional)
         * @return GetJoinTokenLocalRecordingRequestBuilder
         */
        public GetJoinTokenLocalRecordingRequestBuilder bypassWaitingRoom(Boolean bypassWaitingRoom) {
            this.bypassWaitingRoom = bypassWaitingRoom;
            return this;
        }
        
        /**
         * Build call for getJoinTokenLocalRecording
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting local recording token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;124&#x60; &lt;br&gt;  This API only supports OAuth2 authorization. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Not allowed to start local recording. To use this feature, enable the \&quot;Local Recording\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJoinTokenLocalRecordingCall(meetingId, bypassWaitingRoom, _callback);
        }


        /**
         * Execute getJoinTokenLocalRecording request
         * @return MeetingsGetJoinTokenLocalRecordingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting local recording token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;124&#x60; &lt;br&gt;  This API only supports OAuth2 authorization. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Not allowed to start local recording. To use this feature, enable the \&quot;Local Recording\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetJoinTokenLocalRecordingResponse execute() throws ApiException {
            ApiResponse<MeetingsGetJoinTokenLocalRecordingResponse> localVarResp = getJoinTokenLocalRecordingWithHttpInfo(meetingId, bypassWaitingRoom);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJoinTokenLocalRecording request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetJoinTokenLocalRecordingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting local recording token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;124&#x60; &lt;br&gt;  This API only supports OAuth2 authorization. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Not allowed to start local recording. To use this feature, enable the \&quot;Local Recording\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetJoinTokenLocalRecordingResponse> executeWithHttpInfo() throws ApiException {
            return getJoinTokenLocalRecordingWithHttpInfo(meetingId, bypassWaitingRoom);
        }

        /**
         * Execute getJoinTokenLocalRecording request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting local recording token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;124&#x60; &lt;br&gt;  This API only supports OAuth2 authorization. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Not allowed to start local recording. To use this feature, enable the \&quot;Local Recording\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetJoinTokenLocalRecordingResponse> _callback) throws ApiException {
            return getJoinTokenLocalRecordingAsync(meetingId, bypassWaitingRoom, _callback);
        }
    }

    /**
     * Get a meeting&#39;s join token for local recording
     * Get a meeting&#39;s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom meeting. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.   **Prerequisites:**  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** &#x60;meeting_token:read:local_recording&#x60;,&#x60;meeting_token:read:admin:local_recording&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return GetJoinTokenLocalRecordingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting local recording token returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;124&#x60; &lt;br&gt;  This API only supports OAuth2 authorization. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Not allowed to start local recording. To use this feature, enable the \&quot;Local Recording\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetJoinTokenLocalRecordingRequestBuilder getJoinTokenLocalRecording(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new GetJoinTokenLocalRecordingRequestBuilder(meetingId);
    }
    private okhttp3.Call getLivestreamDetailsCall(String meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/livestream"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLivestreamDetailsValidateBeforeCall(String meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getLivestreamDetails(Async)");
        }

        return getLivestreamDetailsCall(meetingId, _callback);

    }


    private ApiResponse<MeetingsGetLivestreamDetailsResponse> getLivestreamDetailsWithHttpInfo(String meetingId) throws ApiException {
        okhttp3.Call localVarCall = getLivestreamDetailsValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<MeetingsGetLivestreamDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLivestreamDetailsAsync(String meetingId, final ApiCallback<MeetingsGetLivestreamDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLivestreamDetailsValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetLivestreamDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLivestreamDetailsRequestBuilder {
        private final String meetingId;

        private GetLivestreamDetailsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for getLivestreamDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Live Stream details returned.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Missing meetingId&lt;br&gt; Invalid meetingId&lt;br&gt;&lt;br&gt;  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLivestreamDetailsCall(meetingId, _callback);
        }


        /**
         * Execute getLivestreamDetails request
         * @return MeetingsGetLivestreamDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Live Stream details returned.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Missing meetingId&lt;br&gt; Invalid meetingId&lt;br&gt;&lt;br&gt;  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetLivestreamDetailsResponse execute() throws ApiException {
            ApiResponse<MeetingsGetLivestreamDetailsResponse> localVarResp = getLivestreamDetailsWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLivestreamDetails request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetLivestreamDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Live Stream details returned.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Missing meetingId&lt;br&gt; Invalid meetingId&lt;br&gt;&lt;br&gt;  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetLivestreamDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getLivestreamDetailsWithHttpInfo(meetingId);
        }

        /**
         * Execute getLivestreamDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Live Stream details returned.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Missing meetingId&lt;br&gt; Invalid meetingId&lt;br&gt;&lt;br&gt;  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetLivestreamDetailsResponse> _callback) throws ApiException {
            return getLivestreamDetailsAsync(meetingId, _callback);
        }
    }

    /**
     * Get livestream details
     * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Get a meeting&#39;s livestream configuration details such as Stream URL, Stream Key and Page URL.          **Prerequisites:**     * Meeting host must be a licensed user with a Pro or higher plan.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.            **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId Unique identifier of the meeting. (required)
     * @return GetLivestreamDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Live Stream details returned.   </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Missing meetingId&lt;br&gt; Invalid meetingId&lt;br&gt;&lt;br&gt;  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.   </td><td>  -  </td></tr>
     </table>
     */
    public GetLivestreamDetailsRequestBuilder getLivestreamDetails(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new GetLivestreamDetailsRequestBuilder(meetingId);
    }
    private okhttp3.Call getMeetingArchiveTokenForLocalArchivingCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/jointoken/local_archiving"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingArchiveTokenForLocalArchivingValidateBeforeCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getMeetingArchiveTokenForLocalArchiving(Async)");
        }

        return getMeetingArchiveTokenForLocalArchivingCall(meetingId, _callback);

    }


    private ApiResponse<MeetingsGetMeetingArchiveTokenForLocalArchivingResponse> getMeetingArchiveTokenForLocalArchivingWithHttpInfo(Long meetingId) throws ApiException {
        okhttp3.Call localVarCall = getMeetingArchiveTokenForLocalArchivingValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<MeetingsGetMeetingArchiveTokenForLocalArchivingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingArchiveTokenForLocalArchivingAsync(Long meetingId, final ApiCallback<MeetingsGetMeetingArchiveTokenForLocalArchivingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingArchiveTokenForLocalArchivingValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetMeetingArchiveTokenForLocalArchivingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingArchiveTokenForLocalArchivingRequestBuilder {
        private final Long meetingId;

        private GetMeetingArchiveTokenForLocalArchivingRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for getMeetingArchiveTokenForLocalArchiving
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting local archiving token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access Webinar information.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local archiving. To use this feature, enable the \&quot;Archive meetings and webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingArchiveTokenForLocalArchivingCall(meetingId, _callback);
        }


        /**
         * Execute getMeetingArchiveTokenForLocalArchiving request
         * @return MeetingsGetMeetingArchiveTokenForLocalArchivingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting local archiving token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access Webinar information.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local archiving. To use this feature, enable the \&quot;Archive meetings and webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetMeetingArchiveTokenForLocalArchivingResponse execute() throws ApiException {
            ApiResponse<MeetingsGetMeetingArchiveTokenForLocalArchivingResponse> localVarResp = getMeetingArchiveTokenForLocalArchivingWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingArchiveTokenForLocalArchiving request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetMeetingArchiveTokenForLocalArchivingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting local archiving token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access Webinar information.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local archiving. To use this feature, enable the \&quot;Archive meetings and webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetMeetingArchiveTokenForLocalArchivingResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingArchiveTokenForLocalArchivingWithHttpInfo(meetingId);
        }

        /**
         * Execute getMeetingArchiveTokenForLocalArchiving request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting local archiving token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access Webinar information.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local archiving. To use this feature, enable the \&quot;Archive meetings and webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetMeetingArchiveTokenForLocalArchivingResponse> _callback) throws ApiException {
            return getMeetingArchiveTokenForLocalArchivingAsync(meetingId, _callback);
        }
    }

    /**
     * Get a meeting&#39;s archive token for local archiving
     * Get a meeting&#39;s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the meeting&#39;s raw audio and video media stream in real-time.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** &#x60;meeting_token:read:admin:local_archiving&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return GetMeetingArchiveTokenForLocalArchivingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting local archiving token returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access Webinar information.  **Error Code:** &#x60;124&#x60; &lt;br&gt; This API only supports OAuth2 authorization.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Not allowed to start local archiving. To use this feature, enable the \&quot;Archive meetings and webinars\&quot; setting in the \&quot;Settings\&quot; page of the Zoom web portal.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingArchiveTokenForLocalArchivingRequestBuilder getMeetingArchiveTokenForLocalArchiving(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new GetMeetingArchiveTokenForLocalArchivingRequestBuilder(meetingId);
    }
    private okhttp3.Call getMeetingSummaryCall(String meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/meeting_summary"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingSummaryValidateBeforeCall(String meetingId, final ApiCallback _callback) throws ApiException {
        return getMeetingSummaryCall(meetingId, _callback);

    }


    private ApiResponse<MeetingsGetMeetingSummaryResponse> getMeetingSummaryWithHttpInfo(String meetingId) throws ApiException {
        okhttp3.Call localVarCall = getMeetingSummaryValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<MeetingsGetMeetingSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingSummaryAsync(String meetingId, final ApiCallback<MeetingsGetMeetingSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingSummaryValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetMeetingSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingSummaryRequestBuilder {
        private String meetingId;

        private GetMeetingSummaryRequestBuilder() {
        }

        /**
         * Set meetingId
         * @param meetingId The meeting&#39;s universally unique ID (UUID). When you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request. (optional)
         * @return GetMeetingSummaryRequestBuilder
         */
        public GetMeetingSummaryRequestBuilder meetingId(String meetingId) {
            this.meetingId = meetingId;
            return this;
        }
        
        /**
         * Build call for getMeetingSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;Meeting Poll object returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingSummaryCall(meetingId, _callback);
        }


        /**
         * Execute getMeetingSummary request
         * @return MeetingsGetMeetingSummaryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;Meeting Poll object returned. </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetMeetingSummaryResponse execute() throws ApiException {
            ApiResponse<MeetingsGetMeetingSummaryResponse> localVarResp = getMeetingSummaryWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingSummary request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetMeetingSummaryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;Meeting Poll object returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetMeetingSummaryResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingSummaryWithHttpInfo(meetingId);
        }

        /**
         * Execute getMeetingSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;Meeting Poll object returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetMeetingSummaryResponse> _callback) throws ApiException {
            return getMeetingSummaryAsync(meetingId, _callback);
        }
    }

    /**
     * Get a meeting summary
     * Displays information about a meeting summary.  **Prerequisites**: * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host&#39;s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** &#x60;meeting_summary:read:admin&#x60;,&#x60;meeting_summary:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @return GetMeetingSummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;Meeting Poll object returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingSummaryRequestBuilder getMeetingSummary() throws IllegalArgumentException {
        return new GetMeetingSummaryRequestBuilder();
    }
    private okhttp3.Call getMeetingSurveyCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/survey"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingSurveyValidateBeforeCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getMeetingSurvey(Async)");
        }

        return getMeetingSurveyCall(meetingId, _callback);

    }


    private ApiResponse<MeetingsGetMeetingSurveyResponse> getMeetingSurveyWithHttpInfo(Long meetingId) throws ApiException {
        okhttp3.Call localVarCall = getMeetingSurveyValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<MeetingsGetMeetingSurveyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingSurveyAsync(Long meetingId, final ApiCallback<MeetingsGetMeetingSurveyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingSurveyValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetMeetingSurveyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingSurveyRequestBuilder {
        private final Long meetingId;

        private GetMeetingSurveyRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for getMeetingSurvey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Meeting survey object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingSurveyCall(meetingId, _callback);
        }


        /**
         * Execute getMeetingSurvey request
         * @return MeetingsGetMeetingSurveyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Meeting survey object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetMeetingSurveyResponse execute() throws ApiException {
            ApiResponse<MeetingsGetMeetingSurveyResponse> localVarResp = getMeetingSurveyWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingSurvey request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetMeetingSurveyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Meeting survey object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetMeetingSurveyResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingSurveyWithHttpInfo(meetingId);
        }

        /**
         * Execute getMeetingSurvey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Meeting survey object returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetMeetingSurveyResponse> _callback) throws ApiException {
            return getMeetingSurveyAsync(meetingId, _callback);
        }
    }

    /**
     * Get a meeting survey
     * Display information about a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host has a **Pro** license. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled on the host&#39;s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be more than 10 digits. (required)
     * @return GetMeetingSurveyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       Meeting survey object returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingSurveyRequestBuilder getMeetingSurvey(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new GetMeetingSurveyRequestBuilder(meetingId);
    }
    private okhttp3.Call getMeetingTokenCall(Long meetingId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/token"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingTokenValidateBeforeCall(Long meetingId, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getMeetingToken(Async)");
        }

        return getMeetingTokenCall(meetingId, type, _callback);

    }


    private ApiResponse<MeetingsGetMeetingTokenResponse> getMeetingTokenWithHttpInfo(Long meetingId, String type) throws ApiException {
        okhttp3.Call localVarCall = getMeetingTokenValidateBeforeCall(meetingId, type, null);
        Type localVarReturnType = new TypeToken<MeetingsGetMeetingTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMeetingTokenAsync(Long meetingId, String type, final ApiCallback<MeetingsGetMeetingTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingTokenValidateBeforeCall(meetingId, type, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetMeetingTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMeetingTokenRequestBuilder {
        private final Long meetingId;
        private String type;

        private GetMeetingTokenRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set type
         * @param type The meeting token type:  * &#x60;closed_caption_token&#x60; &amp;mdash; The third-party closed caption API token.   This defaults to &#x60;closed_caption_token&#x60;. (optional, default to closed_caption_token)
         * @return GetMeetingTokenRequestBuilder
         */
        public GetMeetingTokenRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for getMeetingToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access Webinar information. &lt;br&gt; * Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMeetingTokenCall(meetingId, type, _callback);
        }


        /**
         * Execute getMeetingToken request
         * @return MeetingsGetMeetingTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access Webinar information. &lt;br&gt; * Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetMeetingTokenResponse execute() throws ApiException {
            ApiResponse<MeetingsGetMeetingTokenResponse> localVarResp = getMeetingTokenWithHttpInfo(meetingId, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMeetingToken request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetMeetingTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access Webinar information. &lt;br&gt; * Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetMeetingTokenResponse> executeWithHttpInfo() throws ApiException {
            return getMeetingTokenWithHttpInfo(meetingId, type);
        }

        /**
         * Execute getMeetingToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting token returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access Webinar information. &lt;br&gt; * Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetMeetingTokenResponse> _callback) throws ApiException {
            return getMeetingTokenAsync(meetingId, type, _callback);
        }
    }

    /**
     * Get meeting&#39;s token
     * Get a meeting&#39;s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom meeting.   **Prerequisites:**  * The **Closed captioning** setting enabled in the Zoom web portal.  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return GetMeetingTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting token returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; * Cannot access Webinar information. &lt;br&gt; * Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
     </table>
     */
    public GetMeetingTokenRequestBuilder getMeetingToken(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new GetMeetingTokenRequestBuilder(meetingId);
    }
    private okhttp3.Call getPastMeetingParticipantsCall(String meetingId, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_meetings/{meetingId}/participants"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPastMeetingParticipantsValidateBeforeCall(String meetingId, Integer pageSize, String nextPageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getPastMeetingParticipants(Async)");
        }

        return getPastMeetingParticipantsCall(meetingId, pageSize, nextPageToken, _callback);

    }


    private ApiResponse<MeetingsGetPastMeetingParticipantsResponse> getPastMeetingParticipantsWithHttpInfo(String meetingId, Integer pageSize, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = getPastMeetingParticipantsValidateBeforeCall(meetingId, pageSize, nextPageToken, null);
        Type localVarReturnType = new TypeToken<MeetingsGetPastMeetingParticipantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPastMeetingParticipantsAsync(String meetingId, Integer pageSize, String nextPageToken, final ApiCallback<MeetingsGetPastMeetingParticipantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPastMeetingParticipantsValidateBeforeCall(meetingId, pageSize, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetPastMeetingParticipantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPastMeetingParticipantsRequestBuilder {
        private final String meetingId;
        private Integer pageSize;
        private String nextPageToken;

        private GetPastMeetingParticipantsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return GetPastMeetingParticipantsRequestBuilder
         */
        public GetPastMeetingParticipantsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return GetPastMeetingParticipantsRequestBuilder
         */
        public GetPastMeetingParticipantsRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for getPastMeetingParticipants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting participants&#39; report returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Cannot access meeting information.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Only available for paid account: {accountId} &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a meeting a year ago. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt; User not exist: {userId}&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  This meeting is not available or ID is not valid.&lt;br&gt; Meeting ID is invalid or not end. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPastMeetingParticipantsCall(meetingId, pageSize, nextPageToken, _callback);
        }


        /**
         * Execute getPastMeetingParticipants request
         * @return MeetingsGetPastMeetingParticipantsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting participants&#39; report returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Cannot access meeting information.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Only available for paid account: {accountId} &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a meeting a year ago. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt; User not exist: {userId}&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  This meeting is not available or ID is not valid.&lt;br&gt; Meeting ID is invalid or not end. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetPastMeetingParticipantsResponse execute() throws ApiException {
            ApiResponse<MeetingsGetPastMeetingParticipantsResponse> localVarResp = getPastMeetingParticipantsWithHttpInfo(meetingId, pageSize, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPastMeetingParticipants request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetPastMeetingParticipantsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting participants&#39; report returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Cannot access meeting information.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Only available for paid account: {accountId} &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a meeting a year ago. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt; User not exist: {userId}&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  This meeting is not available or ID is not valid.&lt;br&gt; Meeting ID is invalid or not end. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetPastMeetingParticipantsResponse> executeWithHttpInfo() throws ApiException {
            return getPastMeetingParticipantsWithHttpInfo(meetingId, pageSize, nextPageToken);
        }

        /**
         * Execute getPastMeetingParticipants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting participants&#39; report returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Cannot access meeting information.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Only available for paid account: {accountId} &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a meeting a year ago. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt; User not exist: {userId}&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  This meeting is not available or ID is not valid.&lt;br&gt; Meeting ID is invalid or not end. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetPastMeetingParticipantsResponse> _callback) throws ApiException {
            return getPastMeetingParticipantsAsync(meetingId, pageSize, nextPageToken, _callback);
        }
    }

    /**
     * Get past meeting participants
     * Retrieve information on participants from a past meeting. Note the API doesn&#39;t return results if there&#39;s only one participant in a meeting.          **Prerequisites:**     * Paid account on a Pro or higher plan.             **Note**: Please double encode your UUID when using this API if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.   **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param meetingId The meeting&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request. (required)
     * @return GetPastMeetingParticipantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting participants&#39; report returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Cannot access meeting information.&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;200&#x60; &lt;br&gt;  Only available for paid account: {accountId} &lt;br&gt; **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a meeting a year ago. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt; User not exist: {userId}&lt;br&gt;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  This meeting is not available or ID is not valid.&lt;br&gt; Meeting ID is invalid or not end. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetPastMeetingParticipantsRequestBuilder getPastMeetingParticipants(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new GetPastMeetingParticipantsRequestBuilder(meetingId);
    }
    private okhttp3.Call getPollCall(Long meetingId, String pollId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/polls/{pollId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "pollId" + "}", localVarApiClient.escapeString(pollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPollValidateBeforeCall(Long meetingId, String pollId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getPoll(Async)");
        }

        // verify the required parameter 'pollId' is set
        if (pollId == null) {
            throw new ApiException("Missing the required parameter 'pollId' when calling getPoll(Async)");
        }

        return getPollCall(meetingId, pollId, _callback);

    }


    private ApiResponse<MeetingsGetPollResponse> getPollWithHttpInfo(Long meetingId, String pollId) throws ApiException {
        okhttp3.Call localVarCall = getPollValidateBeforeCall(meetingId, pollId, null);
        Type localVarReturnType = new TypeToken<MeetingsGetPollResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPollAsync(Long meetingId, String pollId, final ApiCallback<MeetingsGetPollResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPollValidateBeforeCall(meetingId, pollId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetPollResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPollRequestBuilder {
        private final Long meetingId;
        private final String pollId;

        private GetPollRequestBuilder(Long meetingId, String pollId) {
            this.meetingId = meetingId;
            this.pollId = pollId;
        }

        /**
         * Build call for getPoll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting Poll object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPollCall(meetingId, pollId, _callback);
        }


        /**
         * Execute getPoll request
         * @return MeetingsGetPollResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting Poll object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found.   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetPollResponse execute() throws ApiException {
            ApiResponse<MeetingsGetPollResponse> localVarResp = getPollWithHttpInfo(meetingId, pollId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPoll request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetPollResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting Poll object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetPollResponse> executeWithHttpInfo() throws ApiException {
            return getPollWithHttpInfo(meetingId, pollId);
        }

        /**
         * Execute getPoll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting Poll object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetPollResponse> _callback) throws ApiException {
            return getPollAsync(meetingId, pollId, _callback);
        }
    }

    /**
     * Get a meeting poll
     * Polls allow the meeting host to survey attendees. Retrieve information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).            **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @param pollId The poll ID (required)
     * @return GetPollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting Poll object returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found.   </td><td>  -  </td></tr>
     </table>
     */
    public GetPollRequestBuilder getPoll(Long meetingId, String pollId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        if (pollId == null) throw new IllegalArgumentException("\"pollId\" is required but got null");
            

        return new GetPollRequestBuilder(meetingId, pollId);
    }
    private okhttp3.Call getRegistrantDetailsCall(Long meetingId, String registrantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/registrants/{registrantId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "registrantId" + "}", localVarApiClient.escapeString(registrantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrantDetailsValidateBeforeCall(Long meetingId, String registrantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getRegistrantDetails(Async)");
        }

        // verify the required parameter 'registrantId' is set
        if (registrantId == null) {
            throw new ApiException("Missing the required parameter 'registrantId' when calling getRegistrantDetails(Async)");
        }

        return getRegistrantDetailsCall(meetingId, registrantId, _callback);

    }


    private ApiResponse<MeetingsGetRegistrantDetailsResponse> getRegistrantDetailsWithHttpInfo(Long meetingId, String registrantId) throws ApiException {
        okhttp3.Call localVarCall = getRegistrantDetailsValidateBeforeCall(meetingId, registrantId, null);
        Type localVarReturnType = new TypeToken<MeetingsGetRegistrantDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRegistrantDetailsAsync(Long meetingId, String registrantId, final ApiCallback<MeetingsGetRegistrantDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrantDetailsValidateBeforeCall(meetingId, registrantId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetRegistrantDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRegistrantDetailsRequestBuilder {
        private final Long meetingId;
        private final String registrantId;

        private GetRegistrantDetailsRequestBuilder(Long meetingId, String registrantId) {
            this.meetingId = meetingId;
            this.registrantId = registrantId;
        }

        /**
         * Build call for getRegistrantDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: \&quot;{accountId}\&quot;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  &gt; Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  Meeting host does not exist: \&quot;{userId}\&quot; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRegistrantDetailsCall(meetingId, registrantId, _callback);
        }


        /**
         * Execute getRegistrantDetails request
         * @return MeetingsGetRegistrantDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: \&quot;{accountId}\&quot;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  &gt; Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  Meeting host does not exist: \&quot;{userId}\&quot; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetRegistrantDetailsResponse execute() throws ApiException {
            ApiResponse<MeetingsGetRegistrantDetailsResponse> localVarResp = getRegistrantDetailsWithHttpInfo(meetingId, registrantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRegistrantDetails request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetRegistrantDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: \&quot;{accountId}\&quot;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  &gt; Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  Meeting host does not exist: \&quot;{userId}\&quot; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetRegistrantDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getRegistrantDetailsWithHttpInfo(meetingId, registrantId);
        }

        /**
         * Execute getRegistrantDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: \&quot;{accountId}\&quot;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  &gt; Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  Meeting host does not exist: \&quot;{userId}\&quot; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetRegistrantDetailsResponse> _callback) throws ApiException {
            return getRegistrantDetailsAsync(meetingId, registrantId, _callback);
        }
    }

    /**
     * Get a meeting registrant
     * Retrieve details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).  **Prerequisites:**  * The account must have a Meeting plan  **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @param registrantId The registrant ID. (required)
     * @return GetRegistrantDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: \&quot;{accountId}\&quot;&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  &gt; Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  Meeting host does not exist: \&quot;{userId}\&quot; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public GetRegistrantDetailsRequestBuilder getRegistrantDetails(Long meetingId, String registrantId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        if (registrantId == null) throw new IllegalArgumentException("\"registrantId\" is required but got null");
            

        return new GetRegistrantDetailsRequestBuilder(meetingId, registrantId);
    }
    private okhttp3.Call getSipUriWithPasscodeCall(Long meetingId, MeetingsGetSipUriWithPasscodeRequest meetingsGetSipUriWithPasscodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsGetSipUriWithPasscodeRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/sip_dialing"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSipUriWithPasscodeValidateBeforeCall(Long meetingId, MeetingsGetSipUriWithPasscodeRequest meetingsGetSipUriWithPasscodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getSipUriWithPasscode(Async)");
        }

        return getSipUriWithPasscodeCall(meetingId, meetingsGetSipUriWithPasscodeRequest, _callback);

    }


    private ApiResponse<MeetingsGetSipUriWithPasscodeResponse> getSipUriWithPasscodeWithHttpInfo(Long meetingId, MeetingsGetSipUriWithPasscodeRequest meetingsGetSipUriWithPasscodeRequest) throws ApiException {
        okhttp3.Call localVarCall = getSipUriWithPasscodeValidateBeforeCall(meetingId, meetingsGetSipUriWithPasscodeRequest, null);
        Type localVarReturnType = new TypeToken<MeetingsGetSipUriWithPasscodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSipUriWithPasscodeAsync(Long meetingId, MeetingsGetSipUriWithPasscodeRequest meetingsGetSipUriWithPasscodeRequest, final ApiCallback<MeetingsGetSipUriWithPasscodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSipUriWithPasscodeValidateBeforeCall(meetingId, meetingsGetSipUriWithPasscodeRequest, _callback);
        Type localVarReturnType = new TypeToken<MeetingsGetSipUriWithPasscodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSipUriWithPasscodeRequestBuilder {
        private final Long meetingId;
        private String passcode;

        private GetSipUriWithPasscodeRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set passcode
         * @param passcode If customers desire that a passcode be embedded in the SIP URI dial string, they must supply the passcode. Zoom will not validate the passcode. (optional)
         * @return GetSipUriWithPasscodeRequestBuilder
         */
        public GetSipUriWithPasscodeRequestBuilder passcode(String passcode) {
            this.passcode = passcode;
            return this;
        }
        
        /**
         * Build call for getSipUriWithPasscode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting&#39;s encoded SIP URI returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; The meeting&#39;s SIP URI does not exist: {meetingId}.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsGetSipUriWithPasscodeRequest meetingsGetSipUriWithPasscodeRequest = buildBodyParams();
            return getSipUriWithPasscodeCall(meetingId, meetingsGetSipUriWithPasscodeRequest, _callback);
        }

        private MeetingsGetSipUriWithPasscodeRequest buildBodyParams() {
            MeetingsGetSipUriWithPasscodeRequest meetingsGetSipUriWithPasscodeRequest = new MeetingsGetSipUriWithPasscodeRequest();
            meetingsGetSipUriWithPasscodeRequest.passcode(this.passcode);
            return meetingsGetSipUriWithPasscodeRequest;
        }

        /**
         * Execute getSipUriWithPasscode request
         * @return MeetingsGetSipUriWithPasscodeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting&#39;s encoded SIP URI returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; The meeting&#39;s SIP URI does not exist: {meetingId}.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsGetSipUriWithPasscodeResponse execute() throws ApiException {
            MeetingsGetSipUriWithPasscodeRequest meetingsGetSipUriWithPasscodeRequest = buildBodyParams();
            ApiResponse<MeetingsGetSipUriWithPasscodeResponse> localVarResp = getSipUriWithPasscodeWithHttpInfo(meetingId, meetingsGetSipUriWithPasscodeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSipUriWithPasscode request with HTTP info returned
         * @return ApiResponse&lt;MeetingsGetSipUriWithPasscodeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting&#39;s encoded SIP URI returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; The meeting&#39;s SIP URI does not exist: {meetingId}.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsGetSipUriWithPasscodeResponse> executeWithHttpInfo() throws ApiException {
            MeetingsGetSipUriWithPasscodeRequest meetingsGetSipUriWithPasscodeRequest = buildBodyParams();
            return getSipUriWithPasscodeWithHttpInfo(meetingId, meetingsGetSipUriWithPasscodeRequest);
        }

        /**
         * Execute getSipUriWithPasscode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting&#39;s encoded SIP URI returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; The meeting&#39;s SIP URI does not exist: {meetingId}.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsGetSipUriWithPasscodeResponse> _callback) throws ApiException {
            MeetingsGetSipUriWithPasscodeRequest meetingsGetSipUriWithPasscodeRequest = buildBodyParams();
            return getSipUriWithPasscodeAsync(meetingId, meetingsGetSipUriWithPasscodeRequest, _callback);
        }
    }

    /**
     * Get a meeting SIP URI with Passcode
     * Get a meeting&#39;s SIP URI.  The URI consists of the meeting ID, (optional, user-supplied) passcode and participant identifier code.  The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period (in seconds).     **Scopes:** &#x60;meeting:write:sip_dialing&#x60;,&#x60;meeting:write:admin:sip_dialing&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return GetSipUriWithPasscodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;      Meeting&#39;s encoded SIP URI returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;300&#x60; &lt;br&gt; Invalid meeting ID.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; The meeting&#39;s SIP URI does not exist: {meetingId}.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;300&#x60; &lt;br&gt; Meeting ID does not exist.  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting does not exist: {meetingId}   </td><td>  -  </td></tr>
     </table>
     */
    public GetSipUriWithPasscodeRequestBuilder getSipUriWithPasscode(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new GetSipUriWithPasscodeRequestBuilder(meetingId);
    }
    private okhttp3.Call listHostScheduledCall(String userId, String type, Integer pageSize, String nextPageToken, Integer pageNumber, LocalDate from, LocalDate to, String timezone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/meetings"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHostScheduledValidateBeforeCall(String userId, String type, Integer pageSize, String nextPageToken, Integer pageNumber, LocalDate from, LocalDate to, String timezone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listHostScheduled(Async)");
        }

        return listHostScheduledCall(userId, type, pageSize, nextPageToken, pageNumber, from, to, timezone, _callback);

    }


    private ApiResponse<MeetingsListHostScheduledResponse> listHostScheduledWithHttpInfo(String userId, String type, Integer pageSize, String nextPageToken, Integer pageNumber, LocalDate from, LocalDate to, String timezone) throws ApiException {
        okhttp3.Call localVarCall = listHostScheduledValidateBeforeCall(userId, type, pageSize, nextPageToken, pageNumber, from, to, timezone, null);
        Type localVarReturnType = new TypeToken<MeetingsListHostScheduledResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listHostScheduledAsync(String userId, String type, Integer pageSize, String nextPageToken, Integer pageNumber, LocalDate from, LocalDate to, String timezone, final ApiCallback<MeetingsListHostScheduledResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHostScheduledValidateBeforeCall(userId, type, pageSize, nextPageToken, pageNumber, from, to, timezone, _callback);
        Type localVarReturnType = new TypeToken<MeetingsListHostScheduledResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListHostScheduledRequestBuilder {
        private final String userId;
        private String type;
        private Integer pageSize;
        private String nextPageToken;
        private Integer pageNumber;
        private LocalDate from;
        private LocalDate to;
        private String timezone;

        private ListHostScheduledRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set type
         * @param type The type of meeting.  * &#x60;scheduled&#x60; - All valid previous (unexpired) meetings, live meetings, and upcoming scheduled meetings.  * &#x60;live&#x60; - All the ongoing meetings.  * &#x60;upcoming&#x60; - All upcoming meetings, including live meetings.  * &#x60;upcoming_meetings&#x60; - All upcoming meetings, including live meetings.  * &#x60;previous_meetings&#x60; - All the previous meetings. (optional, default to scheduled)
         * @return ListHostScheduledRequestBuilder
         */
        public ListHostScheduledRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListHostScheduledRequestBuilder
         */
        public ListHostScheduledRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return ListHostScheduledRequestBuilder
         */
        public ListHostScheduledRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the current page in the returned records. (optional)
         * @return ListHostScheduledRequestBuilder
         */
        public ListHostScheduledRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set from
         * @param from The start date. (optional)
         * @return ListHostScheduledRequestBuilder
         */
        public ListHostScheduledRequestBuilder from(LocalDate from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to The end date. (optional)
         * @return ListHostScheduledRequestBuilder
         */
        public ListHostScheduledRequestBuilder to(LocalDate to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone The timezone to assign to the &#x60;from&#x60; and &#x60;to&#x60; value. For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones). (optional)
         * @return ListHostScheduledRequestBuilder
         */
        public ListHostScheduledRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Build call for listHostScheduled
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of meeting objects returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listHostScheduledCall(userId, type, pageSize, nextPageToken, pageNumber, from, to, timezone, _callback);
        }


        /**
         * Execute listHostScheduled request
         * @return MeetingsListHostScheduledResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of meeting objects returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsListHostScheduledResponse execute() throws ApiException {
            ApiResponse<MeetingsListHostScheduledResponse> localVarResp = listHostScheduledWithHttpInfo(userId, type, pageSize, nextPageToken, pageNumber, from, to, timezone);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listHostScheduled request with HTTP info returned
         * @return ApiResponse&lt;MeetingsListHostScheduledResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of meeting objects returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsListHostScheduledResponse> executeWithHttpInfo() throws ApiException {
            return listHostScheduledWithHttpInfo(userId, type, pageSize, nextPageToken, pageNumber, from, to, timezone);
        }

        /**
         * Execute listHostScheduled request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of meeting objects returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsListHostScheduledResponse> _callback) throws ApiException {
            return listHostScheduledAsync(userId, type, pageSize, nextPageToken, pageNumber, from, to, timezone, _callback);
        }
    }

    /**
     * List meetings
     * List a meeting host user&#39;s scheduled meetings. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.   **Note**  * This API **only** supports scheduled meetings. This API does not return information about instant meetings.  * This API only returns a user&#39;s [unexpired meetings](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).      **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param userId The user&#39;s user ID or email address. For user-level apps, pass the &#x60;me&#x60; value. (required)
     * @return ListHostScheduledRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of meeting objects returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account.&lt;br&gt; &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListHostScheduledRequestBuilder listHostScheduled(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListHostScheduledRequestBuilder(userId);
    }
    private okhttp3.Call listMeetingPollsCall(Long meetingId, Boolean anonymous, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/polls"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (anonymous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anonymous", anonymous));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeetingPollsValidateBeforeCall(Long meetingId, Boolean anonymous, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling listMeetingPolls(Async)");
        }

        return listMeetingPollsCall(meetingId, anonymous, _callback);

    }


    private ApiResponse<MeetingsListMeetingPollsResponse> listMeetingPollsWithHttpInfo(Long meetingId, Boolean anonymous) throws ApiException {
        okhttp3.Call localVarCall = listMeetingPollsValidateBeforeCall(meetingId, anonymous, null);
        Type localVarReturnType = new TypeToken<MeetingsListMeetingPollsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMeetingPollsAsync(Long meetingId, Boolean anonymous, final ApiCallback<MeetingsListMeetingPollsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeetingPollsValidateBeforeCall(meetingId, anonymous, _callback);
        Type localVarReturnType = new TypeToken<MeetingsListMeetingPollsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMeetingPollsRequestBuilder {
        private final Long meetingId;
        private Boolean anonymous;

        private ListMeetingPollsRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set anonymous
         * @param anonymous Whether to query for polls with the **Anonymous** option enabled:  * &#x60;true&#x60; &amp;mdash; Query for polls with the **Anonymous** option enabled.  * &#x60;false&#x60; &amp;mdash; Do not query for polls with the **Anonymous** option enabled. (optional)
         * @return ListMeetingPollsRequestBuilder
         */
        public ListMeetingPollsRequestBuilder anonymous(Boolean anonymous) {
            this.anonymous = anonymous;
            return this;
        }
        
        /**
         * Build call for listMeetingPolls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:**      List polls of a Meeting  returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMeetingPollsCall(meetingId, anonymous, _callback);
        }


        /**
         * Execute listMeetingPolls request
         * @return MeetingsListMeetingPollsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:**      List polls of a Meeting  returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsListMeetingPollsResponse execute() throws ApiException {
            ApiResponse<MeetingsListMeetingPollsResponse> localVarResp = listMeetingPollsWithHttpInfo(meetingId, anonymous);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMeetingPolls request with HTTP info returned
         * @return ApiResponse&lt;MeetingsListMeetingPollsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:**      List polls of a Meeting  returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsListMeetingPollsResponse> executeWithHttpInfo() throws ApiException {
            return listMeetingPollsWithHttpInfo(meetingId, anonymous);
        }

        /**
         * Execute listMeetingPolls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:**      List polls of a Meeting  returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsListMeetingPollsResponse> _callback) throws ApiException {
            return listMeetingPollsAsync(meetingId, anonymous, _callback);
        }
    }

    /**
     * List meeting polls
     * Polls allow the meeting host to survey attendees. List all [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return ListMeetingPollsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:**      List polls of a Meeting  returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
     </table>
     */
    public ListMeetingPollsRequestBuilder listMeetingPolls(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new ListMeetingPollsRequestBuilder(meetingId);
    }
    private okhttp3.Call listMeetingSummariesCall(Integer pageSize, String nextPageToken, OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/meeting_summaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeetingSummariesValidateBeforeCall(Integer pageSize, String nextPageToken, OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        return listMeetingSummariesCall(pageSize, nextPageToken, from, to, _callback);

    }


    private ApiResponse<MeetingsListMeetingSummariesResponse> listMeetingSummariesWithHttpInfo(Integer pageSize, String nextPageToken, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        okhttp3.Call localVarCall = listMeetingSummariesValidateBeforeCall(pageSize, nextPageToken, from, to, null);
        Type localVarReturnType = new TypeToken<MeetingsListMeetingSummariesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMeetingSummariesAsync(Integer pageSize, String nextPageToken, OffsetDateTime from, OffsetDateTime to, final ApiCallback<MeetingsListMeetingSummariesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeetingSummariesValidateBeforeCall(pageSize, nextPageToken, from, to, _callback);
        Type localVarReturnType = new TypeToken<MeetingsListMeetingSummariesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMeetingSummariesRequestBuilder {
        private Integer pageSize;
        private String nextPageToken;
        private OffsetDateTime from;
        private OffsetDateTime to;

        private ListMeetingSummariesRequestBuilder() {
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListMeetingSummariesRequestBuilder
         */
        public ListMeetingSummariesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes. (optional)
         * @return ListMeetingSummariesRequestBuilder
         */
        public ListMeetingSummariesRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Set from
         * @param from The start date in &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;&#x60; UTC format used to retrieve the creation date range of the meeting summaries. (optional)
         * @return ListMeetingSummariesRequestBuilder
         */
        public ListMeetingSummariesRequestBuilder from(OffsetDateTime from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to The end date in &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;&#x60; UTC format used to retrieve the creation date range of the meeting summaries. (optional)
         * @return ListMeetingSummariesRequestBuilder
         */
        public ListMeetingSummariesRequestBuilder to(OffsetDateTime to) {
            this.to = to;
            return this;
        }
        
        /**
         * Build call for listMeetingSummaries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  Successfully listed meeting summaries of an account. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting summary disabled. To enable this feature, enable the \&quot;Meeting Summary with AI Companion\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMeetingSummariesCall(pageSize, nextPageToken, from, to, _callback);
        }


        /**
         * Execute listMeetingSummaries request
         * @return MeetingsListMeetingSummariesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  Successfully listed meeting summaries of an account. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting summary disabled. To enable this feature, enable the \&quot;Meeting Summary with AI Companion\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsListMeetingSummariesResponse execute() throws ApiException {
            ApiResponse<MeetingsListMeetingSummariesResponse> localVarResp = listMeetingSummariesWithHttpInfo(pageSize, nextPageToken, from, to);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMeetingSummaries request with HTTP info returned
         * @return ApiResponse&lt;MeetingsListMeetingSummariesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  Successfully listed meeting summaries of an account. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting summary disabled. To enable this feature, enable the \&quot;Meeting Summary with AI Companion\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsListMeetingSummariesResponse> executeWithHttpInfo() throws ApiException {
            return listMeetingSummariesWithHttpInfo(pageSize, nextPageToken, from, to);
        }

        /**
         * Execute listMeetingSummaries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  Successfully listed meeting summaries of an account. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting summary disabled. To enable this feature, enable the \&quot;Meeting Summary with AI Companion\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsListMeetingSummariesResponse> _callback) throws ApiException {
            return listMeetingSummariesAsync(pageSize, nextPageToken, from, to, _callback);
        }
    }

    /**
     * List meeting summaries of an account
     * Generates a list of all meeting summaries for an account.  **Prerequisites** * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host&#39;s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** &#x60;meeting_summary:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @return ListMeetingSummariesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;  Successfully listed meeting summaries of an account. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting summary disabled. To enable this feature, enable the \&quot;Meeting Summary with AI Companion\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User {userId} not exist or not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListMeetingSummariesRequestBuilder listMeetingSummaries() throws IllegalArgumentException {
        return new ListMeetingSummariesRequestBuilder();
    }
    private okhttp3.Call listMeetingTemplatesCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/meeting_templates"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeetingTemplatesValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listMeetingTemplates(Async)");
        }

        return listMeetingTemplatesCall(userId, _callback);

    }


    private ApiResponse<MeetingsListMeetingTemplatesResponse> listMeetingTemplatesWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = listMeetingTemplatesValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<MeetingsListMeetingTemplatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMeetingTemplatesAsync(String userId, final ApiCallback<MeetingsListMeetingTemplatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeetingTemplatesValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsListMeetingTemplatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMeetingTemplatesRequestBuilder {
        private final String userId;

        private ListMeetingTemplatesRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for listMeetingTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User not exist: {userId}.&lt;br&gt; User {userId} does not exist or does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMeetingTemplatesCall(userId, _callback);
        }


        /**
         * Execute listMeetingTemplates request
         * @return MeetingsListMeetingTemplatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User not exist: {userId}.&lt;br&gt; User {userId} does not exist or does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsListMeetingTemplatesResponse execute() throws ApiException {
            ApiResponse<MeetingsListMeetingTemplatesResponse> localVarResp = listMeetingTemplatesWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMeetingTemplates request with HTTP info returned
         * @return ApiResponse&lt;MeetingsListMeetingTemplatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User not exist: {userId}.&lt;br&gt; User {userId} does not exist or does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsListMeetingTemplatesResponse> executeWithHttpInfo() throws ApiException {
            return listMeetingTemplatesWithHttpInfo(userId);
        }

        /**
         * Execute listMeetingTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User not exist: {userId}.&lt;br&gt; User {userId} does not exist or does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsListMeetingTemplatesResponse> _callback) throws ApiException {
            return listMeetingTemplatesAsync(userId, _callback);
        }
    }

    /**
     * List meeting templates
     * List available [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) for a user. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.    **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param userId The user ID retrievable from the [List users](https://developers.zoom.us) API. (required)
     * @return ListMeetingTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**      </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  User not exist: {userId}.&lt;br&gt; User {userId} does not exist or does not belong to this account. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListMeetingTemplatesRequestBuilder listMeetingTemplates(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListMeetingTemplatesRequestBuilder(userId);
    }
    private okhttp3.Call listPastMeetingInstancesCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_meetings/{meetingId}/instances"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPastMeetingInstancesValidateBeforeCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling listPastMeetingInstances(Async)");
        }

        return listPastMeetingInstancesCall(meetingId, _callback);

    }


    private ApiResponse<MeetingsListPastMeetingInstancesResponse> listPastMeetingInstancesWithHttpInfo(Long meetingId) throws ApiException {
        okhttp3.Call localVarCall = listPastMeetingInstancesValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<MeetingsListPastMeetingInstancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPastMeetingInstancesAsync(Long meetingId, final ApiCallback<MeetingsListPastMeetingInstancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPastMeetingInstancesValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsListPastMeetingInstancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPastMeetingInstancesRequestBuilder {
        private final Long meetingId;

        private ListPastMeetingInstancesRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for listPastMeetingInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       List of ended meeting instances returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPastMeetingInstancesCall(meetingId, _callback);
        }


        /**
         * Execute listPastMeetingInstances request
         * @return MeetingsListPastMeetingInstancesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       List of ended meeting instances returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsListPastMeetingInstancesResponse execute() throws ApiException {
            ApiResponse<MeetingsListPastMeetingInstancesResponse> localVarResp = listPastMeetingInstancesWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPastMeetingInstances request with HTTP info returned
         * @return ApiResponse&lt;MeetingsListPastMeetingInstancesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       List of ended meeting instances returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsListPastMeetingInstancesResponse> executeWithHttpInfo() throws ApiException {
            return listPastMeetingInstancesWithHttpInfo(meetingId);
        }

        /**
         * Execute listPastMeetingInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       List of ended meeting instances returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsListPastMeetingInstancesResponse> _callback) throws ApiException {
            return listPastMeetingInstancesAsync(meetingId, _callback);
        }
    }

    /**
     * List past meeting instances
     * Return a list of past meeting instances.      **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param meetingId The past meeting&#39;s ID. (required)
     * @return ListPastMeetingInstancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;       List of ended meeting instances returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public ListPastMeetingInstancesRequestBuilder listPastMeetingInstances(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new ListPastMeetingInstancesRequestBuilder(meetingId);
    }
    private okhttp3.Call listPastMeetingPollsCall(String meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_meetings/{meetingId}/polls"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPastMeetingPollsValidateBeforeCall(String meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling listPastMeetingPolls(Async)");
        }

        return listPastMeetingPollsCall(meetingId, _callback);

    }


    private ApiResponse<MeetingsListPastMeetingPollsResponse> listPastMeetingPollsWithHttpInfo(String meetingId) throws ApiException {
        okhttp3.Call localVarCall = listPastMeetingPollsValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<MeetingsListPastMeetingPollsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPastMeetingPollsAsync(String meetingId, final ApiCallback<MeetingsListPastMeetingPollsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPastMeetingPollsValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsListPastMeetingPollsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPastMeetingPollsRequestBuilder {
        private final String meetingId;

        private ListPastMeetingPollsRequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for listPastMeetingPolls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Polls returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a meeting a year ago. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPastMeetingPollsCall(meetingId, _callback);
        }


        /**
         * Execute listPastMeetingPolls request
         * @return MeetingsListPastMeetingPollsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Polls returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a meeting a year ago. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsListPastMeetingPollsResponse execute() throws ApiException {
            ApiResponse<MeetingsListPastMeetingPollsResponse> localVarResp = listPastMeetingPollsWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPastMeetingPolls request with HTTP info returned
         * @return ApiResponse&lt;MeetingsListPastMeetingPollsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Polls returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a meeting a year ago. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsListPastMeetingPollsResponse> executeWithHttpInfo() throws ApiException {
            return listPastMeetingPollsWithHttpInfo(meetingId);
        }

        /**
         * Execute listPastMeetingPolls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Polls returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a meeting a year ago. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsListPastMeetingPollsResponse> _callback) throws ApiException {
            return listPastMeetingPollsAsync(meetingId, _callback);
        }
    }

    /**
     * List past meeting&#39;s poll results
     * [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. List poll results of a meeting.           **Prerequisites**:     * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param meetingId The meeting&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request. (required)
     * @return ListPastMeetingPollsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Polls returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;12702&#x60; &lt;br&gt;  Can not access a meeting a year ago. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListPastMeetingPollsRequestBuilder listPastMeetingPolls(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new ListPastMeetingPollsRequestBuilder(meetingId);
    }
    private okhttp3.Call listPastMeetingQACall(String meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/past_meetings/{meetingId}/qa"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPastMeetingQAValidateBeforeCall(String meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling listPastMeetingQA(Async)");
        }

        return listPastMeetingQACall(meetingId, _callback);

    }


    private ApiResponse<MeetingsListPastMeetingQaResponse> listPastMeetingQAWithHttpInfo(String meetingId) throws ApiException {
        okhttp3.Call localVarCall = listPastMeetingQAValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<MeetingsListPastMeetingQaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPastMeetingQAAsync(String meetingId, final ApiCallback<MeetingsListPastMeetingQaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPastMeetingQAValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsListPastMeetingQaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPastMeetingQARequestBuilder {
        private final String meetingId;

        private ListPastMeetingQARequestBuilder(String meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for listPastMeetingQA
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Q&amp;amp;A returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting ID is invalid or not end.&lt;br&gt; This Meeting id does not belong to you:{meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPastMeetingQACall(meetingId, _callback);
        }


        /**
         * Execute listPastMeetingQA request
         * @return MeetingsListPastMeetingQaResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Q&amp;amp;A returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting ID is invalid or not end.&lt;br&gt; This Meeting id does not belong to you:{meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsListPastMeetingQaResponse execute() throws ApiException {
            ApiResponse<MeetingsListPastMeetingQaResponse> localVarResp = listPastMeetingQAWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPastMeetingQA request with HTTP info returned
         * @return ApiResponse&lt;MeetingsListPastMeetingQaResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Q&amp;amp;A returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting ID is invalid or not end.&lt;br&gt; This Meeting id does not belong to you:{meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsListPastMeetingQaResponse> executeWithHttpInfo() throws ApiException {
            return listPastMeetingQAWithHttpInfo(meetingId);
        }

        /**
         * Execute listPastMeetingQA request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Q&amp;amp;A returned successfully. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting ID is invalid or not end.&lt;br&gt; This Meeting id does not belong to you:{meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsListPastMeetingQaResponse> _callback) throws ApiException {
            return listPastMeetingQAAsync(meetingId, _callback);
        }
    }

    /**
     * List past meetings&#39; Q&amp;A
     * The question &amp;amp; answer (Q&amp;amp;A) feature for Zoom Meetings lets attendees ask questions during a meeting and lets the other attendees answer those questions.     List Q&amp;amp;A of a specific meeting.  **Prerequisites:**     *   **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param meetingId The meeting&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request. (required)
     * @return ListPastMeetingQARequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; **OK**     Q&amp;amp;A returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **HTTP Status Code:** &#x60;401&#x60; &lt;br&gt;  Unauthorized    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account:{accountId}. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting ID is invalid or not end.&lt;br&gt; This Meeting id does not belong to you:{meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListPastMeetingQARequestBuilder listPastMeetingQA(String meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
            

        return new ListPastMeetingQARequestBuilder(meetingId);
    }
    private okhttp3.Call listRegistrantsCall(Long meetingId, String occurrenceId, String status, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/registrants"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRegistrantsValidateBeforeCall(Long meetingId, String occurrenceId, String status, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling listRegistrants(Async)");
        }

        return listRegistrantsCall(meetingId, occurrenceId, status, pageSize, pageNumber, nextPageToken, _callback);

    }


    private ApiResponse<MeetingsListRegistrantsResponse> listRegistrantsWithHttpInfo(Long meetingId, String occurrenceId, String status, Integer pageSize, Integer pageNumber, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = listRegistrantsValidateBeforeCall(meetingId, occurrenceId, status, pageSize, pageNumber, nextPageToken, null);
        Type localVarReturnType = new TypeToken<MeetingsListRegistrantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRegistrantsAsync(Long meetingId, String occurrenceId, String status, Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback<MeetingsListRegistrantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRegistrantsValidateBeforeCall(meetingId, occurrenceId, status, pageSize, pageNumber, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<MeetingsListRegistrantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRegistrantsRequestBuilder {
        private final Long meetingId;
        private String occurrenceId;
        private String status;
        private Integer pageSize;
        private Integer pageNumber;
        private String nextPageToken;

        private ListRegistrantsRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set occurrenceId
         * @param occurrenceId The meeting or webinar occurrence ID. (optional)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Set status
         * @param status Query by the registrant&#39;s status.  * &#x60;pending&#x60; - The registration is pending.  * &#x60;approved&#x60; - The registrant is approved.  * &#x60;denied&#x60; - The registration is denied. (optional, default to approved)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber **Deprecated.** We will no longer support this field in a future release. Instead, use the &#x60;next_page_token&#x60; for pagination. (optional, default to 1)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return ListRegistrantsRequestBuilder
         */
        public ListRegistrantsRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for listRegistrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Successfully listed meeting registrants. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  Meeting host does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRegistrantsCall(meetingId, occurrenceId, status, pageSize, pageNumber, nextPageToken, _callback);
        }


        /**
         * Execute listRegistrants request
         * @return MeetingsListRegistrantsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Successfully listed meeting registrants. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  Meeting host does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsListRegistrantsResponse execute() throws ApiException {
            ApiResponse<MeetingsListRegistrantsResponse> localVarResp = listRegistrantsWithHttpInfo(meetingId, occurrenceId, status, pageSize, pageNumber, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRegistrants request with HTTP info returned
         * @return ApiResponse&lt;MeetingsListRegistrantsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Successfully listed meeting registrants. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  Meeting host does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsListRegistrantsResponse> executeWithHttpInfo() throws ApiException {
            return listRegistrantsWithHttpInfo(meetingId, occurrenceId, status, pageSize, pageNumber, nextPageToken);
        }

        /**
         * Execute listRegistrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Successfully listed meeting registrants. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  Meeting host does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsListRegistrantsResponse> _callback) throws ApiException {
            return listRegistrantsAsync(meetingId, occurrenceId, status, pageSize, pageNumber, nextPageToken, _callback);
        }
    }

    /**
     * List meeting registrants
     * A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). List users that have registered for a meeting.            **Scopes:** &#x60;meeting:read:admin&#x60;,&#x60;meeting:read&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return ListRegistrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Successfully listed meeting registrants. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;1010&#x60; &lt;br&gt;  User does not belong to this account: {accountId}.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3003&#x60; &lt;br&gt;  You are not the meeting host.&lt;br&gt; &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access meeting info. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;1001&#x60; &lt;br&gt;  Meeting host does not exist: {userId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public ListRegistrantsRequestBuilder listRegistrants(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new ListRegistrantsRequestBuilder(meetingId);
    }
    private okhttp3.Call listRegistrationQuestionsCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/registrants/questions"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRegistrationQuestionsValidateBeforeCall(Long meetingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling listRegistrationQuestions(Async)");
        }

        return listRegistrationQuestionsCall(meetingId, _callback);

    }


    private ApiResponse<MeetingsListRegistrationQuestionsResponse> listRegistrationQuestionsWithHttpInfo(Long meetingId) throws ApiException {
        okhttp3.Call localVarCall = listRegistrationQuestionsValidateBeforeCall(meetingId, null);
        Type localVarReturnType = new TypeToken<MeetingsListRegistrationQuestionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRegistrationQuestionsAsync(Long meetingId, final ApiCallback<MeetingsListRegistrationQuestionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRegistrationQuestionsValidateBeforeCall(meetingId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsListRegistrationQuestionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRegistrationQuestionsRequestBuilder {
        private final Long meetingId;

        private ListRegistrationQuestionsRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Build call for listRegistrationQuestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting Registrant Question object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRegistrationQuestionsCall(meetingId, _callback);
        }


        /**
         * Execute listRegistrationQuestions request
         * @return MeetingsListRegistrationQuestionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting Registrant Question object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsListRegistrationQuestionsResponse execute() throws ApiException {
            ApiResponse<MeetingsListRegistrationQuestionsResponse> localVarResp = listRegistrationQuestionsWithHttpInfo(meetingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRegistrationQuestions request with HTTP info returned
         * @return ApiResponse&lt;MeetingsListRegistrationQuestionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting Registrant Question object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsListRegistrationQuestionsResponse> executeWithHttpInfo() throws ApiException {
            return listRegistrationQuestionsWithHttpInfo(meetingId);
        }

        /**
         * Execute listRegistrationQuestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting Registrant Question object returned </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsListRegistrationQuestionsResponse> _callback) throws ApiException {
            return listRegistrationQuestionsAsync(meetingId, _callback);
        }
    }

    /**
     * List registration questions 
     * List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).        **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return ListRegistrationQuestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     Meeting Registrant Question object returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public ListRegistrationQuestionsRequestBuilder listRegistrationQuestions(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new ListRegistrationQuestionsRequestBuilder(meetingId);
    }
    private okhttp3.Call listUpcomingMeetingsCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/upcoming_meetings"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUpcomingMeetingsValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listUpcomingMeetings(Async)");
        }

        return listUpcomingMeetingsCall(userId, _callback);

    }


    private ApiResponse<MeetingsListUpcomingMeetingsResponse> listUpcomingMeetingsWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = listUpcomingMeetingsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<MeetingsListUpcomingMeetingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUpcomingMeetingsAsync(String userId, final ApiCallback<MeetingsListUpcomingMeetingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUpcomingMeetingsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<MeetingsListUpcomingMeetingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUpcomingMeetingsRequestBuilder {
        private final String userId;

        private ListUpcomingMeetingsRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for listUpcomingMeetings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; List of upcoming meeting objects returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUpcomingMeetingsCall(userId, _callback);
        }


        /**
         * Execute listUpcomingMeetings request
         * @return MeetingsListUpcomingMeetingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; List of upcoming meeting objects returned. </td><td>  -  </td></tr>
         </table>
         */
        public MeetingsListUpcomingMeetingsResponse execute() throws ApiException {
            ApiResponse<MeetingsListUpcomingMeetingsResponse> localVarResp = listUpcomingMeetingsWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUpcomingMeetings request with HTTP info returned
         * @return ApiResponse&lt;MeetingsListUpcomingMeetingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; List of upcoming meeting objects returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MeetingsListUpcomingMeetingsResponse> executeWithHttpInfo() throws ApiException {
            return listUpcomingMeetingsWithHttpInfo(userId);
        }

        /**
         * Execute listUpcomingMeetings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; List of upcoming meeting objects returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MeetingsListUpcomingMeetingsResponse> _callback) throws ApiException {
            return listUpcomingMeetingsAsync(userId, _callback);
        }
    }

    /**
     * List upcoming meetings
     * List a Zoom user&#39;s upcoming meetings. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the &#x60;userId&#x60; parameter.  **Note** * This API includes the meetings that Zoom users schedule and the meetings they are invited to join. * This API **only** includes upcoming meetings within the next 24 hours.  **Scopes:** &#x60;meeting:read&#x60;,&#x60;meeting:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param userId The user&#39;s user ID or email address. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword). (required)
     * @return ListUpcomingMeetingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60; List of upcoming meeting objects returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListUpcomingMeetingsRequestBuilder listUpcomingMeetings(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListUpcomingMeetingsRequestBuilder(userId);
    }
    private okhttp3.Call livestreamStatusUpdateCall(Long meetingId, MeetingsLivestreamStatusUpdateRequest meetingsLivestreamStatusUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsLivestreamStatusUpdateRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/livestream/status"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call livestreamStatusUpdateValidateBeforeCall(Long meetingId, MeetingsLivestreamStatusUpdateRequest meetingsLivestreamStatusUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling livestreamStatusUpdate(Async)");
        }

        return livestreamStatusUpdateCall(meetingId, meetingsLivestreamStatusUpdateRequest, _callback);

    }


    private ApiResponse<Void> livestreamStatusUpdateWithHttpInfo(Long meetingId, MeetingsLivestreamStatusUpdateRequest meetingsLivestreamStatusUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = livestreamStatusUpdateValidateBeforeCall(meetingId, meetingsLivestreamStatusUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call livestreamStatusUpdateAsync(Long meetingId, MeetingsLivestreamStatusUpdateRequest meetingsLivestreamStatusUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = livestreamStatusUpdateValidateBeforeCall(meetingId, meetingsLivestreamStatusUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class LivestreamStatusUpdateRequestBuilder {
        private final Long meetingId;
        private String action;
        private MeetingsLivestreamStatusUpdateRequestSettings settings;

        private LivestreamStatusUpdateRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set action
         * @param action Update the status of a live stream.  The value can be one of the following:     &#x60;start&#x60;: Start a live stream.      &#x60;stop&#x60;: Stop an ongoing live stream. (optional)
         * @return LivestreamStatusUpdateRequestBuilder
         */
        public LivestreamStatusUpdateRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return LivestreamStatusUpdateRequestBuilder
         */
        public LivestreamStatusUpdateRequestBuilder settings(MeetingsLivestreamStatusUpdateRequestSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Build call for livestreamStatusUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting livestream updated.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.&lt;br&gt;  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsLivestreamStatusUpdateRequest meetingsLivestreamStatusUpdateRequest = buildBodyParams();
            return livestreamStatusUpdateCall(meetingId, meetingsLivestreamStatusUpdateRequest, _callback);
        }

        private MeetingsLivestreamStatusUpdateRequest buildBodyParams() {
            MeetingsLivestreamStatusUpdateRequest meetingsLivestreamStatusUpdateRequest = new MeetingsLivestreamStatusUpdateRequest();
            if (this.action != null)
            meetingsLivestreamStatusUpdateRequest.action(MeetingsLivestreamStatusUpdateRequest.ActionEnum.fromValue(this.action));
            meetingsLivestreamStatusUpdateRequest.settings(this.settings);
            return meetingsLivestreamStatusUpdateRequest;
        }

        /**
         * Execute livestreamStatusUpdate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting livestream updated.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.&lt;br&gt;  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MeetingsLivestreamStatusUpdateRequest meetingsLivestreamStatusUpdateRequest = buildBodyParams();
            livestreamStatusUpdateWithHttpInfo(meetingId, meetingsLivestreamStatusUpdateRequest);
        }

        /**
         * Execute livestreamStatusUpdate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting livestream updated.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.&lt;br&gt;  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MeetingsLivestreamStatusUpdateRequest meetingsLivestreamStatusUpdateRequest = buildBodyParams();
            return livestreamStatusUpdateWithHttpInfo(meetingId, meetingsLivestreamStatusUpdateRequest);
        }

        /**
         * Execute livestreamStatusUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting livestream updated.   </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.&lt;br&gt;  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MeetingsLivestreamStatusUpdateRequest meetingsLivestreamStatusUpdateRequest = buildBodyParams();
            return livestreamStatusUpdateAsync(meetingId, meetingsLivestreamStatusUpdateRequest, _callback);
        }
    }

    /**
     * Update Live Stream Status
     * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a meeting&#39;s livestream.          **Prerequisites:**     * Meeting host must have a Pro license.       **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return LivestreamStatusUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting livestream updated.   </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.&lt;br&gt;  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.&lt;br&gt;   </td><td>  -  </td></tr>
     </table>
     */
    public LivestreamStatusUpdateRequestBuilder livestreamStatusUpdate(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new LivestreamStatusUpdateRequestBuilder(meetingId);
    }
    private okhttp3.Call pollDeleteCall(Long meetingId, String pollId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/polls/{pollId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "pollId" + "}", localVarApiClient.escapeString(pollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pollDeleteValidateBeforeCall(Long meetingId, String pollId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling pollDelete(Async)");
        }

        // verify the required parameter 'pollId' is set
        if (pollId == null) {
            throw new ApiException("Missing the required parameter 'pollId' when calling pollDelete(Async)");
        }

        return pollDeleteCall(meetingId, pollId, _callback);

    }


    private ApiResponse<Void> pollDeleteWithHttpInfo(Long meetingId, String pollId) throws ApiException {
        okhttp3.Call localVarCall = pollDeleteValidateBeforeCall(meetingId, pollId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call pollDeleteAsync(Long meetingId, String pollId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pollDeleteValidateBeforeCall(meetingId, pollId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PollDeleteRequestBuilder {
        private final Long meetingId;
        private final String pollId;

        private PollDeleteRequestBuilder(Long meetingId, String pollId) {
            this.meetingId = meetingId;
            this.pollId = pollId;
        }

        /**
         * Build call for pollDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting Poll deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pollDeleteCall(meetingId, pollId, _callback);
        }


        /**
         * Execute pollDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting Poll deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            pollDeleteWithHttpInfo(meetingId, pollId);
        }

        /**
         * Execute pollDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting Poll deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return pollDeleteWithHttpInfo(meetingId, pollId);
        }

        /**
         * Execute pollDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting Poll deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return pollDeleteAsync(meetingId, pollId, _callback);
        }
    }

    /**
     * Delete a meeting poll
     * Polls allow the meeting host to survey attendees. Delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).     **Prerequisites**:     * Host user type must be **Pro**. * Polling feature should be enabled in the host&#39;s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @param pollId The poll ID (required)
     * @return PollDeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting Poll deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
     </table>
     */
    public PollDeleteRequestBuilder pollDelete(Long meetingId, String pollId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        if (pollId == null) throw new IllegalArgumentException("\"pollId\" is required but got null");
            

        return new PollDeleteRequestBuilder(meetingId, pollId);
    }
    private okhttp3.Call removeMeetingCall(Long meetingId, String occurrenceId, Boolean scheduleForReminder, Boolean cancelMeetingReminder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        if (scheduleForReminder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schedule_for_reminder", scheduleForReminder));
        }

        if (cancelMeetingReminder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cancel_meeting_reminder", cancelMeetingReminder));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMeetingValidateBeforeCall(Long meetingId, String occurrenceId, Boolean scheduleForReminder, Boolean cancelMeetingReminder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling removeMeeting(Async)");
        }

        return removeMeetingCall(meetingId, occurrenceId, scheduleForReminder, cancelMeetingReminder, _callback);

    }


    private ApiResponse<Void> removeMeetingWithHttpInfo(Long meetingId, String occurrenceId, Boolean scheduleForReminder, Boolean cancelMeetingReminder) throws ApiException {
        okhttp3.Call localVarCall = removeMeetingValidateBeforeCall(meetingId, occurrenceId, scheduleForReminder, cancelMeetingReminder, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMeetingAsync(Long meetingId, String occurrenceId, Boolean scheduleForReminder, Boolean cancelMeetingReminder, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMeetingValidateBeforeCall(meetingId, occurrenceId, scheduleForReminder, cancelMeetingReminder, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMeetingRequestBuilder {
        private final Long meetingId;
        private String occurrenceId;
        private Boolean scheduleForReminder;
        private Boolean cancelMeetingReminder;

        private RemoveMeetingRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set occurrenceId
         * @param occurrenceId The meeting or webinar occurrence ID. (optional)
         * @return RemoveMeetingRequestBuilder
         */
        public RemoveMeetingRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Set scheduleForReminder
         * @param scheduleForReminder &#x60;true&#x60;: Notify host and alternative host about the meeting cancellation via email. &#x60;false&#x60;: Do not send any email notification. (optional)
         * @return RemoveMeetingRequestBuilder
         */
        public RemoveMeetingRequestBuilder scheduleForReminder(Boolean scheduleForReminder) {
            this.scheduleForReminder = scheduleForReminder;
            return this;
        }
        
        /**
         * Set cancelMeetingReminder
         * @param cancelMeetingReminder &#x60;true&#x60;: Notify registrants about the meeting cancellation via email.   &#x60;false&#x60;: Do not send any email notification to meeting registrants.   The default value of this field is &#x60;false&#x60;. (optional)
         * @return RemoveMeetingRequestBuilder
         */
        public RemoveMeetingRequestBuilder cancelMeetingReminder(Boolean cancelMeetingReminder) {
            this.cancelMeetingReminder = cancelMeetingReminder;
            return this;
        }
        
        /**
         * Build call for removeMeeting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code**: &#x60;204&#x60;      Meeting deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.&lt;br&gt;Invalid occurrence_id.&lt;br&gt;  **Error Code:** &#x60;3002&#x60; &lt;br&gt; Sorry, you cannot delete this meeting since it is in progress.&lt;br&gt;  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You are not the meeting host.&lt;br&gt;  **Error Code:** &#x60;3007&#x60; &lt;br&gt; Sorry, you cannot delete this meeting since it has ended.&lt;br&gt;  **Error Code:** &#x60;3018&#x60; &lt;br&gt; Not allowed to delete PMI.&lt;br&gt;  **Error Code:** &#x60;3037&#x60; &lt;br&gt; Not allowed to delete PAC.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting with this {meetingId} is not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMeetingCall(meetingId, occurrenceId, scheduleForReminder, cancelMeetingReminder, _callback);
        }


        /**
         * Execute removeMeeting request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code**: &#x60;204&#x60;      Meeting deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.&lt;br&gt;Invalid occurrence_id.&lt;br&gt;  **Error Code:** &#x60;3002&#x60; &lt;br&gt; Sorry, you cannot delete this meeting since it is in progress.&lt;br&gt;  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You are not the meeting host.&lt;br&gt;  **Error Code:** &#x60;3007&#x60; &lt;br&gt; Sorry, you cannot delete this meeting since it has ended.&lt;br&gt;  **Error Code:** &#x60;3018&#x60; &lt;br&gt; Not allowed to delete PMI.&lt;br&gt;  **Error Code:** &#x60;3037&#x60; &lt;br&gt; Not allowed to delete PAC.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting with this {meetingId} is not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeMeetingWithHttpInfo(meetingId, occurrenceId, scheduleForReminder, cancelMeetingReminder);
        }

        /**
         * Execute removeMeeting request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code**: &#x60;204&#x60;      Meeting deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.&lt;br&gt;Invalid occurrence_id.&lt;br&gt;  **Error Code:** &#x60;3002&#x60; &lt;br&gt; Sorry, you cannot delete this meeting since it is in progress.&lt;br&gt;  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You are not the meeting host.&lt;br&gt;  **Error Code:** &#x60;3007&#x60; &lt;br&gt; Sorry, you cannot delete this meeting since it has ended.&lt;br&gt;  **Error Code:** &#x60;3018&#x60; &lt;br&gt; Not allowed to delete PMI.&lt;br&gt;  **Error Code:** &#x60;3037&#x60; &lt;br&gt; Not allowed to delete PAC.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting with this {meetingId} is not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeMeetingWithHttpInfo(meetingId, occurrenceId, scheduleForReminder, cancelMeetingReminder);
        }

        /**
         * Execute removeMeeting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code**: &#x60;204&#x60;      Meeting deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.&lt;br&gt;Invalid occurrence_id.&lt;br&gt;  **Error Code:** &#x60;3002&#x60; &lt;br&gt; Sorry, you cannot delete this meeting since it is in progress.&lt;br&gt;  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You are not the meeting host.&lt;br&gt;  **Error Code:** &#x60;3007&#x60; &lt;br&gt; Sorry, you cannot delete this meeting since it has ended.&lt;br&gt;  **Error Code:** &#x60;3018&#x60; &lt;br&gt; Not allowed to delete PMI.&lt;br&gt;  **Error Code:** &#x60;3037&#x60; &lt;br&gt; Not allowed to delete PAC.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting with this {meetingId} is not found or has expired.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeMeetingAsync(meetingId, occurrenceId, scheduleForReminder, cancelMeetingReminder, _callback);
        }
    }

    /**
     * Delete a meeting
     * Delete a meeting.            **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return RemoveMeetingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code**: &#x60;204&#x60;      Meeting deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.&lt;br&gt;Invalid occurrence_id.&lt;br&gt;  **Error Code:** &#x60;3002&#x60; &lt;br&gt; Sorry, you cannot delete this meeting since it is in progress.&lt;br&gt;  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You are not the meeting host.&lt;br&gt;  **Error Code:** &#x60;3007&#x60; &lt;br&gt; Sorry, you cannot delete this meeting since it has ended.&lt;br&gt;  **Error Code:** &#x60;3018&#x60; &lt;br&gt; Not allowed to delete PMI.&lt;br&gt;  **Error Code:** &#x60;3037&#x60; &lt;br&gt; Not allowed to delete PAC.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;  **Error Code:** &#x60;3001&#x60; &lt;br&gt; Meeting with this {meetingId} is not found or has expired.   </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMeetingRequestBuilder removeMeeting(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new RemoveMeetingRequestBuilder(meetingId);
    }
    private okhttp3.Call updateDetailsCall(Long meetingId, String occurrenceId, MeetingsUpdateDetailsRequest meetingsUpdateDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsUpdateDetailsRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDetailsValidateBeforeCall(Long meetingId, String occurrenceId, MeetingsUpdateDetailsRequest meetingsUpdateDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling updateDetails(Async)");
        }

        return updateDetailsCall(meetingId, occurrenceId, meetingsUpdateDetailsRequest, _callback);

    }


    private ApiResponse<Void> updateDetailsWithHttpInfo(Long meetingId, String occurrenceId, MeetingsUpdateDetailsRequest meetingsUpdateDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(meetingId, occurrenceId, meetingsUpdateDetailsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDetailsAsync(Long meetingId, String occurrenceId, MeetingsUpdateDetailsRequest meetingsUpdateDetailsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(meetingId, occurrenceId, meetingsUpdateDetailsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDetailsRequestBuilder {
        private final Long meetingId;
        private String agenda;
        private Integer duration;
        private String password;
        private Boolean preSchedule;
        private String scheduleFor;
        private MeetingsUpdateDetailsRequestRecurrence recurrence;
        private MeetingsUpdateDetailsRequestSettings settings;
        private OffsetDateTime startTime;
        private String templateId;
        private String timezone;
        private String topic;
        private List<MeetingsUpdateDetailsRequestTrackingFieldsInner> trackingFields;
        private Integer type;
        private String occurrenceId;

        private UpdateDetailsRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set agenda
         * @param agenda Meeting description. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder agenda(String agenda) {
            this.agenda = agenda;
            return this;
        }
        
        /**
         * Set duration
         * @param duration Meeting duration in minutes. Used for scheduled meetings only. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder duration(Integer duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set password
         * @param password Meeting passcode. Passcodes may only contain these characters [a-z A-Z 0-9 @ - _ *] and can have a maximum of 10 characters.  **Note** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements.         If the requirements are enabled, view those requirements by calling either the [**Get user settings**](https://developers.zoom.us) API or the [**Get account settings**](https://developers.zoom.us) API. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set preSchedule
         * @param preSchedule Whether to create a prescheduled meeting through the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting &#x60;type&#x60; value of &#x60;2&#x60; - scheduled meetings- and &#x60;3&#x60; - recurring meetings with no fixed time.  * &#x60;true&#x60; - Create a prescheduled meeting.  * &#x60;false&#x60; - Create a regular meeting. (optional, default to false)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder preSchedule(Boolean preSchedule) {
            this.preSchedule = preSchedule;
            return this;
        }
        
        /**
         * Set scheduleFor
         * @param scheduleFor The email address or &#x60;userId&#x60; of the user to schedule a meeting for. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder scheduleFor(String scheduleFor) {
            this.scheduleFor = scheduleFor;
            return this;
        }
        
        /**
         * Set recurrence
         * @param recurrence  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder recurrence(MeetingsUpdateDetailsRequestRecurrence recurrence) {
            this.recurrence = recurrence;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder settings(MeetingsUpdateDetailsRequestSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime Meeting start time. When using a format like &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;&#x60;, always use GMT time. When using a format like &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#x60;, use local time and specify the time zone. Only used for scheduled meetings and recurring meetings with a fixed time. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder startTime(OffsetDateTime startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set templateId
         * @param templateId Unique identifier of the meeting template.   [Schedule the meeting from a meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates#h_86f06cff-0852-4998-81c5-c83663c176fb). Retrieve this field&#39;s value by calling the [List meeting templates](https://developers.zoom.us/docs/api/rest/reference/zoom-api/methods/#operation/listMeetingTemplates) API. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder templateId(String templateId) {
            this.templateId = templateId;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone The timezone to assign to the &#x60;start_time&#x60; value. Only use this field ifor scheduled or recurring meetings with a fixed time.  For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones). (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set topic
         * @param topic Meeting topic. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder topic(String topic) {
            this.topic = topic;
            return this;
        }
        
        /**
         * Set trackingFields
         * @param trackingFields Tracking fields. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder trackingFields(List<MeetingsUpdateDetailsRequestTrackingFieldsInner> trackingFields) {
            this.trackingFields = trackingFields;
            return this;
        }
        
        /**
         * Set type
         * @param type Meeting types.  &#x60;1&#x60; - Instant meeting.    &#x60;2&#x60; - Scheduled meeting.    &#x60;3&#x60; - Recurring meeting with no fixed time.    &#x60;8&#x60; - Recurring meeting with a fixed time. (optional, default to 2)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder type(Integer type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set occurrenceId
         * @param occurrenceId Meeting occurrence ID. Support change of agenda, &#x60;start_time&#x60;, duration, or settings {&#x60;host_video&#x60;, &#x60;participant_video&#x60;, &#x60;join_before_host&#x60;, &#x60;mute_upon_entry&#x60;, &#x60;waiting_room&#x60;, &#x60;watermark&#x60;, &#x60;auto_recording&#x60;}. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Build call for updateDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered in the &#x60;schedule_for&#x60; field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid &#x60;enforce_login_domains&#x60;. Separate multiple domains with semicolons. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access webinar info. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Instant meetings do not support the &#x60;schedule_for&#x60; parameter, and you can&#39;t schedule an instant meeting for another user. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Users in &#39;{userId}&#39; have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Prescheduling is only available for scheduled meetings (type 2) and recurring meetings with no fixed time (type 3). &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Unable to schedule for a user outside of your account for a meeting with continuous chat. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests      </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsUpdateDetailsRequest meetingsUpdateDetailsRequest = buildBodyParams();
            return updateDetailsCall(meetingId, occurrenceId, meetingsUpdateDetailsRequest, _callback);
        }

        private MeetingsUpdateDetailsRequest buildBodyParams() {
            MeetingsUpdateDetailsRequest meetingsUpdateDetailsRequest = new MeetingsUpdateDetailsRequest();
            meetingsUpdateDetailsRequest.agenda(this.agenda);
            meetingsUpdateDetailsRequest.duration(this.duration);
            meetingsUpdateDetailsRequest.password(this.password);
            meetingsUpdateDetailsRequest.preSchedule(this.preSchedule);
            meetingsUpdateDetailsRequest.scheduleFor(this.scheduleFor);
            meetingsUpdateDetailsRequest.recurrence(this.recurrence);
            meetingsUpdateDetailsRequest.settings(this.settings);
            meetingsUpdateDetailsRequest.startTime(this.startTime);
            meetingsUpdateDetailsRequest.templateId(this.templateId);
            meetingsUpdateDetailsRequest.timezone(this.timezone);
            meetingsUpdateDetailsRequest.topic(this.topic);
            meetingsUpdateDetailsRequest.trackingFields(this.trackingFields);
            if (this.type != null)
            meetingsUpdateDetailsRequest.type(MeetingsUpdateDetailsRequest.TypeEnum.fromValue(this.type));
            return meetingsUpdateDetailsRequest;
        }

        /**
         * Execute updateDetails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered in the &#x60;schedule_for&#x60; field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid &#x60;enforce_login_domains&#x60;. Separate multiple domains with semicolons. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access webinar info. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Instant meetings do not support the &#x60;schedule_for&#x60; parameter, and you can&#39;t schedule an instant meeting for another user. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Users in &#39;{userId}&#39; have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Prescheduling is only available for scheduled meetings (type 2) and recurring meetings with no fixed time (type 3). &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Unable to schedule for a user outside of your account for a meeting with continuous chat. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests      </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MeetingsUpdateDetailsRequest meetingsUpdateDetailsRequest = buildBodyParams();
            updateDetailsWithHttpInfo(meetingId, occurrenceId, meetingsUpdateDetailsRequest);
        }

        /**
         * Execute updateDetails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered in the &#x60;schedule_for&#x60; field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid &#x60;enforce_login_domains&#x60;. Separate multiple domains with semicolons. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access webinar info. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Instant meetings do not support the &#x60;schedule_for&#x60; parameter, and you can&#39;t schedule an instant meeting for another user. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Users in &#39;{userId}&#39; have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Prescheduling is only available for scheduled meetings (type 2) and recurring meetings with no fixed time (type 3). &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Unable to schedule for a user outside of your account for a meeting with continuous chat. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests      </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MeetingsUpdateDetailsRequest meetingsUpdateDetailsRequest = buildBodyParams();
            return updateDetailsWithHttpInfo(meetingId, occurrenceId, meetingsUpdateDetailsRequest);
        }

        /**
         * Execute updateDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered in the &#x60;schedule_for&#x60; field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid &#x60;enforce_login_domains&#x60;. Separate multiple domains with semicolons. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access webinar info. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Instant meetings do not support the &#x60;schedule_for&#x60; parameter, and you can&#39;t schedule an instant meeting for another user. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Users in &#39;{userId}&#39; have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Prescheduling is only available for scheduled meetings (type 2) and recurring meetings with no fixed time (type 3). &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Unable to schedule for a user outside of your account for a meeting with continuous chat. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests      </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MeetingsUpdateDetailsRequest meetingsUpdateDetailsRequest = buildBodyParams();
            return updateDetailsAsync(meetingId, occurrenceId, meetingsUpdateDetailsRequest, _callback);
        }
    }

    /**
     * Update a meeting
     * Update meeting details.  **Note**  * The &#x60;start_time&#x60; value **must** be a future date. If the value is omitted or a date is in the past, the API ignores this value and does **not** update any recurring meetings.  * The &#x60;recurrence&#x60; object is **required**. * This API has a rate limit of **100 requests per day**. You can update a meeting for a maximum of **100 times within a 24-hour period**.      **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be greater than 10 digits. (required)
     * @return UpdateDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request     **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Your user account is not allowed meeting hosting and scheduling capabilities. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  The value that you entered in the &#x60;schedule_for&#x60; field is invalid. Enter a valid value and try again. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid &#x60;enforce_login_domains&#x60;. Separate multiple domains with semicolons. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access webinar info. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Instant meetings do not support the &#x60;schedule_for&#x60; parameter, and you can&#39;t schedule an instant meeting for another user. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Users in &#39;{userId}&#39; have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  You cannot schedule a meeting for {userId} &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Prescheduling is only available for scheduled meetings (type 2) and recurring meetings with no fixed time (type 3). &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Unable to schedule for a user outside of your account for a meeting with continuous chat. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found     **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **HTTP Status Code:** &#x60;429&#x60; &lt;br&gt;  Too Many Requests      </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDetailsRequestBuilder updateDetails(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new UpdateDetailsRequestBuilder(meetingId);
    }
    private okhttp3.Call updateLivestreamCall(Long meetingId, MeetingsUpdateLivestreamRequest meetingsUpdateLivestreamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsUpdateLivestreamRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/livestream"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLivestreamValidateBeforeCall(Long meetingId, MeetingsUpdateLivestreamRequest meetingsUpdateLivestreamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling updateLivestream(Async)");
        }

        return updateLivestreamCall(meetingId, meetingsUpdateLivestreamRequest, _callback);

    }


    private ApiResponse<Void> updateLivestreamWithHttpInfo(Long meetingId, MeetingsUpdateLivestreamRequest meetingsUpdateLivestreamRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLivestreamValidateBeforeCall(meetingId, meetingsUpdateLivestreamRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLivestreamAsync(Long meetingId, MeetingsUpdateLivestreamRequest meetingsUpdateLivestreamRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLivestreamValidateBeforeCall(meetingId, meetingsUpdateLivestreamRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLivestreamRequestBuilder {
        private final URI pageUrl;
        private final String streamKey;
        private final String streamUrl;
        private final Long meetingId;
        private String resolution;

        private UpdateLivestreamRequestBuilder(URI pageUrl, String streamKey, String streamUrl, Long meetingId) {
            this.pageUrl = pageUrl;
            this.streamKey = streamKey;
            this.streamUrl = streamUrl;
            this.meetingId = meetingId;
        }

        /**
         * Set resolution
         * @param resolution The number of pixels in each dimension that the video camera can display, required when a user enables 1080p. Use a value of &#x60;720p&#x60; or &#x60;1080p&#x60; (optional)
         * @return UpdateLivestreamRequestBuilder
         */
        public UpdateLivestreamRequestBuilder resolution(String resolution) {
            this.resolution = resolution;
            return this;
        }
        
        /**
         * Build call for updateLivestream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting livestream updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsUpdateLivestreamRequest meetingsUpdateLivestreamRequest = buildBodyParams();
            return updateLivestreamCall(meetingId, meetingsUpdateLivestreamRequest, _callback);
        }

        private MeetingsUpdateLivestreamRequest buildBodyParams() {
            MeetingsUpdateLivestreamRequest meetingsUpdateLivestreamRequest = new MeetingsUpdateLivestreamRequest();
            meetingsUpdateLivestreamRequest.pageUrl(this.pageUrl);
            meetingsUpdateLivestreamRequest.streamKey(this.streamKey);
            meetingsUpdateLivestreamRequest.streamUrl(this.streamUrl);
            meetingsUpdateLivestreamRequest.resolution(this.resolution);
            return meetingsUpdateLivestreamRequest;
        }

        /**
         * Execute updateLivestream request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting livestream updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MeetingsUpdateLivestreamRequest meetingsUpdateLivestreamRequest = buildBodyParams();
            updateLivestreamWithHttpInfo(meetingId, meetingsUpdateLivestreamRequest);
        }

        /**
         * Execute updateLivestream request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting livestream updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MeetingsUpdateLivestreamRequest meetingsUpdateLivestreamRequest = buildBodyParams();
            return updateLivestreamWithHttpInfo(meetingId, meetingsUpdateLivestreamRequest);
        }

        /**
         * Execute updateLivestream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting livestream updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MeetingsUpdateLivestreamRequest meetingsUpdateLivestreamRequest = buildBodyParams();
            return updateLivestreamAsync(meetingId, meetingsUpdateLivestreamRequest, _callback);
        }
    }

    /**
     * Update a livestream
     * Update a meeting&#39;s livestream information. Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.  **Prerequisites:**  * Meeting host must have a Pro license.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return UpdateLivestreamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting livestream updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access webinar info.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User {userId} does not exist.   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLivestreamRequestBuilder updateLivestream(URI pageUrl, String streamKey, String streamUrl, Long meetingId) throws IllegalArgumentException {
        if (pageUrl == null) throw new IllegalArgumentException("\"pageUrl\" is required but got null");
            

        if (streamKey == null) throw new IllegalArgumentException("\"streamKey\" is required but got null");
            

        if (streamUrl == null) throw new IllegalArgumentException("\"streamUrl\" is required but got null");
            

        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new UpdateLivestreamRequestBuilder(pageUrl, streamKey, streamUrl, meetingId);
    }
    private okhttp3.Call updateMeetingPollCall(Long meetingId, String pollId, MeetingsUpdateMeetingPollRequest meetingsUpdateMeetingPollRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsUpdateMeetingPollRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/polls/{pollId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "pollId" + "}", localVarApiClient.escapeString(pollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeetingPollValidateBeforeCall(Long meetingId, String pollId, MeetingsUpdateMeetingPollRequest meetingsUpdateMeetingPollRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling updateMeetingPoll(Async)");
        }

        // verify the required parameter 'pollId' is set
        if (pollId == null) {
            throw new ApiException("Missing the required parameter 'pollId' when calling updateMeetingPoll(Async)");
        }

        return updateMeetingPollCall(meetingId, pollId, meetingsUpdateMeetingPollRequest, _callback);

    }


    private ApiResponse<Void> updateMeetingPollWithHttpInfo(Long meetingId, String pollId, MeetingsUpdateMeetingPollRequest meetingsUpdateMeetingPollRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMeetingPollValidateBeforeCall(meetingId, pollId, meetingsUpdateMeetingPollRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMeetingPollAsync(Long meetingId, String pollId, MeetingsUpdateMeetingPollRequest meetingsUpdateMeetingPollRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeetingPollValidateBeforeCall(meetingId, pollId, meetingsUpdateMeetingPollRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMeetingPollRequestBuilder {
        private final Long meetingId;
        private final String pollId;
        private String title;
        private Boolean anonymous;
        private Integer pollType;
        private List<MeetingsUpdateMeetingPollRequestQuestionsInner> questions;

        private UpdateMeetingPollRequestBuilder(Long meetingId, String pollId) {
            this.meetingId = meetingId;
            this.pollId = pollId;
        }

        /**
         * Set title
         * @param title The poll&#39;s title, up to 64 characters. (optional)
         * @return UpdateMeetingPollRequestBuilder
         */
        public UpdateMeetingPollRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set anonymous
         * @param anonymous Allow meeting participants to answer poll questions anonymously.   This value defaults to &#x60;false&#x60;. (optional, default to false)
         * @return UpdateMeetingPollRequestBuilder
         */
        public UpdateMeetingPollRequestBuilder anonymous(Boolean anonymous) {
            this.anonymous = anonymous;
            return this;
        }
        
        /**
         * Set pollType
         * @param pollType The type of poll:  * &#x60;1&#x60; &amp;mdash; Poll.  * &#x60;2&#x60; &amp;mdash; Advanced Poll. This feature must be enabled in your Zoom account.  * &#x60;3&#x60; &amp;mdash; Quiz. This feature must be enabled in your Zoom account.    This value defaults to &#x60;1&#x60;. (optional)
         * @return UpdateMeetingPollRequestBuilder
         */
        public UpdateMeetingPollRequestBuilder pollType(Integer pollType) {
            this.pollType = pollType;
            return this;
        }
        
        /**
         * Set questions
         * @param questions Information about the poll&#39;s questions. (optional)
         * @return UpdateMeetingPollRequestBuilder
         */
        public UpdateMeetingPollRequestBuilder questions(List<MeetingsUpdateMeetingPollRequestQuestionsInner> questions) {
            this.questions = questions;
            return this;
        }
        
        /**
         * Build call for updateMeetingPoll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting Poll Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsUpdateMeetingPollRequest meetingsUpdateMeetingPollRequest = buildBodyParams();
            return updateMeetingPollCall(meetingId, pollId, meetingsUpdateMeetingPollRequest, _callback);
        }

        private MeetingsUpdateMeetingPollRequest buildBodyParams() {
            MeetingsUpdateMeetingPollRequest meetingsUpdateMeetingPollRequest = new MeetingsUpdateMeetingPollRequest();
            meetingsUpdateMeetingPollRequest.title(this.title);
            meetingsUpdateMeetingPollRequest.anonymous(this.anonymous);
            if (this.pollType != null)
            meetingsUpdateMeetingPollRequest.pollType(MeetingsUpdateMeetingPollRequest.PollTypeEnum.fromValue(this.pollType));
            meetingsUpdateMeetingPollRequest.questions(this.questions);
            return meetingsUpdateMeetingPollRequest;
        }

        /**
         * Execute updateMeetingPoll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting Poll Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MeetingsUpdateMeetingPollRequest meetingsUpdateMeetingPollRequest = buildBodyParams();
            updateMeetingPollWithHttpInfo(meetingId, pollId, meetingsUpdateMeetingPollRequest);
        }

        /**
         * Execute updateMeetingPoll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting Poll Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MeetingsUpdateMeetingPollRequest meetingsUpdateMeetingPollRequest = buildBodyParams();
            return updateMeetingPollWithHttpInfo(meetingId, pollId, meetingsUpdateMeetingPollRequest);
        }

        /**
         * Execute updateMeetingPoll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting Poll Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MeetingsUpdateMeetingPollRequest meetingsUpdateMeetingPollRequest = buildBodyParams();
            return updateMeetingPollAsync(meetingId, pollId, meetingsUpdateMeetingPollRequest, _callback);
        }
    }

    /**
     * Update a meeting poll
     * Polls allow the meeting host to survey attendees. Update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)            **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @param pollId The poll ID (required)
     * @return UpdateMeetingPollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;      Meeting Poll Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;4400&#x60; &lt;br&gt; * Meeting polls disabled. To enable this feature, enable the \&quot;Meeting Polls/Quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  * Advanced meeting polls disabled. To enable this feature, enable the \&quot;Allow host to create advanced polls and quizzes\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;404&#x60; &lt;br&gt; Meeting Poll not found   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMeetingPollRequestBuilder updateMeetingPoll(Long meetingId, String pollId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        if (pollId == null) throw new IllegalArgumentException("\"pollId\" is required but got null");
            

        return new UpdateMeetingPollRequestBuilder(meetingId, pollId);
    }
    private okhttp3.Call updateMeetingStatusCall(Long meetingId, MeetingsUpdateMeetingStatusRequest meetingsUpdateMeetingStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsUpdateMeetingStatusRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/status"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeetingStatusValidateBeforeCall(Long meetingId, MeetingsUpdateMeetingStatusRequest meetingsUpdateMeetingStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling updateMeetingStatus(Async)");
        }

        return updateMeetingStatusCall(meetingId, meetingsUpdateMeetingStatusRequest, _callback);

    }


    private ApiResponse<Void> updateMeetingStatusWithHttpInfo(Long meetingId, MeetingsUpdateMeetingStatusRequest meetingsUpdateMeetingStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMeetingStatusValidateBeforeCall(meetingId, meetingsUpdateMeetingStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMeetingStatusAsync(Long meetingId, MeetingsUpdateMeetingStatusRequest meetingsUpdateMeetingStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeetingStatusValidateBeforeCall(meetingId, meetingsUpdateMeetingStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMeetingStatusRequestBuilder {
        private final Long meetingId;
        private String action;

        private UpdateMeetingStatusRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set action
         * @param action &#x60;end&#x60; - End a meeting.     &#x60;recover&#x60; - [Recover](https://support.zoom.us/hc/en-us/articles/360038297111-Recover-a-deleted-meeting) a deleted meeting.  (optional)
         * @return UpdateMeetingStatusRequestBuilder
         */
        public UpdateMeetingStatusRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Build call for updateMeetingStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting info.  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You&#39;re not the meeting host.  **Error Code:** &#x60;3063&#x60; &lt;br&gt; Can not end on-premise user&#39;s meeting: {meetingId}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; Meeting host does not exist: {userId}.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsUpdateMeetingStatusRequest meetingsUpdateMeetingStatusRequest = buildBodyParams();
            return updateMeetingStatusCall(meetingId, meetingsUpdateMeetingStatusRequest, _callback);
        }

        private MeetingsUpdateMeetingStatusRequest buildBodyParams() {
            MeetingsUpdateMeetingStatusRequest meetingsUpdateMeetingStatusRequest = new MeetingsUpdateMeetingStatusRequest();
            if (this.action != null)
            meetingsUpdateMeetingStatusRequest.action(MeetingsUpdateMeetingStatusRequest.ActionEnum.fromValue(this.action));
            return meetingsUpdateMeetingStatusRequest;
        }

        /**
         * Execute updateMeetingStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting info.  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You&#39;re not the meeting host.  **Error Code:** &#x60;3063&#x60; &lt;br&gt; Can not end on-premise user&#39;s meeting: {meetingId}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; Meeting host does not exist: {userId}.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MeetingsUpdateMeetingStatusRequest meetingsUpdateMeetingStatusRequest = buildBodyParams();
            updateMeetingStatusWithHttpInfo(meetingId, meetingsUpdateMeetingStatusRequest);
        }

        /**
         * Execute updateMeetingStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting info.  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You&#39;re not the meeting host.  **Error Code:** &#x60;3063&#x60; &lt;br&gt; Can not end on-premise user&#39;s meeting: {meetingId}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; Meeting host does not exist: {userId}.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MeetingsUpdateMeetingStatusRequest meetingsUpdateMeetingStatusRequest = buildBodyParams();
            return updateMeetingStatusWithHttpInfo(meetingId, meetingsUpdateMeetingStatusRequest);
        }

        /**
         * Execute updateMeetingStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting info.  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You&#39;re not the meeting host.  **Error Code:** &#x60;3063&#x60; &lt;br&gt; Can not end on-premise user&#39;s meeting: {meetingId}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; Meeting host does not exist: {userId}.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MeetingsUpdateMeetingStatusRequest meetingsUpdateMeetingStatusRequest = buildBodyParams();
            return updateMeetingStatusAsync(meetingId, meetingsUpdateMeetingStatusRequest, _callback);
        }
    }

    /**
     * Update meeting status
     * Update the status of a meeting.            **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return UpdateMeetingStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting info.  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You&#39;re not the meeting host.  **Error Code:** &#x60;3063&#x60; &lt;br&gt; Can not end on-premise user&#39;s meeting: {meetingId}.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; Meeting host does not exist: {userId}.   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMeetingStatusRequestBuilder updateMeetingStatus(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new UpdateMeetingStatusRequestBuilder(meetingId);
    }
    private okhttp3.Call updateMessageCall(Long meetingId, String messageId, MeetingsUpdateMessageRequest meetingsUpdateMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsUpdateMessageRequest;

        // create path and map variables
        String localVarPath = "/live_meetings/{meetingId}/chat/messages/{messageId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMessageValidateBeforeCall(Long meetingId, String messageId, MeetingsUpdateMessageRequest meetingsUpdateMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling updateMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateMessage(Async)");
        }

        return updateMessageCall(meetingId, messageId, meetingsUpdateMessageRequest, _callback);

    }


    private ApiResponse<Void> updateMessageWithHttpInfo(Long meetingId, String messageId, MeetingsUpdateMessageRequest meetingsUpdateMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMessageValidateBeforeCall(meetingId, messageId, meetingsUpdateMessageRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMessageAsync(Long meetingId, String messageId, MeetingsUpdateMessageRequest meetingsUpdateMessageRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMessageValidateBeforeCall(meetingId, messageId, meetingsUpdateMessageRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMessageRequestBuilder {
        private final String messageContent;
        private final Long meetingId;
        private final String messageId;

        private UpdateMessageRequestBuilder(String messageContent, Long meetingId, String messageId) {
            this.messageContent = messageContent;
            this.meetingId = meetingId;
            this.messageId = messageId;
        }

        /**
         * Build call for updateMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Meeting chat message updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  DLP is not enabled on this account &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsUpdateMessageRequest meetingsUpdateMessageRequest = buildBodyParams();
            return updateMessageCall(meetingId, messageId, meetingsUpdateMessageRequest, _callback);
        }

        private MeetingsUpdateMessageRequest buildBodyParams() {
            MeetingsUpdateMessageRequest meetingsUpdateMessageRequest = new MeetingsUpdateMessageRequest();
            meetingsUpdateMessageRequest.messageContent(this.messageContent);
            return meetingsUpdateMessageRequest;
        }

        /**
         * Execute updateMessage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Meeting chat message updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  DLP is not enabled on this account &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MeetingsUpdateMessageRequest meetingsUpdateMessageRequest = buildBodyParams();
            updateMessageWithHttpInfo(meetingId, messageId, meetingsUpdateMessageRequest);
        }

        /**
         * Execute updateMessage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Meeting chat message updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  DLP is not enabled on this account &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MeetingsUpdateMessageRequest meetingsUpdateMessageRequest = buildBodyParams();
            return updateMessageWithHttpInfo(meetingId, messageId, meetingsUpdateMessageRequest);
        }

        /**
         * Execute updateMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Meeting chat message updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  DLP is not enabled on this account &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MeetingsUpdateMessageRequest meetingsUpdateMessageRequest = buildBodyParams();
            return updateMessageAsync(meetingId, messageId, meetingsUpdateMessageRequest, _callback);
        }
    }

    /**
     * Update a live meeting message
     * Update a message in a live meeting, based on ID. **Prerequisites:** * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;MEDIUM&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @param messageId The live meeting chat message&#39;s unique identifier (UUID), in base64-encoded format. (required)
     * @return UpdateMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60; &lt;br&gt;  Meeting chat message updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  DLP is not enabled on this account &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting {meetingId} does not exist. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMessageRequestBuilder updateMessage(String messageContent, Long meetingId, String messageId) throws IllegalArgumentException {
        if (messageContent == null) throw new IllegalArgumentException("\"messageContent\" is required but got null");
            

        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        if (messageId == null) throw new IllegalArgumentException("\"messageId\" is required but got null");
            

        return new UpdateMessageRequestBuilder(messageContent, meetingId, messageId);
    }
    private okhttp3.Call updateRegistrantStatusCall(Long meetingId, String occurrenceId, MeetingsUpdateRegistrantStatusRequest meetingsUpdateRegistrantStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsUpdateRegistrantStatusRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/registrants/status"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurrenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurrence_id", occurrenceId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegistrantStatusValidateBeforeCall(Long meetingId, String occurrenceId, MeetingsUpdateRegistrantStatusRequest meetingsUpdateRegistrantStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling updateRegistrantStatus(Async)");
        }

        return updateRegistrantStatusCall(meetingId, occurrenceId, meetingsUpdateRegistrantStatusRequest, _callback);

    }


    private ApiResponse<Void> updateRegistrantStatusWithHttpInfo(Long meetingId, String occurrenceId, MeetingsUpdateRegistrantStatusRequest meetingsUpdateRegistrantStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRegistrantStatusValidateBeforeCall(meetingId, occurrenceId, meetingsUpdateRegistrantStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRegistrantStatusAsync(Long meetingId, String occurrenceId, MeetingsUpdateRegistrantStatusRequest meetingsUpdateRegistrantStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegistrantStatusValidateBeforeCall(meetingId, occurrenceId, meetingsUpdateRegistrantStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRegistrantStatusRequestBuilder {
        private final String action;
        private final Long meetingId;
        private List<MeetingsUpdateRegistrantStatusRequestRegistrantsInner> registrants;
        private String occurrenceId;

        private UpdateRegistrantStatusRequestBuilder(String action, Long meetingId) {
            this.action = action;
            this.meetingId = meetingId;
        }

        /**
         * Set registrants
         * @param registrants List of registrants. (optional)
         * @return UpdateRegistrantStatusRequestBuilder
         */
        public UpdateRegistrantStatusRequestBuilder registrants(List<MeetingsUpdateRegistrantStatusRequestRegistrantsInner> registrants) {
            this.registrants = registrants;
            return this;
        }
        
        /**
         * Set occurrenceId
         * @param occurrenceId The meeting or webinar occurrence ID. (optional)
         * @return UpdateRegistrantStatusRequestBuilder
         */
        public UpdateRegistrantStatusRequestBuilder occurrenceId(String occurrenceId) {
            this.occurrenceId = occurrenceId;
            return this;
        }
        
        /**
         * Build call for updateRegistrantStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.&lt;br&gt;  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You&#39;re not the meeting host.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsUpdateRegistrantStatusRequest meetingsUpdateRegistrantStatusRequest = buildBodyParams();
            return updateRegistrantStatusCall(meetingId, occurrenceId, meetingsUpdateRegistrantStatusRequest, _callback);
        }

        private MeetingsUpdateRegistrantStatusRequest buildBodyParams() {
            MeetingsUpdateRegistrantStatusRequest meetingsUpdateRegistrantStatusRequest = new MeetingsUpdateRegistrantStatusRequest();
            if (this.action != null)
            meetingsUpdateRegistrantStatusRequest.action(MeetingsUpdateRegistrantStatusRequest.ActionEnum.fromValue(this.action));
            meetingsUpdateRegistrantStatusRequest.registrants(this.registrants);
            return meetingsUpdateRegistrantStatusRequest;
        }

        /**
         * Execute updateRegistrantStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.&lt;br&gt;  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You&#39;re not the meeting host.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MeetingsUpdateRegistrantStatusRequest meetingsUpdateRegistrantStatusRequest = buildBodyParams();
            updateRegistrantStatusWithHttpInfo(meetingId, occurrenceId, meetingsUpdateRegistrantStatusRequest);
        }

        /**
         * Execute updateRegistrantStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.&lt;br&gt;  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You&#39;re not the meeting host.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MeetingsUpdateRegistrantStatusRequest meetingsUpdateRegistrantStatusRequest = buildBodyParams();
            return updateRegistrantStatusWithHttpInfo(meetingId, occurrenceId, meetingsUpdateRegistrantStatusRequest);
        }

        /**
         * Execute updateRegistrantStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Registrant status updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.&lt;br&gt;  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You&#39;re not the meeting host.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MeetingsUpdateRegistrantStatusRequest meetingsUpdateRegistrantStatusRequest = buildBodyParams();
            return updateRegistrantStatusAsync(meetingId, occurrenceId, meetingsUpdateRegistrantStatusRequest, _callback);
        }
    }

    /**
     * Update registrant&#39;s status
     * Update a meeting registrant&#39;s status by either approving, cancelling or denying a registrant from joining the meeting.            **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return UpdateRegistrantStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Registrant status updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;1010&#x60; &lt;br&gt; User does not belong to this account: {accountId}.&lt;br&gt;  **Error Code:** &#x60;3000&#x60; &lt;br&gt; Cannot access meeting information.&lt;br&gt;  **Error Code:** &#x60;3003&#x60; &lt;br&gt; You&#39;re not the meeting host.  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;1001&#x60; &lt;br&gt; User does not exist: {userId}.&lt;br&gt;   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRegistrantStatusRequestBuilder updateRegistrantStatus(String action, Long meetingId) throws IllegalArgumentException {
        if (action == null) throw new IllegalArgumentException("\"action\" is required but got null");
            

        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new UpdateRegistrantStatusRequestBuilder(action, meetingId);
    }
    private okhttp3.Call updateRegistrationQuestionsCall(Long meetingId, MeetingsUpdateRegistrationQuestionsRequest meetingsUpdateRegistrationQuestionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsUpdateRegistrationQuestionsRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/registrants/questions"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegistrationQuestionsValidateBeforeCall(Long meetingId, MeetingsUpdateRegistrationQuestionsRequest meetingsUpdateRegistrationQuestionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling updateRegistrationQuestions(Async)");
        }

        return updateRegistrationQuestionsCall(meetingId, meetingsUpdateRegistrationQuestionsRequest, _callback);

    }


    private ApiResponse<Void> updateRegistrationQuestionsWithHttpInfo(Long meetingId, MeetingsUpdateRegistrationQuestionsRequest meetingsUpdateRegistrationQuestionsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRegistrationQuestionsValidateBeforeCall(meetingId, meetingsUpdateRegistrationQuestionsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRegistrationQuestionsAsync(Long meetingId, MeetingsUpdateRegistrationQuestionsRequest meetingsUpdateRegistrationQuestionsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegistrationQuestionsValidateBeforeCall(meetingId, meetingsUpdateRegistrationQuestionsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRegistrationQuestionsRequestBuilder {
        private final Long meetingId;
        private List<MeetingsUpdateRegistrationQuestionsRequestCustomQuestionsInner> customQuestions;
        private List<MeetingsUpdateRegistrationQuestionsRequestQuestionsInner> questions;

        private UpdateRegistrationQuestionsRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set customQuestions
         * @param customQuestions Array of Registrant Custom Questions (optional)
         * @return UpdateRegistrationQuestionsRequestBuilder
         */
        public UpdateRegistrationQuestionsRequestBuilder customQuestions(List<MeetingsUpdateRegistrationQuestionsRequestCustomQuestionsInner> customQuestions) {
            this.customQuestions = customQuestions;
            return this;
        }
        
        /**
         * Set questions
         * @param questions Array of Registrant Questions (optional)
         * @return UpdateRegistrationQuestionsRequestBuilder
         */
        public UpdateRegistrationQuestionsRequestBuilder questions(List<MeetingsUpdateRegistrationQuestionsRequestQuestionsInner> questions) {
            this.questions = questions;
            return this;
        }
        
        /**
         * Build call for updateRegistrationQuestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting Registrant Questions Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsUpdateRegistrationQuestionsRequest meetingsUpdateRegistrationQuestionsRequest = buildBodyParams();
            return updateRegistrationQuestionsCall(meetingId, meetingsUpdateRegistrationQuestionsRequest, _callback);
        }

        private MeetingsUpdateRegistrationQuestionsRequest buildBodyParams() {
            MeetingsUpdateRegistrationQuestionsRequest meetingsUpdateRegistrationQuestionsRequest = new MeetingsUpdateRegistrationQuestionsRequest();
            meetingsUpdateRegistrationQuestionsRequest.customQuestions(this.customQuestions);
            meetingsUpdateRegistrationQuestionsRequest.questions(this.questions);
            return meetingsUpdateRegistrationQuestionsRequest;
        }

        /**
         * Execute updateRegistrationQuestions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting Registrant Questions Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MeetingsUpdateRegistrationQuestionsRequest meetingsUpdateRegistrationQuestionsRequest = buildBodyParams();
            updateRegistrationQuestionsWithHttpInfo(meetingId, meetingsUpdateRegistrationQuestionsRequest);
        }

        /**
         * Execute updateRegistrationQuestions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting Registrant Questions Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MeetingsUpdateRegistrationQuestionsRequest meetingsUpdateRegistrationQuestionsRequest = buildBodyParams();
            return updateRegistrationQuestionsWithHttpInfo(meetingId, meetingsUpdateRegistrationQuestionsRequest);
        }

        /**
         * Execute updateRegistrationQuestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting Registrant Questions Updated </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MeetingsUpdateRegistrationQuestionsRequest meetingsUpdateRegistrationQuestionsRequest = buildBodyParams();
            return updateRegistrationQuestionsAsync(meetingId, meetingsUpdateRegistrationQuestionsRequest, _callback);
        }
    }

    /**
     * Update registration questions
     * Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).            **Scopes:** &#x60;meeting:write&#x60;,&#x60;meeting:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits. (required)
     * @return UpdateRegistrationQuestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     Meeting Registrant Questions Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;3161&#x60; &lt;br&gt; Meeting hosting and scheduling capabilities are not allowed for your user account.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRegistrationQuestionsRequestBuilder updateRegistrationQuestions(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new UpdateRegistrationQuestionsRequestBuilder(meetingId);
    }
    private okhttp3.Call updateSurveyCall(Long meetingId, MeetingsUpdateSurveyRequest meetingsUpdateSurveyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = meetingsUpdateSurveyRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/survey"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSurveyValidateBeforeCall(Long meetingId, MeetingsUpdateSurveyRequest meetingsUpdateSurveyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling updateSurvey(Async)");
        }

        return updateSurveyCall(meetingId, meetingsUpdateSurveyRequest, _callback);

    }


    private ApiResponse<Void> updateSurveyWithHttpInfo(Long meetingId, MeetingsUpdateSurveyRequest meetingsUpdateSurveyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSurveyValidateBeforeCall(meetingId, meetingsUpdateSurveyRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSurveyAsync(Long meetingId, MeetingsUpdateSurveyRequest meetingsUpdateSurveyRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSurveyValidateBeforeCall(meetingId, meetingsUpdateSurveyRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSurveyRequestBuilder {
        private final Long meetingId;
        private MeetingsUpdateSurveyRequestCustomSurvey customSurvey;
        private Boolean showInTheBrowser;
        private String thirdPartySurvey;

        private UpdateSurveyRequestBuilder(Long meetingId) {
            this.meetingId = meetingId;
        }

        /**
         * Set customSurvey
         * @param customSurvey  (optional)
         * @return UpdateSurveyRequestBuilder
         */
        public UpdateSurveyRequestBuilder customSurvey(MeetingsUpdateSurveyRequestCustomSurvey customSurvey) {
            this.customSurvey = customSurvey;
            return this;
        }
        
        /**
         * Set showInTheBrowser
         * @param showInTheBrowser Whether the **Show in the browser when the meeting ends** option is enabled.  * &#x60;true&#x60; - Enabled.  * &#x60;false&#x60; - Disabled.    This value defaults to &#x60;true&#x60;. (optional, default to true)
         * @return UpdateSurveyRequestBuilder
         */
        public UpdateSurveyRequestBuilder showInTheBrowser(Boolean showInTheBrowser) {
            this.showInTheBrowser = showInTheBrowser;
            return this;
        }
        
        /**
         * Set thirdPartySurvey
         * @param thirdPartySurvey The link to the third party meeting survey. (optional)
         * @return UpdateSurveyRequestBuilder
         */
        public UpdateSurveyRequestBuilder thirdPartySurvey(String thirdPartySurvey) {
            this.thirdPartySurvey = thirdPartySurvey;
            return this;
        }
        
        /**
         * Build call for updateSurvey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Meeting survey updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid third party survey: {third_party_survey}. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Not allowed host to use a 3rd-party survey link. To use this feature, enable the \&quot;Allow host to use a 3rd-party survey link\&quot; setting in the \&quot;Account Settings\&quot; page of the Zoom web portal. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MeetingsUpdateSurveyRequest meetingsUpdateSurveyRequest = buildBodyParams();
            return updateSurveyCall(meetingId, meetingsUpdateSurveyRequest, _callback);
        }

        private MeetingsUpdateSurveyRequest buildBodyParams() {
            MeetingsUpdateSurveyRequest meetingsUpdateSurveyRequest = new MeetingsUpdateSurveyRequest();
            meetingsUpdateSurveyRequest.customSurvey(this.customSurvey);
            meetingsUpdateSurveyRequest.showInTheBrowser(this.showInTheBrowser);
            meetingsUpdateSurveyRequest.thirdPartySurvey(this.thirdPartySurvey);
            return meetingsUpdateSurveyRequest;
        }

        /**
         * Execute updateSurvey request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Meeting survey updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid third party survey: {third_party_survey}. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Not allowed host to use a 3rd-party survey link. To use this feature, enable the \&quot;Allow host to use a 3rd-party survey link\&quot; setting in the \&quot;Account Settings\&quot; page of the Zoom web portal. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MeetingsUpdateSurveyRequest meetingsUpdateSurveyRequest = buildBodyParams();
            updateSurveyWithHttpInfo(meetingId, meetingsUpdateSurveyRequest);
        }

        /**
         * Execute updateSurvey request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Meeting survey updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid third party survey: {third_party_survey}. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Not allowed host to use a 3rd-party survey link. To use this feature, enable the \&quot;Allow host to use a 3rd-party survey link\&quot; setting in the \&quot;Account Settings\&quot; page of the Zoom web portal. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MeetingsUpdateSurveyRequest meetingsUpdateSurveyRequest = buildBodyParams();
            return updateSurveyWithHttpInfo(meetingId, meetingsUpdateSurveyRequest);
        }

        /**
         * Execute updateSurvey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Meeting survey updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid third party survey: {third_party_survey}. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Not allowed host to use a 3rd-party survey link. To use this feature, enable the \&quot;Allow host to use a 3rd-party survey link\&quot; setting in the \&quot;Account Settings\&quot; page of the Zoom web portal. &lt;br&gt;  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MeetingsUpdateSurveyRequest meetingsUpdateSurveyRequest = buildBodyParams();
            return updateSurveyAsync(meetingId, meetingsUpdateSurveyRequest, _callback);
        }
    }

    /**
     * Update a meeting survey
     * Update a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host must be a **Pro** user type. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled in the host&#39;s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** &#x60;meeting:write:admin&#x60;,&#x60;meeting:write&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;LIGHT&#x60;
     * @param meetingId The meeting&#39;s ID.    When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be over 10 digits. (required)
     * @return UpdateSurveyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;       Meeting survey updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid meeting ID. &lt;br&gt; **Error Code:** &#x60;300&#x60; &lt;br&gt;  Invalid third party survey: {third_party_survey}. &lt;br&gt; **Error Code:** &#x60;3161&#x60; &lt;br&gt;  Meeting hosting and scheduling capabilities are not allowed for your user account. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Cannot access Webinar information. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Meeting survey disabled. To enable this feature, enable the \&quot;Meeting Survey\&quot; setting in the Zoom web portal&#39;s \&quot;Settings\&quot; interface. &lt;br&gt; **Error Code:** &#x60;3000&#x60; &lt;br&gt;  Not allowed host to use a 3rd-party survey link. To use this feature, enable the \&quot;Allow host to use a 3rd-party survey link\&quot; setting in the \&quot;Account Settings\&quot; page of the Zoom web portal. &lt;br&gt;  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found    **Error Code:** &#x60;300&#x60; &lt;br&gt;  Meeting ID does not exist. &lt;br&gt; **Error Code:** &#x60;3001&#x60; &lt;br&gt;  Meeting does not exist: {meetingId}. &lt;br&gt;  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSurveyRequestBuilder updateSurvey(Long meetingId) throws IllegalArgumentException {
        if (meetingId == null) throw new IllegalArgumentException("\"meetingId\" is required but got null");
        return new UpdateSurveyRequestBuilder(meetingId);
    }
}
