/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.H323DevicesCreateDeviceRequest;
import com.konfigthis.client.model.H323DevicesCreateDeviceResponse;
import com.konfigthis.client.model.H323DevicesListDevicesResponse;
import com.konfigthis.client.model.H323DevicesUpdateDeviceInfoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class H323DevicesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public H323DevicesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public H323DevicesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getOpenapiAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setOpenapiAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDeviceCall(H323DevicesCreateDeviceRequest h323DevicesCreateDeviceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = h323DevicesCreateDeviceRequest;

        // create path and map variables
        String localVarPath = "/h323/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDeviceValidateBeforeCall(H323DevicesCreateDeviceRequest h323DevicesCreateDeviceRequest, final ApiCallback _callback) throws ApiException {
        return createDeviceCall(h323DevicesCreateDeviceRequest, _callback);

    }


    private ApiResponse<H323DevicesCreateDeviceResponse> createDeviceWithHttpInfo(H323DevicesCreateDeviceRequest h323DevicesCreateDeviceRequest) throws ApiException {
        okhttp3.Call localVarCall = createDeviceValidateBeforeCall(h323DevicesCreateDeviceRequest, null);
        Type localVarReturnType = new TypeToken<H323DevicesCreateDeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDeviceAsync(H323DevicesCreateDeviceRequest h323DevicesCreateDeviceRequest, final ApiCallback<H323DevicesCreateDeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDeviceValidateBeforeCall(h323DevicesCreateDeviceRequest, _callback);
        Type localVarReturnType = new TypeToken<H323DevicesCreateDeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDeviceRequestBuilder {
        private final String encryption;
        private final String ip;
        private final String name;
        private final String protocol;

        private CreateDeviceRequestBuilder(String encryption, String ip, String name, String protocol) {
            this.encryption = encryption;
            this.ip = ip;
            this.name = name;
            this.protocol = protocol;
        }

        /**
         * Build call for createDevice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     H.323/SIP device created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;2020&#x60; &lt;br&gt; H.323 device&#39;s display name:{displayName} is already in use.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            H323DevicesCreateDeviceRequest h323DevicesCreateDeviceRequest = buildBodyParams();
            return createDeviceCall(h323DevicesCreateDeviceRequest, _callback);
        }

        private H323DevicesCreateDeviceRequest buildBodyParams() {
            H323DevicesCreateDeviceRequest h323DevicesCreateDeviceRequest = new H323DevicesCreateDeviceRequest();
            if (this.encryption != null)
            h323DevicesCreateDeviceRequest.encryption(H323DevicesCreateDeviceRequest.EncryptionEnum.fromValue(this.encryption));
            h323DevicesCreateDeviceRequest.ip(this.ip);
            h323DevicesCreateDeviceRequest.name(this.name);
            if (this.protocol != null)
            h323DevicesCreateDeviceRequest.protocol(H323DevicesCreateDeviceRequest.ProtocolEnum.fromValue(this.protocol));
            return h323DevicesCreateDeviceRequest;
        }

        /**
         * Execute createDevice request
         * @return H323DevicesCreateDeviceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     H.323/SIP device created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;2020&#x60; &lt;br&gt; H.323 device&#39;s display name:{displayName} is already in use.   </td><td>  -  </td></tr>
         </table>
         */
        public H323DevicesCreateDeviceResponse execute() throws ApiException {
            H323DevicesCreateDeviceRequest h323DevicesCreateDeviceRequest = buildBodyParams();
            ApiResponse<H323DevicesCreateDeviceResponse> localVarResp = createDeviceWithHttpInfo(h323DevicesCreateDeviceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDevice request with HTTP info returned
         * @return ApiResponse&lt;H323DevicesCreateDeviceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     H.323/SIP device created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;2020&#x60; &lt;br&gt; H.323 device&#39;s display name:{displayName} is already in use.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<H323DevicesCreateDeviceResponse> executeWithHttpInfo() throws ApiException {
            H323DevicesCreateDeviceRequest h323DevicesCreateDeviceRequest = buildBodyParams();
            return createDeviceWithHttpInfo(h323DevicesCreateDeviceRequest);
        }

        /**
         * Execute createDevice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     H.323/SIP device created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.   </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;2020&#x60; &lt;br&gt; H.323 device&#39;s display name:{displayName} is already in use.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<H323DevicesCreateDeviceResponse> _callback) throws ApiException {
            H323DevicesCreateDeviceRequest h323DevicesCreateDeviceRequest = buildBodyParams();
            return createDeviceAsync(h323DevicesCreateDeviceRequest, _callback);
        }
    }

    /**
     * Create a H.323/SIP device
     * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to add a H.323/SIP device to your Zoom account            **Scopes:** &#x60;h323:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @return CreateDeviceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> **HTTP Status Code:** &#x60;201&#x60;     H.323/SIP device created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **HTTP Status Code:** &#x60;400&#x60; &lt;br&gt;  Bad Request  **Error Code:** &#x60;200&#x60; &lt;br&gt; No permission.   </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;2020&#x60; &lt;br&gt; H.323 device&#39;s display name:{displayName} is already in use.   </td><td>  -  </td></tr>
     </table>
     */
    public CreateDeviceRequestBuilder createDevice(String encryption, String ip, String name, String protocol) throws IllegalArgumentException {
        if (encryption == null) throw new IllegalArgumentException("\"encryption\" is required but got null");
            

        if (ip == null) throw new IllegalArgumentException("\"ip\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (protocol == null) throw new IllegalArgumentException("\"protocol\" is required but got null");
            

        return new CreateDeviceRequestBuilder(encryption, ip, name, protocol);
    }
    private okhttp3.Call deleteDeviceCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/h323/devices/{deviceId}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDeviceValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deleteDevice(Async)");
        }

        return deleteDeviceCall(deviceId, _callback);

    }


    private ApiResponse<Void> deleteDeviceWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = deleteDeviceValidateBeforeCall(deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDeviceAsync(String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDeviceValidateBeforeCall(deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDeviceRequestBuilder {
        private final String deviceId;

        private DeleteDeviceRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for deleteDevice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> You do not have the permission to delete this device. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> H.323/SIP device deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDeviceCall(deviceId, _callback);
        }


        /**
         * Execute deleteDevice request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> You do not have the permission to delete this device. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> H.323/SIP device deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteDeviceWithHttpInfo(deviceId);
        }

        /**
         * Execute deleteDevice request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> You do not have the permission to delete this device. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> H.323/SIP device deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteDeviceWithHttpInfo(deviceId);
        }

        /**
         * Execute deleteDevice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> You do not have the permission to delete this device. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> H.323/SIP device deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteDeviceAsync(deviceId, _callback);
        }
    }

    /**
     * Delete a H.323/SIP device
     * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to delete a H.323/SIP device from your Zoom account.            **Scopes:** &#x60;h323:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param deviceId The device ID. (required)
     * @return DeleteDeviceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> You do not have the permission to delete this device. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> H.323/SIP device deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found   </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDeviceRequestBuilder deleteDevice(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new DeleteDeviceRequestBuilder(deviceId);
    }
    private okhttp3.Call listDevicesCall(Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/h323/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (nextPageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_page_token", nextPageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDevicesValidateBeforeCall(Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback _callback) throws ApiException {
        return listDevicesCall(pageSize, pageNumber, nextPageToken, _callback);

    }


    private ApiResponse<H323DevicesListDevicesResponse> listDevicesWithHttpInfo(Integer pageSize, Integer pageNumber, String nextPageToken) throws ApiException {
        okhttp3.Call localVarCall = listDevicesValidateBeforeCall(pageSize, pageNumber, nextPageToken, null);
        Type localVarReturnType = new TypeToken<H323DevicesListDevicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDevicesAsync(Integer pageSize, Integer pageNumber, String nextPageToken, final ApiCallback<H323DevicesListDevicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDevicesValidateBeforeCall(pageSize, pageNumber, nextPageToken, _callback);
        Type localVarReturnType = new TypeToken<H323DevicesListDevicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDevicesRequestBuilder {
        private Integer pageSize;
        private Integer pageNumber;
        private String nextPageToken;

        private ListDevicesRequestBuilder() {
        }

        /**
         * Set pageSize
         * @param pageSize The number of records returned within a single API call. (optional, default to 30)
         * @return ListDevicesRequestBuilder
         */
        public ListDevicesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber **Deprecated.** We will no longer support this field in a future release. Instead, use the &#x60;next_page_token&#x60; for pagination. (optional, default to 1)
         * @return ListDevicesRequestBuilder
         */
        public ListDevicesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set nextPageToken
         * @param nextPageToken Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token&#39;s expiration period is 15 minutes. (optional)
         * @return ListDevicesRequestBuilder
         */
        public ListDevicesRequestBuilder nextPageToken(String nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }
        
        /**
         * Build call for listDevices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of H.323/SIP devices returned.     **Error Code:** &#x60;200&#x60;     No permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDevicesCall(pageSize, pageNumber, nextPageToken, _callback);
        }


        /**
         * Execute listDevices request
         * @return H323DevicesListDevicesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of H.323/SIP devices returned.     **Error Code:** &#x60;200&#x60;     No permission. </td><td>  -  </td></tr>
         </table>
         */
        public H323DevicesListDevicesResponse execute() throws ApiException {
            ApiResponse<H323DevicesListDevicesResponse> localVarResp = listDevicesWithHttpInfo(pageSize, pageNumber, nextPageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDevices request with HTTP info returned
         * @return ApiResponse&lt;H323DevicesListDevicesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of H.323/SIP devices returned.     **Error Code:** &#x60;200&#x60;     No permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<H323DevicesListDevicesResponse> executeWithHttpInfo() throws ApiException {
            return listDevicesWithHttpInfo(pageSize, pageNumber, nextPageToken);
        }

        /**
         * Execute listDevices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of H.323/SIP devices returned.     **Error Code:** &#x60;200&#x60;     No permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<H323DevicesListDevicesResponse> _callback) throws ApiException {
            return listDevicesAsync(pageSize, pageNumber, nextPageToken, _callback);
        }
    }

    /**
     * List H.323/SIP devices
     * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to list all H.323/SIP Devices on a Zoom account.            **Scopes:** &#x60;h323:read:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Medium&#x60;
     * @return ListDevicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **HTTP Status Code:** &#x60;200&#x60;     List of H.323/SIP devices returned.     **Error Code:** &#x60;200&#x60;     No permission. </td><td>  -  </td></tr>
     </table>
     */
    public ListDevicesRequestBuilder listDevices() throws IllegalArgumentException {
        return new ListDevicesRequestBuilder();
    }
    private okhttp3.Call updateDeviceInfoCall(String deviceId, H323DevicesUpdateDeviceInfoRequest h323DevicesUpdateDeviceInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = h323DevicesUpdateDeviceInfoRequest;

        // create path and map variables
        String localVarPath = "/h323/devices/{deviceId}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "openapi_authorization", "openapi_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceInfoValidateBeforeCall(String deviceId, H323DevicesUpdateDeviceInfoRequest h323DevicesUpdateDeviceInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling updateDeviceInfo(Async)");
        }

        return updateDeviceInfoCall(deviceId, h323DevicesUpdateDeviceInfoRequest, _callback);

    }


    private ApiResponse<Void> updateDeviceInfoWithHttpInfo(String deviceId, H323DevicesUpdateDeviceInfoRequest h323DevicesUpdateDeviceInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceInfoValidateBeforeCall(deviceId, h323DevicesUpdateDeviceInfoRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDeviceInfoAsync(String deviceId, H323DevicesUpdateDeviceInfoRequest h323DevicesUpdateDeviceInfoRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceInfoValidateBeforeCall(deviceId, h323DevicesUpdateDeviceInfoRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDeviceInfoRequestBuilder {
        private final String encryption;
        private final String ip;
        private final String name;
        private final String protocol;
        private final String deviceId;

        private UpdateDeviceInfoRequestBuilder(String encryption, String ip, String name, String protocol, String deviceId) {
            this.encryption = encryption;
            this.ip = ip;
            this.name = name;
            this.protocol = protocol;
            this.deviceId = deviceId;
        }

        /**
         * Build call for updateDeviceInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     H.323/SIP device updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;2020&#x60; &lt;br&gt; H.323 device&#39;s display name:{displayName} is already in use.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            H323DevicesUpdateDeviceInfoRequest h323DevicesUpdateDeviceInfoRequest = buildBodyParams();
            return updateDeviceInfoCall(deviceId, h323DevicesUpdateDeviceInfoRequest, _callback);
        }

        private H323DevicesUpdateDeviceInfoRequest buildBodyParams() {
            H323DevicesUpdateDeviceInfoRequest h323DevicesUpdateDeviceInfoRequest = new H323DevicesUpdateDeviceInfoRequest();
            if (this.encryption != null)
            h323DevicesUpdateDeviceInfoRequest.encryption(H323DevicesUpdateDeviceInfoRequest.EncryptionEnum.fromValue(this.encryption));
            h323DevicesUpdateDeviceInfoRequest.ip(this.ip);
            h323DevicesUpdateDeviceInfoRequest.name(this.name);
            if (this.protocol != null)
            h323DevicesUpdateDeviceInfoRequest.protocol(H323DevicesUpdateDeviceInfoRequest.ProtocolEnum.fromValue(this.protocol));
            return h323DevicesUpdateDeviceInfoRequest;
        }

        /**
         * Execute updateDeviceInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     H.323/SIP device updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;2020&#x60; &lt;br&gt; H.323 device&#39;s display name:{displayName} is already in use.   </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            H323DevicesUpdateDeviceInfoRequest h323DevicesUpdateDeviceInfoRequest = buildBodyParams();
            updateDeviceInfoWithHttpInfo(deviceId, h323DevicesUpdateDeviceInfoRequest);
        }

        /**
         * Execute updateDeviceInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     H.323/SIP device updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;2020&#x60; &lt;br&gt; H.323 device&#39;s display name:{displayName} is already in use.   </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            H323DevicesUpdateDeviceInfoRequest h323DevicesUpdateDeviceInfoRequest = buildBodyParams();
            return updateDeviceInfoWithHttpInfo(deviceId, h323DevicesUpdateDeviceInfoRequest);
        }

        /**
         * Execute updateDeviceInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     H.323/SIP device updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;2020&#x60; &lt;br&gt; H.323 device&#39;s display name:{displayName} is already in use.   </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            H323DevicesUpdateDeviceInfoRequest h323DevicesUpdateDeviceInfoRequest = buildBodyParams();
            return updateDeviceInfoAsync(deviceId, h323DevicesUpdateDeviceInfoRequest, _callback);
        }
    }

    /**
     * Update a H.323/SIP device
     * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to edit information of a H.323/SIP device from your Zoom account.            **Scopes:** &#x60;h323:write:admin&#x60;  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** &#x60;Light&#x60;
     * @param deviceId The device ID. (required)
     * @return UpdateDeviceInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> **HTTP Status Code:** &#x60;204&#x60;     H.323/SIP device updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **HTTP Status Code:** &#x60;404&#x60; &lt;br&gt;  Not Found  **Error Code:** &#x60;2020&#x60; &lt;br&gt; H.323 device&#39;s display name:{displayName} is already in use.   </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDeviceInfoRequestBuilder updateDeviceInfo(String encryption, String ip, String name, String protocol, String deviceId) throws IllegalArgumentException {
        if (encryption == null) throw new IllegalArgumentException("\"encryption\" is required but got null");
            

        if (ip == null) throw new IllegalArgumentException("\"ip\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (protocol == null) throw new IllegalArgumentException("\"protocol\" is required but got null");
            

        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new UpdateDeviceInfoRequestBuilder(encryption, ip, name, protocol, deviceId);
    }
}
