/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WebinarsUploadBrandingVirtualBackgroundRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WebinarsUploadBrandingVirtualBackgroundRequest {
  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private File _file;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default = false;

  public static final String SERIALIZED_NAME_SET_DEFAULT_FOR_ALL_PANELISTS = "set_default_for_all_panelists";
  @SerializedName(SERIALIZED_NAME_SET_DEFAULT_FOR_ALL_PANELISTS)
  private Boolean setDefaultForAllPanelists = true;

  public WebinarsUploadBrandingVirtualBackgroundRequest() {
  }

  public WebinarsUploadBrandingVirtualBackgroundRequest _file(File _file) {
    
    
    
    
    this._file = _file;
    return this;
  }

   /**
   * The Virtual Background&#39;s file path, in binary format.
   * @return _file
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[B@52753431", required = true, value = "The Virtual Background's file path, in binary format.")

  public File getFile() {
    return _file;
  }


  public void setFile(File _file) {
    
    
    
    this._file = _file;
  }


  public WebinarsUploadBrandingVirtualBackgroundRequest _default(Boolean _default) {
    
    
    
    
    this._default = _default;
    return this;
  }

   /**
   * Whether set the file as the default Virtual Background file.
   * @return _default
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether set the file as the default Virtual Background file.")

  public Boolean getDefault() {
    return _default;
  }


  public void setDefault(Boolean _default) {
    
    
    
    this._default = _default;
  }


  public WebinarsUploadBrandingVirtualBackgroundRequest setDefaultForAllPanelists(Boolean setDefaultForAllPanelists) {
    
    
    
    
    this.setDefaultForAllPanelists = setDefaultForAllPanelists;
    return this;
  }

   /**
   * Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.
   * @return setDefaultForAllPanelists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.")

  public Boolean getSetDefaultForAllPanelists() {
    return setDefaultForAllPanelists;
  }


  public void setSetDefaultForAllPanelists(Boolean setDefaultForAllPanelists) {
    
    
    
    this.setDefaultForAllPanelists = setDefaultForAllPanelists;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WebinarsUploadBrandingVirtualBackgroundRequest instance itself
   */
  public WebinarsUploadBrandingVirtualBackgroundRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebinarsUploadBrandingVirtualBackgroundRequest webinarsUploadBrandingVirtualBackgroundRequest = (WebinarsUploadBrandingVirtualBackgroundRequest) o;
    return Objects.equals(this._file, webinarsUploadBrandingVirtualBackgroundRequest._file) &&
        Objects.equals(this._default, webinarsUploadBrandingVirtualBackgroundRequest._default) &&
        Objects.equals(this.setDefaultForAllPanelists, webinarsUploadBrandingVirtualBackgroundRequest.setDefaultForAllPanelists)&&
        Objects.equals(this.additionalProperties, webinarsUploadBrandingVirtualBackgroundRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_file, _default, setDefaultForAllPanelists, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebinarsUploadBrandingVirtualBackgroundRequest {\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    setDefaultForAllPanelists: ").append(toIndentedString(setDefaultForAllPanelists)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("file");
    openapiFields.add("default");
    openapiFields.add("set_default_for_all_panelists");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("file");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebinarsUploadBrandingVirtualBackgroundRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebinarsUploadBrandingVirtualBackgroundRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebinarsUploadBrandingVirtualBackgroundRequest is not found in the empty JSON string", WebinarsUploadBrandingVirtualBackgroundRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebinarsUploadBrandingVirtualBackgroundRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebinarsUploadBrandingVirtualBackgroundRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebinarsUploadBrandingVirtualBackgroundRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebinarsUploadBrandingVirtualBackgroundRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebinarsUploadBrandingVirtualBackgroundRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WebinarsUploadBrandingVirtualBackgroundRequest>() {
           @Override
           public void write(JsonWriter out, WebinarsUploadBrandingVirtualBackgroundRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WebinarsUploadBrandingVirtualBackgroundRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WebinarsUploadBrandingVirtualBackgroundRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebinarsUploadBrandingVirtualBackgroundRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebinarsUploadBrandingVirtualBackgroundRequest
  * @throws IOException if the JSON string is invalid with respect to WebinarsUploadBrandingVirtualBackgroundRequest
  */
  public static WebinarsUploadBrandingVirtualBackgroundRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebinarsUploadBrandingVirtualBackgroundRequest.class);
  }

 /**
  * Convert an instance of WebinarsUploadBrandingVirtualBackgroundRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

