/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.MeetingsCreateBatchPollsResponsePollsInnerQuestionsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MeetingsCreateBatchPollsResponsePollsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MeetingsCreateBatchPollsResponsePollsInner {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ANONYMOUS = "anonymous";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS)
  private Boolean anonymous;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The type of poll:  * &#x60;1&#x60; &amp;mdash; Poll.  * &#x60;2&#x60; &amp;mdash; Advanced Poll. This feature must be enabled in your Zoom account.  * &#x60;3&#x60; &amp;mdash; Quiz. This feature must be enabled in your Zoom account.
   */
  @JsonAdapter(PollTypeEnum.Adapter.class)
 public enum PollTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    PollTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PollTypeEnum fromValue(Integer value) {
      for (PollTypeEnum b : PollTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PollTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PollTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PollTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PollTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_POLL_TYPE = "poll_type";
  @SerializedName(SERIALIZED_NAME_POLL_TYPE)
  private PollTypeEnum pollType;

  public static final String SERIALIZED_NAME_QUESTIONS = "questions";
  @SerializedName(SERIALIZED_NAME_QUESTIONS)
  private List<MeetingsCreateBatchPollsResponsePollsInnerQuestionsInner> questions = null;

  /**
   * Status of the Meeting Poll:    &#x60;notstart&#x60; - Poll not started    &#x60;started&#x60; - Poll started    &#x60;ended&#x60; - Poll ended    &#x60;sharing&#x60; - Sharing poll results
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    NOTSTART("notstart"),
    
    STARTED("started"),
    
    ENDED("ended"),
    
    SHARING("sharing");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public MeetingsCreateBatchPollsResponsePollsInner() {
  }

  public MeetingsCreateBatchPollsResponsePollsInner title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title for the Poll
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Learn something new", value = "Title for the Poll")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public MeetingsCreateBatchPollsResponsePollsInner anonymous(Boolean anonymous) {
    
    
    
    
    this.anonymous = anonymous;
    return this;
  }

   /**
   * Whether to allow meeting participants to answer poll questions anonymously:  * &#x60;true&#x60; &amp;mdash; Anonymous polls enabled.  * &#x60;false&#x60; &amp;mdash; Participants cannot answer poll questions anonymously.
   * @return anonymous
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to allow meeting participants to answer poll questions anonymously:  * `true` &mdash; Anonymous polls enabled.  * `false` &mdash; Participants cannot answer poll questions anonymously.")

  public Boolean getAnonymous() {
    return anonymous;
  }


  public void setAnonymous(Boolean anonymous) {
    
    
    
    this.anonymous = anonymous;
  }


  public MeetingsCreateBatchPollsResponsePollsInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Meeting Poll ID
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "QalIoKWLTJehBJ8e1xRrbQ", value = "Meeting Poll ID")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public MeetingsCreateBatchPollsResponsePollsInner pollType(PollTypeEnum pollType) {
    
    
    
    
    this.pollType = pollType;
    return this;
  }

   /**
   * The type of poll:  * &#x60;1&#x60; &amp;mdash; Poll.  * &#x60;2&#x60; &amp;mdash; Advanced Poll. This feature must be enabled in your Zoom account.  * &#x60;3&#x60; &amp;mdash; Quiz. This feature must be enabled in your Zoom account.
   * @return pollType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_2", value = "The type of poll:  * `1` &mdash; Poll.  * `2` &mdash; Advanced Poll. This feature must be enabled in your Zoom account.  * `3` &mdash; Quiz. This feature must be enabled in your Zoom account.")

  public PollTypeEnum getPollType() {
    return pollType;
  }


  public void setPollType(PollTypeEnum pollType) {
    
    
    
    this.pollType = pollType;
  }


  public MeetingsCreateBatchPollsResponsePollsInner questions(List<MeetingsCreateBatchPollsResponsePollsInnerQuestionsInner> questions) {
    
    
    
    
    this.questions = questions;
    return this;
  }

  public MeetingsCreateBatchPollsResponsePollsInner addQuestionsItem(MeetingsCreateBatchPollsResponsePollsInnerQuestionsInner questionsItem) {
    if (this.questions == null) {
      this.questions = new ArrayList<>();
    }
    this.questions.add(questionsItem);
    return this;
  }

   /**
   * Information about the poll&#39;s questions.
   * @return questions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information about the poll's questions.")

  public List<MeetingsCreateBatchPollsResponsePollsInnerQuestionsInner> getQuestions() {
    return questions;
  }


  public void setQuestions(List<MeetingsCreateBatchPollsResponsePollsInnerQuestionsInner> questions) {
    
    
    
    this.questions = questions;
  }


  public MeetingsCreateBatchPollsResponsePollsInner status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Status of the Meeting Poll:    &#x60;notstart&#x60; - Poll not started    &#x60;started&#x60; - Poll started    &#x60;ended&#x60; - Poll ended    &#x60;sharing&#x60; - Sharing poll results
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NOTSTART", value = "Status of the Meeting Poll:    `notstart` - Poll not started    `started` - Poll started    `ended` - Poll ended    `sharing` - Sharing poll results")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MeetingsCreateBatchPollsResponsePollsInner instance itself
   */
  public MeetingsCreateBatchPollsResponsePollsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingsCreateBatchPollsResponsePollsInner meetingsCreateBatchPollsResponsePollsInner = (MeetingsCreateBatchPollsResponsePollsInner) o;
    return Objects.equals(this.title, meetingsCreateBatchPollsResponsePollsInner.title) &&
        Objects.equals(this.anonymous, meetingsCreateBatchPollsResponsePollsInner.anonymous) &&
        Objects.equals(this.id, meetingsCreateBatchPollsResponsePollsInner.id) &&
        Objects.equals(this.pollType, meetingsCreateBatchPollsResponsePollsInner.pollType) &&
        Objects.equals(this.questions, meetingsCreateBatchPollsResponsePollsInner.questions) &&
        Objects.equals(this.status, meetingsCreateBatchPollsResponsePollsInner.status)&&
        Objects.equals(this.additionalProperties, meetingsCreateBatchPollsResponsePollsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, anonymous, id, pollType, questions, status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingsCreateBatchPollsResponsePollsInner {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    anonymous: ").append(toIndentedString(anonymous)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    pollType: ").append(toIndentedString(pollType)).append("\n");
    sb.append("    questions: ").append(toIndentedString(questions)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("anonymous");
    openapiFields.add("id");
    openapiFields.add("poll_type");
    openapiFields.add("questions");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MeetingsCreateBatchPollsResponsePollsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MeetingsCreateBatchPollsResponsePollsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingsCreateBatchPollsResponsePollsInner is not found in the empty JSON string", MeetingsCreateBatchPollsResponsePollsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("questions") != null && !jsonObj.get("questions").isJsonNull()) {
        JsonArray jsonArrayquestions = jsonObj.getAsJsonArray("questions");
        if (jsonArrayquestions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("questions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `questions` to be an array in the JSON string but got `%s`", jsonObj.get("questions").toString()));
          }

          // validate the optional field `questions` (array)
          for (int i = 0; i < jsonArrayquestions.size(); i++) {
            MeetingsCreateBatchPollsResponsePollsInnerQuestionsInner.validateJsonObject(jsonArrayquestions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingsCreateBatchPollsResponsePollsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingsCreateBatchPollsResponsePollsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingsCreateBatchPollsResponsePollsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingsCreateBatchPollsResponsePollsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingsCreateBatchPollsResponsePollsInner>() {
           @Override
           public void write(JsonWriter out, MeetingsCreateBatchPollsResponsePollsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingsCreateBatchPollsResponsePollsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MeetingsCreateBatchPollsResponsePollsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MeetingsCreateBatchPollsResponsePollsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MeetingsCreateBatchPollsResponsePollsInner
  * @throws IOException if the JSON string is invalid with respect to MeetingsCreateBatchPollsResponsePollsInner
  */
  public static MeetingsCreateBatchPollsResponsePollsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingsCreateBatchPollsResponsePollsInner.class);
  }

 /**
  * Convert an instance of MeetingsCreateBatchPollsResponsePollsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

