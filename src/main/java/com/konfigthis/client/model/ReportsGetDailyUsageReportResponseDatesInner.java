/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportsGetDailyUsageReportResponseDatesInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportsGetDailyUsageReportResponseDatesInner {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_MEETING_MINUTES = "meeting_minutes";
  @SerializedName(SERIALIZED_NAME_MEETING_MINUTES)
  private Integer meetingMinutes;

  public static final String SERIALIZED_NAME_MEETINGS = "meetings";
  @SerializedName(SERIALIZED_NAME_MEETINGS)
  private Integer meetings;

  public static final String SERIALIZED_NAME_NEW_USERS = "new_users";
  @SerializedName(SERIALIZED_NAME_NEW_USERS)
  private Integer newUsers;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private Integer participants;

  public ReportsGetDailyUsageReportResponseDatesInner() {
  }

  public ReportsGetDailyUsageReportResponseDatesInner date(LocalDate date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * Date for this object.
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mon Feb 28 16:00:00 PST 2022", value = "Date for this object.")

  public LocalDate getDate() {
    return date;
  }


  public void setDate(LocalDate date) {
    
    
    
    this.date = date;
  }


  public ReportsGetDailyUsageReportResponseDatesInner meetingMinutes(Integer meetingMinutes) {
    
    
    
    
    this.meetingMinutes = meetingMinutes;
    return this;
  }

   /**
   * Number of meeting minutes on this date.
   * @return meetingMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "34", value = "Number of meeting minutes on this date.")

  public Integer getMeetingMinutes() {
    return meetingMinutes;
  }


  public void setMeetingMinutes(Integer meetingMinutes) {
    
    
    
    this.meetingMinutes = meetingMinutes;
  }


  public ReportsGetDailyUsageReportResponseDatesInner meetings(Integer meetings) {
    
    
    
    
    this.meetings = meetings;
    return this;
  }

   /**
   * Number of meetings on this date.
   * @return meetings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Number of meetings on this date.")

  public Integer getMeetings() {
    return meetings;
  }


  public void setMeetings(Integer meetings) {
    
    
    
    this.meetings = meetings;
  }


  public ReportsGetDailyUsageReportResponseDatesInner newUsers(Integer newUsers) {
    
    
    
    
    this.newUsers = newUsers;
    return this;
  }

   /**
   * Number of new users on this date.
   * @return newUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "Number of new users on this date.")

  public Integer getNewUsers() {
    return newUsers;
  }


  public void setNewUsers(Integer newUsers) {
    
    
    
    this.newUsers = newUsers;
  }


  public ReportsGetDailyUsageReportResponseDatesInner participants(Integer participants) {
    
    
    
    
    this.participants = participants;
    return this;
  }

   /**
   * Number of participants on this date.
   * @return participants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "Number of participants on this date.")

  public Integer getParticipants() {
    return participants;
  }


  public void setParticipants(Integer participants) {
    
    
    
    this.participants = participants;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportsGetDailyUsageReportResponseDatesInner instance itself
   */
  public ReportsGetDailyUsageReportResponseDatesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsGetDailyUsageReportResponseDatesInner reportsGetDailyUsageReportResponseDatesInner = (ReportsGetDailyUsageReportResponseDatesInner) o;
    return Objects.equals(this.date, reportsGetDailyUsageReportResponseDatesInner.date) &&
        Objects.equals(this.meetingMinutes, reportsGetDailyUsageReportResponseDatesInner.meetingMinutes) &&
        Objects.equals(this.meetings, reportsGetDailyUsageReportResponseDatesInner.meetings) &&
        Objects.equals(this.newUsers, reportsGetDailyUsageReportResponseDatesInner.newUsers) &&
        Objects.equals(this.participants, reportsGetDailyUsageReportResponseDatesInner.participants)&&
        Objects.equals(this.additionalProperties, reportsGetDailyUsageReportResponseDatesInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, meetingMinutes, meetings, newUsers, participants, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsGetDailyUsageReportResponseDatesInner {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    meetingMinutes: ").append(toIndentedString(meetingMinutes)).append("\n");
    sb.append("    meetings: ").append(toIndentedString(meetings)).append("\n");
    sb.append("    newUsers: ").append(toIndentedString(newUsers)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("meeting_minutes");
    openapiFields.add("meetings");
    openapiFields.add("new_users");
    openapiFields.add("participants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportsGetDailyUsageReportResponseDatesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportsGetDailyUsageReportResponseDatesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsGetDailyUsageReportResponseDatesInner is not found in the empty JSON string", ReportsGetDailyUsageReportResponseDatesInner.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsGetDailyUsageReportResponseDatesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsGetDailyUsageReportResponseDatesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsGetDailyUsageReportResponseDatesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsGetDailyUsageReportResponseDatesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsGetDailyUsageReportResponseDatesInner>() {
           @Override
           public void write(JsonWriter out, ReportsGetDailyUsageReportResponseDatesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsGetDailyUsageReportResponseDatesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportsGetDailyUsageReportResponseDatesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportsGetDailyUsageReportResponseDatesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportsGetDailyUsageReportResponseDatesInner
  * @throws IOException if the JSON string is invalid with respect to ReportsGetDailyUsageReportResponseDatesInner
  */
  public static ReportsGetDailyUsageReportResponseDatesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsGetDailyUsageReportResponseDatesInner.class);
  }

 /**
  * Convert an instance of ReportsGetDailyUsageReportResponseDatesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

