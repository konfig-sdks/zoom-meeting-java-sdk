/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestSettingsApprovedOrDeniedCountriesOrRegions;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestSettingsAuthenticationExceptionInner;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestSettingsBreakoutRoom;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestSettingsContinuousMeetingChat;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestSettingsLanguageInterpretation;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestSettingsMeetingInviteesInner;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestSettingsResourcesInner;
import com.konfigthis.client.model.MeetingsCreateMeetingRequestSettingsSignLanguageInterpretation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the meeting&#39;s settings.
 */
@ApiModel(description = "Information about the meeting's settings.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MeetingsCreateMeetingRequestSettings {
  public static final String SERIALIZED_NAME_ADDITIONAL_DATA_CENTER_REGIONS = "additional_data_center_regions";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA_CENTER_REGIONS)
  private List<String> additionalDataCenterRegions = null;

  public static final String SERIALIZED_NAME_ALLOW_MULTIPLE_DEVICES = "allow_multiple_devices";
  @SerializedName(SERIALIZED_NAME_ALLOW_MULTIPLE_DEVICES)
  private Boolean allowMultipleDevices;

  public static final String SERIALIZED_NAME_ALTERNATIVE_HOSTS = "alternative_hosts";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_HOSTS)
  private String alternativeHosts;

  public static final String SERIALIZED_NAME_ALTERNATIVE_HOSTS_EMAIL_NOTIFICATION = "alternative_hosts_email_notification";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_HOSTS_EMAIL_NOTIFICATION)
  private Boolean alternativeHostsEmailNotification = true;

  /**
   * Enable meeting registration approval. * &#x60;0&#x60; - Automatically approve registration. * &#x60;1&#x60; - Manually approve registration. * &#x60;2&#x60; - No registration required.  This value defaults to &#x60;2&#x60;.
   */
  @JsonAdapter(ApprovalTypeEnum.Adapter.class)
 public enum ApprovalTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    ApprovalTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalTypeEnum fromValue(Integer value) {
      for (ApprovalTypeEnum b : ApprovalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ApprovalTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPROVAL_TYPE = "approval_type";
  @SerializedName(SERIALIZED_NAME_APPROVAL_TYPE)
  private ApprovalTypeEnum approvalType = ApprovalTypeEnum.NUMBER_2;

  public static final String SERIALIZED_NAME_APPROVED_OR_DENIED_COUNTRIES_OR_REGIONS = "approved_or_denied_countries_or_regions";
  @SerializedName(SERIALIZED_NAME_APPROVED_OR_DENIED_COUNTRIES_OR_REGIONS)
  private MeetingsCreateMeetingRequestSettingsApprovedOrDeniedCountriesOrRegions approvedOrDeniedCountriesOrRegions;

  /**
   * How participants join the audio portion of the meeting. * &#x60;both&#x60; - Both telephony and VoIP.  * &#x60;telephony&#x60; - Telephony only.  * &#x60;voip&#x60; - VoIP only.  * &#x60;thirdParty&#x60; - Third party audio conference.
   */
  @JsonAdapter(AudioEnum.Adapter.class)
 public enum AudioEnum {
    BOTH("both"),
    
    TELEPHONY("telephony"),
    
    VOIP("voip"),
    
    THIRDPARTY("thirdParty");

    private String value;

    AudioEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioEnum fromValue(String value) {
      for (AudioEnum b : AudioEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudioEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudioEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUDIO = "audio";
  @SerializedName(SERIALIZED_NAME_AUDIO)
  private AudioEnum audio = AudioEnum.BOTH;

  public static final String SERIALIZED_NAME_AUDIO_CONFERENCE_INFO = "audio_conference_info";
  @SerializedName(SERIALIZED_NAME_AUDIO_CONFERENCE_INFO)
  private String audioConferenceInfo;

  public static final String SERIALIZED_NAME_AUTHENTICATION_DOMAINS = "authentication_domains";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_DOMAINS)
  private String authenticationDomains;

  public static final String SERIALIZED_NAME_AUTHENTICATION_EXCEPTION = "authentication_exception";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_EXCEPTION)
  private List<MeetingsCreateMeetingRequestSettingsAuthenticationExceptionInner> authenticationException = null;

  public static final String SERIALIZED_NAME_AUTHENTICATION_OPTION = "authentication_option";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_OPTION)
  private String authenticationOption;

  /**
   * The automatic recording settings.  * &#x60;local&#x60; - Record the meeting locally.  * &#x60;cloud&#x60; - Record the meeting to the cloud.  * &#x60;none&#x60; - Auto-recording disabled.  This value defaults to &#x60;none&#x60;.
   */
  @JsonAdapter(AutoRecordingEnum.Adapter.class)
 public enum AutoRecordingEnum {
    LOCAL("local"),
    
    CLOUD("cloud"),
    
    NONE("none");

    private String value;

    AutoRecordingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoRecordingEnum fromValue(String value) {
      for (AutoRecordingEnum b : AutoRecordingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoRecordingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoRecordingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoRecordingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoRecordingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTO_RECORDING = "auto_recording";
  @SerializedName(SERIALIZED_NAME_AUTO_RECORDING)
  private AutoRecordingEnum autoRecording = AutoRecordingEnum.NONE;

  public static final String SERIALIZED_NAME_BREAKOUT_ROOM = "breakout_room";
  @SerializedName(SERIALIZED_NAME_BREAKOUT_ROOM)
  private MeetingsCreateMeetingRequestSettingsBreakoutRoom breakoutRoom;

  /**
   * Indicates the type of calendar integration used to schedule the meeting. * &#x60;1&#x60; - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)  * &#x60;2&#x60; - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)  Works with the &#x60;private_meeting&#x60; field to determine whether to share details of meetings or not.
   */
  @JsonAdapter(CalendarTypeEnum.Adapter.class)
 public enum CalendarTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    CalendarTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalendarTypeEnum fromValue(Integer value) {
      for (CalendarTypeEnum b : CalendarTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalendarTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalendarTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalendarTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return CalendarTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CALENDAR_TYPE = "calendar_type";
  @SerializedName(SERIALIZED_NAME_CALENDAR_TYPE)
  private CalendarTypeEnum calendarType;

  public static final String SERIALIZED_NAME_CLOSE_REGISTRATION = "close_registration";
  @SerializedName(SERIALIZED_NAME_CLOSE_REGISTRATION)
  private Boolean closeRegistration = false;

  public static final String SERIALIZED_NAME_CN_MEETING = "cn_meeting";
  @SerializedName(SERIALIZED_NAME_CN_MEETING)
  private Boolean cnMeeting = false;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "contact_email";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  private String contactEmail;

  public static final String SERIALIZED_NAME_CONTACT_NAME = "contact_name";
  @SerializedName(SERIALIZED_NAME_CONTACT_NAME)
  private String contactName;

  public static final String SERIALIZED_NAME_EMAIL_NOTIFICATION = "email_notification";
  @SerializedName(SERIALIZED_NAME_EMAIL_NOTIFICATION)
  private Boolean emailNotification = true;

  /**
   * The type of [end-to-end (E2EE) encryption](https://support.zoom.us/hc/en-us/articles/360048660871) to use for the meeting.  * &#x60;enhanced_encryption&#x60; - Enhanced encryption. Encryption is stored in the cloud when you enable this option.  * &#x60;e2ee&#x60; - End-to-end encryption. The encryption key is stored on your local device and **cannot** be obtained by anyone else. When you use E2EE encryption, [certain features](https://support.zoom.us/hc/en-us/articles/360048660871), such as cloud recording or phone and SIP/H.323 dial-in, are **disabled**.
   */
  @JsonAdapter(EncryptionTypeEnum.Adapter.class)
 public enum EncryptionTypeEnum {
    ENHANCED_ENCRYPTION("enhanced_encryption"),
    
    E2EE("e2ee");

    private String value;

    EncryptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionTypeEnum fromValue(String value) {
      for (EncryptionTypeEnum b : EncryptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_TYPE = "encryption_type";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_TYPE)
  private EncryptionTypeEnum encryptionType;

  public static final String SERIALIZED_NAME_FOCUS_MODE = "focus_mode";
  @SerializedName(SERIALIZED_NAME_FOCUS_MODE)
  private Boolean focusMode;

  public static final String SERIALIZED_NAME_GLOBAL_DIAL_IN_COUNTRIES = "global_dial_in_countries";
  @SerializedName(SERIALIZED_NAME_GLOBAL_DIAL_IN_COUNTRIES)
  private List<String> globalDialInCountries = null;

  public static final String SERIALIZED_NAME_HOST_VIDEO = "host_video";
  @SerializedName(SERIALIZED_NAME_HOST_VIDEO)
  private Boolean hostVideo;

  public static final String SERIALIZED_NAME_IN_MEETING = "in_meeting";
  @SerializedName(SERIALIZED_NAME_IN_MEETING)
  private Boolean inMeeting = false;

  /**
   * If the value of the &#x60;join_before_host&#x60; field is &#x60;true&#x60;, this field indicates the time limits when a participant can join a meeting before the meeting&#39;s host.  * &#x60;0&#x60; - Allow the participant to join the meeting at anytime. * &#x60;5&#x60; - Allow the participant to join 5 minutes before the meeting&#39;s start time. * &#x60;10&#x60; - Allow the participant to join 10 minutes before the meeting&#39;s start time.
   */
  @JsonAdapter(JbhTimeEnum.Adapter.class)
 public enum JbhTimeEnum {
    NUMBER_0(0),
    
    NUMBER_5(5),
    
    NUMBER_10(10);

    private Integer value;

    JbhTimeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JbhTimeEnum fromValue(Integer value) {
      for (JbhTimeEnum b : JbhTimeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JbhTimeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JbhTimeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JbhTimeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return JbhTimeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_JBH_TIME = "jbh_time";
  @SerializedName(SERIALIZED_NAME_JBH_TIME)
  private JbhTimeEnum jbhTime;

  public static final String SERIALIZED_NAME_JOIN_BEFORE_HOST = "join_before_host";
  @SerializedName(SERIALIZED_NAME_JOIN_BEFORE_HOST)
  private Boolean joinBeforeHost = false;

  public static final String SERIALIZED_NAME_LANGUAGE_INTERPRETATION = "language_interpretation";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_INTERPRETATION)
  private MeetingsCreateMeetingRequestSettingsLanguageInterpretation languageInterpretation;

  public static final String SERIALIZED_NAME_SIGN_LANGUAGE_INTERPRETATION = "sign_language_interpretation";
  @SerializedName(SERIALIZED_NAME_SIGN_LANGUAGE_INTERPRETATION)
  private MeetingsCreateMeetingRequestSettingsSignLanguageInterpretation signLanguageInterpretation;

  public static final String SERIALIZED_NAME_MEETING_AUTHENTICATION = "meeting_authentication";
  @SerializedName(SERIALIZED_NAME_MEETING_AUTHENTICATION)
  private Boolean meetingAuthentication;

  public static final String SERIALIZED_NAME_MEETING_INVITEES = "meeting_invitees";
  @SerializedName(SERIALIZED_NAME_MEETING_INVITEES)
  private List<MeetingsCreateMeetingRequestSettingsMeetingInviteesInner> meetingInvitees = null;

  public static final String SERIALIZED_NAME_MUTE_UPON_ENTRY = "mute_upon_entry";
  @SerializedName(SERIALIZED_NAME_MUTE_UPON_ENTRY)
  private Boolean muteUponEntry = false;

  public static final String SERIALIZED_NAME_PARTICIPANT_VIDEO = "participant_video";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_VIDEO)
  private Boolean participantVideo;

  public static final String SERIALIZED_NAME_PRIVATE_MEETING = "private_meeting";
  @SerializedName(SERIALIZED_NAME_PRIVATE_MEETING)
  private Boolean privateMeeting;

  public static final String SERIALIZED_NAME_REGISTRANTS_CONFIRMATION_EMAIL = "registrants_confirmation_email";
  @SerializedName(SERIALIZED_NAME_REGISTRANTS_CONFIRMATION_EMAIL)
  private Boolean registrantsConfirmationEmail;

  public static final String SERIALIZED_NAME_REGISTRANTS_EMAIL_NOTIFICATION = "registrants_email_notification";
  @SerializedName(SERIALIZED_NAME_REGISTRANTS_EMAIL_NOTIFICATION)
  private Boolean registrantsEmailNotification;

  /**
   * The meeting&#39;s registration type.  * &#x60;1&#x60; - Attendees register once and can attend any meeting occurrence.  * &#x60;2&#x60; - Attendees must register for each meeting occurrence.  * &#x60;3&#x60; - Attendees register once and can select one or more meeting occurrences to attend.  This field is only for recurring meetings with fixed times (&#x60;8&#x60;). This value defaults to &#x60;1&#x60;.
   */
  @JsonAdapter(RegistrationTypeEnum.Adapter.class)
 public enum RegistrationTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    RegistrationTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegistrationTypeEnum fromValue(Integer value) {
      for (RegistrationTypeEnum b : RegistrationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegistrationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegistrationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegistrationTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return RegistrationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REGISTRATION_TYPE = "registration_type";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_TYPE)
  private RegistrationTypeEnum registrationType = RegistrationTypeEnum.NUMBER_1;

  public static final String SERIALIZED_NAME_SHOW_SHARE_BUTTON = "show_share_button";
  @SerializedName(SERIALIZED_NAME_SHOW_SHARE_BUTTON)
  private Boolean showShareButton;

  public static final String SERIALIZED_NAME_USE_PMI = "use_pmi";
  @SerializedName(SERIALIZED_NAME_USE_PMI)
  private Boolean usePmi = false;

  public static final String SERIALIZED_NAME_WAITING_ROOM = "waiting_room";
  @SerializedName(SERIALIZED_NAME_WAITING_ROOM)
  private Boolean waitingRoom;

  public static final String SERIALIZED_NAME_WATERMARK = "watermark";
  @SerializedName(SERIALIZED_NAME_WATERMARK)
  private Boolean watermark = false;

  public static final String SERIALIZED_NAME_HOST_SAVE_VIDEO_ORDER = "host_save_video_order";
  @SerializedName(SERIALIZED_NAME_HOST_SAVE_VIDEO_ORDER)
  private Boolean hostSaveVideoOrder;

  public static final String SERIALIZED_NAME_ALTERNATIVE_HOST_UPDATE_POLLS = "alternative_host_update_polls";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_HOST_UPDATE_POLLS)
  private Boolean alternativeHostUpdatePolls;

  public static final String SERIALIZED_NAME_INTERNAL_MEETING = "internal_meeting";
  @SerializedName(SERIALIZED_NAME_INTERNAL_MEETING)
  private Boolean internalMeeting = false;

  public static final String SERIALIZED_NAME_CONTINUOUS_MEETING_CHAT = "continuous_meeting_chat";
  @SerializedName(SERIALIZED_NAME_CONTINUOUS_MEETING_CHAT)
  private MeetingsCreateMeetingRequestSettingsContinuousMeetingChat continuousMeetingChat;

  public static final String SERIALIZED_NAME_PARTICIPANT_FOCUSED_MEETING = "participant_focused_meeting";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_FOCUSED_MEETING)
  private Boolean participantFocusedMeeting = false;

  public static final String SERIALIZED_NAME_PUSH_CHANGE_TO_CALENDAR = "push_change_to_calendar";
  @SerializedName(SERIALIZED_NAME_PUSH_CHANGE_TO_CALENDAR)
  private Boolean pushChangeToCalendar = false;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<MeetingsCreateMeetingRequestSettingsResourcesInner> resources = null;

  public static final String SERIALIZED_NAME_AUTO_START_MEETING_SUMMARY = "auto_start_meeting_summary";
  @SerializedName(SERIALIZED_NAME_AUTO_START_MEETING_SUMMARY)
  private Boolean autoStartMeetingSummary = false;

  public static final String SERIALIZED_NAME_AUTO_START_AI_COMPANION_QUESTIONS = "auto_start_ai_companion_questions";
  @SerializedName(SERIALIZED_NAME_AUTO_START_AI_COMPANION_QUESTIONS)
  private Boolean autoStartAiCompanionQuestions = false;

  public MeetingsCreateMeetingRequestSettings() {
  }

  public MeetingsCreateMeetingRequestSettings additionalDataCenterRegions(List<String> additionalDataCenterRegions) {
    
    
    
    
    this.additionalDataCenterRegions = additionalDataCenterRegions;
    return this;
  }

  public MeetingsCreateMeetingRequestSettings addAdditionalDataCenterRegionsItem(String additionalDataCenterRegionsItem) {
    if (this.additionalDataCenterRegions == null) {
      this.additionalDataCenterRegions = new ArrayList<>();
    }
    this.additionalDataCenterRegions.add(additionalDataCenterRegionsItem);
    return this;
  }

   /**
   * Add additional meeting [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars). Provide this value as an array of [country codes](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries) for the countries available as data center regions in the [**Account Profile**](https://zoom.us/account/setting) interface but have been opted out of in the [user settings](https://zoom.us/profile).  For example, the data center regions selected in your [**Account Profile**](https://zoom.us/account) are &#x60;Europe&#x60;, &#x60;Hong Kong SAR&#x60;, &#x60;Australia&#x60;, &#x60;India&#x60;, &#x60;Japan&#x60;, &#x60;China&#x60;, &#x60;United States&#x60;, and &#x60;Canada&#x60;. However, in the [**My Profile**](https://zoom.us/profile) settings, you did **not** select &#x60;India&#x60; and &#x60;Japan&#x60; for meeting and webinar traffic routing.  To include &#x60;India&#x60; and &#x60;Japan&#x60; as additional data centers, use the &#x60;[IN, TY]&#x60; value for this field.
   * @return additionalDataCenterRegions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Add additional meeting [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars). Provide this value as an array of [country codes](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries) for the countries available as data center regions in the [**Account Profile**](https://zoom.us/account/setting) interface but have been opted out of in the [user settings](https://zoom.us/profile).  For example, the data center regions selected in your [**Account Profile**](https://zoom.us/account) are `Europe`, `Hong Kong SAR`, `Australia`, `India`, `Japan`, `China`, `United States`, and `Canada`. However, in the [**My Profile**](https://zoom.us/profile) settings, you did **not** select `India` and `Japan` for meeting and webinar traffic routing.  To include `India` and `Japan` as additional data centers, use the `[IN, TY]` value for this field.")

  public List<String> getAdditionalDataCenterRegions() {
    return additionalDataCenterRegions;
  }


  public void setAdditionalDataCenterRegions(List<String> additionalDataCenterRegions) {
    
    
    
    this.additionalDataCenterRegions = additionalDataCenterRegions;
  }


  public MeetingsCreateMeetingRequestSettings allowMultipleDevices(Boolean allowMultipleDevices) {
    
    
    
    
    this.allowMultipleDevices = allowMultipleDevices;
    return this;
  }

   /**
   * Whether to allow attendees to join a meeting from multiple devices. This setting is only applied to meetings with registration enabled.
   * @return allowMultipleDevices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to allow attendees to join a meeting from multiple devices. This setting is only applied to meetings with registration enabled.")

  public Boolean getAllowMultipleDevices() {
    return allowMultipleDevices;
  }


  public void setAllowMultipleDevices(Boolean allowMultipleDevices) {
    
    
    
    this.allowMultipleDevices = allowMultipleDevices;
  }


  public MeetingsCreateMeetingRequestSettings alternativeHosts(String alternativeHosts) {
    
    
    
    
    this.alternativeHosts = alternativeHosts;
    return this;
  }

   /**
   * A semicolon-separated list of the meeting&#39;s alternative hosts&#39; email addresses or IDs.
   * @return alternativeHosts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jchill@example.com;thill@example.com", value = "A semicolon-separated list of the meeting's alternative hosts' email addresses or IDs.")

  public String getAlternativeHosts() {
    return alternativeHosts;
  }


  public void setAlternativeHosts(String alternativeHosts) {
    
    
    
    this.alternativeHosts = alternativeHosts;
  }


  public MeetingsCreateMeetingRequestSettings alternativeHostsEmailNotification(Boolean alternativeHostsEmailNotification) {
    
    
    
    
    this.alternativeHostsEmailNotification = alternativeHostsEmailNotification;
    return this;
  }

   /**
   * Whether to send email notifications to alternative hosts. This value defaults to &#x60;true&#x60;.
   * @return alternativeHostsEmailNotification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to send email notifications to alternative hosts. This value defaults to `true`.")

  public Boolean getAlternativeHostsEmailNotification() {
    return alternativeHostsEmailNotification;
  }


  public void setAlternativeHostsEmailNotification(Boolean alternativeHostsEmailNotification) {
    
    
    
    this.alternativeHostsEmailNotification = alternativeHostsEmailNotification;
  }


  public MeetingsCreateMeetingRequestSettings approvalType(ApprovalTypeEnum approvalType) {
    
    
    
    
    this.approvalType = approvalType;
    return this;
  }

   /**
   * Enable meeting registration approval. * &#x60;0&#x60; - Automatically approve registration. * &#x60;1&#x60; - Manually approve registration. * &#x60;2&#x60; - No registration required.  This value defaults to &#x60;2&#x60;.
   * @return approvalType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_2", value = "Enable meeting registration approval. * `0` - Automatically approve registration. * `1` - Manually approve registration. * `2` - No registration required.  This value defaults to `2`.")

  public ApprovalTypeEnum getApprovalType() {
    return approvalType;
  }


  public void setApprovalType(ApprovalTypeEnum approvalType) {
    
    
    
    this.approvalType = approvalType;
  }


  public MeetingsCreateMeetingRequestSettings approvedOrDeniedCountriesOrRegions(MeetingsCreateMeetingRequestSettingsApprovedOrDeniedCountriesOrRegions approvedOrDeniedCountriesOrRegions) {
    
    
    
    
    this.approvedOrDeniedCountriesOrRegions = approvedOrDeniedCountriesOrRegions;
    return this;
  }

   /**
   * Get approvedOrDeniedCountriesOrRegions
   * @return approvedOrDeniedCountriesOrRegions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsCreateMeetingRequestSettingsApprovedOrDeniedCountriesOrRegions getApprovedOrDeniedCountriesOrRegions() {
    return approvedOrDeniedCountriesOrRegions;
  }


  public void setApprovedOrDeniedCountriesOrRegions(MeetingsCreateMeetingRequestSettingsApprovedOrDeniedCountriesOrRegions approvedOrDeniedCountriesOrRegions) {
    
    
    
    this.approvedOrDeniedCountriesOrRegions = approvedOrDeniedCountriesOrRegions;
  }


  public MeetingsCreateMeetingRequestSettings audio(AudioEnum audio) {
    
    
    
    
    this.audio = audio;
    return this;
  }

   /**
   * How participants join the audio portion of the meeting. * &#x60;both&#x60; - Both telephony and VoIP.  * &#x60;telephony&#x60; - Telephony only.  * &#x60;voip&#x60; - VoIP only.  * &#x60;thirdParty&#x60; - Third party audio conference.
   * @return audio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TELEPHONY", value = "How participants join the audio portion of the meeting. * `both` - Both telephony and VoIP.  * `telephony` - Telephony only.  * `voip` - VoIP only.  * `thirdParty` - Third party audio conference.")

  public AudioEnum getAudio() {
    return audio;
  }


  public void setAudio(AudioEnum audio) {
    
    
    
    this.audio = audio;
  }


  public MeetingsCreateMeetingRequestSettings audioConferenceInfo(String audioConferenceInfo) {
    
    
    
    
    this.audioConferenceInfo = audioConferenceInfo;
    return this;
  }

   /**
   * Third party audio conference info.
   * @return audioConferenceInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "test", value = "Third party audio conference info.")

  public String getAudioConferenceInfo() {
    return audioConferenceInfo;
  }


  public void setAudioConferenceInfo(String audioConferenceInfo) {
    
    
    
    this.audioConferenceInfo = audioConferenceInfo;
  }


  public MeetingsCreateMeetingRequestSettings authenticationDomains(String authenticationDomains) {
    
    
    
    
    this.authenticationDomains = authenticationDomains;
    return this;
  }

   /**
   * The meeting&#39;s authenticated domains. Only Zoom users whose email address contains an authenticated domain can join the meeting. Comma-separate multiple domains or use a wildcard for listing domains.
   * @return authenticationDomains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example.com", value = "The meeting's authenticated domains. Only Zoom users whose email address contains an authenticated domain can join the meeting. Comma-separate multiple domains or use a wildcard for listing domains.")

  public String getAuthenticationDomains() {
    return authenticationDomains;
  }


  public void setAuthenticationDomains(String authenticationDomains) {
    
    
    
    this.authenticationDomains = authenticationDomains;
  }


  public MeetingsCreateMeetingRequestSettings authenticationException(List<MeetingsCreateMeetingRequestSettingsAuthenticationExceptionInner> authenticationException) {
    
    
    
    
    this.authenticationException = authenticationException;
    return this;
  }

  public MeetingsCreateMeetingRequestSettings addAuthenticationExceptionItem(MeetingsCreateMeetingRequestSettingsAuthenticationExceptionInner authenticationExceptionItem) {
    if (this.authenticationException == null) {
      this.authenticationException = new ArrayList<>();
    }
    this.authenticationException.add(authenticationExceptionItem);
    return this;
  }

   /**
   * A list of participants that can bypass meeting authentication. These participants will receive a unique meeting invite.
   * @return authenticationException
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of participants that can bypass meeting authentication. These participants will receive a unique meeting invite.")

  public List<MeetingsCreateMeetingRequestSettingsAuthenticationExceptionInner> getAuthenticationException() {
    return authenticationException;
  }


  public void setAuthenticationException(List<MeetingsCreateMeetingRequestSettingsAuthenticationExceptionInner> authenticationException) {
    
    
    
    this.authenticationException = authenticationException;
  }


  public MeetingsCreateMeetingRequestSettings authenticationOption(String authenticationOption) {
    
    
    
    
    this.authenticationOption = authenticationOption;
    return this;
  }

   /**
   * If the &#x60;meeting_authentication&#x60; value is &#x60;true&#x60;, the type of authentication required for users to join a meeting.  To get this value, use the &#x60;authentication_options&#x60; array&#39;s &#x60;id&#x60; value in the [**Get user settings**](https://developers.zoom.us/docs/api-reference/zoom-api/methods#operation/userSettings) API response.
   * @return authenticationOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "signIn_D8cJuqWVQ623CI4Q8yQK0Q", value = "If the `meeting_authentication` value is `true`, the type of authentication required for users to join a meeting.  To get this value, use the `authentication_options` array's `id` value in the [**Get user settings**](https://developers.zoom.us/docs/api-reference/zoom-api/methods#operation/userSettings) API response.")

  public String getAuthenticationOption() {
    return authenticationOption;
  }


  public void setAuthenticationOption(String authenticationOption) {
    
    
    
    this.authenticationOption = authenticationOption;
  }


  public MeetingsCreateMeetingRequestSettings autoRecording(AutoRecordingEnum autoRecording) {
    
    
    
    
    this.autoRecording = autoRecording;
    return this;
  }

   /**
   * The automatic recording settings.  * &#x60;local&#x60; - Record the meeting locally.  * &#x60;cloud&#x60; - Record the meeting to the cloud.  * &#x60;none&#x60; - Auto-recording disabled.  This value defaults to &#x60;none&#x60;.
   * @return autoRecording
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CLOUD", value = "The automatic recording settings.  * `local` - Record the meeting locally.  * `cloud` - Record the meeting to the cloud.  * `none` - Auto-recording disabled.  This value defaults to `none`.")

  public AutoRecordingEnum getAutoRecording() {
    return autoRecording;
  }


  public void setAutoRecording(AutoRecordingEnum autoRecording) {
    
    
    
    this.autoRecording = autoRecording;
  }


  public MeetingsCreateMeetingRequestSettings breakoutRoom(MeetingsCreateMeetingRequestSettingsBreakoutRoom breakoutRoom) {
    
    
    
    
    this.breakoutRoom = breakoutRoom;
    return this;
  }

   /**
   * Get breakoutRoom
   * @return breakoutRoom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsCreateMeetingRequestSettingsBreakoutRoom getBreakoutRoom() {
    return breakoutRoom;
  }


  public void setBreakoutRoom(MeetingsCreateMeetingRequestSettingsBreakoutRoom breakoutRoom) {
    
    
    
    this.breakoutRoom = breakoutRoom;
  }


  public MeetingsCreateMeetingRequestSettings calendarType(CalendarTypeEnum calendarType) {
    
    
    
    
    this.calendarType = calendarType;
    return this;
  }

   /**
   * Indicates the type of calendar integration used to schedule the meeting. * &#x60;1&#x60; - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)  * &#x60;2&#x60; - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)  Works with the &#x60;private_meeting&#x60; field to determine whether to share details of meetings or not.
   * @return calendarType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_1", value = "Indicates the type of calendar integration used to schedule the meeting. * `1` - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)  * `2` - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)  Works with the `private_meeting` field to determine whether to share details of meetings or not.")

  public CalendarTypeEnum getCalendarType() {
    return calendarType;
  }


  public void setCalendarType(CalendarTypeEnum calendarType) {
    
    
    
    this.calendarType = calendarType;
  }


  public MeetingsCreateMeetingRequestSettings closeRegistration(Boolean closeRegistration) {
    
    
    
    
    this.closeRegistration = closeRegistration;
    return this;
  }

   /**
   * Whether to close registration after the event date. This value defaults to &#x60;false&#x60;.
   * @return closeRegistration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to close registration after the event date. This value defaults to `false`.")

  public Boolean getCloseRegistration() {
    return closeRegistration;
  }


  public void setCloseRegistration(Boolean closeRegistration) {
    
    
    
    this.closeRegistration = closeRegistration;
  }


  public MeetingsCreateMeetingRequestSettings cnMeeting(Boolean cnMeeting) {
    
    
    
    
    this.cnMeeting = cnMeeting;
    return this;
  }

   /**
   * Whether to host the meeting in China (CN). This value defaults to &#x60;false&#x60;.
   * @return cnMeeting
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to host the meeting in China (CN). This value defaults to `false`.")

  public Boolean getCnMeeting() {
    return cnMeeting;
  }


  public void setCnMeeting(Boolean cnMeeting) {
    
    
    
    this.cnMeeting = cnMeeting;
  }


  public MeetingsCreateMeetingRequestSettings contactEmail(String contactEmail) {
    
    
    
    
    this.contactEmail = contactEmail;
    return this;
  }

   /**
   * The contact email address for meeting registration.
   * @return contactEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jchill@example.com", value = "The contact email address for meeting registration.")

  public String getContactEmail() {
    return contactEmail;
  }


  public void setContactEmail(String contactEmail) {
    
    
    
    this.contactEmail = contactEmail;
  }


  public MeetingsCreateMeetingRequestSettings contactName(String contactName) {
    
    
    
    
    this.contactName = contactName;
    return this;
  }

   /**
   * The contact name for meeting registration.
   * @return contactName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jill Chill", value = "The contact name for meeting registration.")

  public String getContactName() {
    return contactName;
  }


  public void setContactName(String contactName) {
    
    
    
    this.contactName = contactName;
  }


  public MeetingsCreateMeetingRequestSettings emailNotification(Boolean emailNotification) {
    
    
    
    
    this.emailNotification = emailNotification;
    return this;
  }

   /**
   * Whether to send email notifications to [alternative hosts](https://support.zoom.us/hc/en-us/articles/208220166) and [users with scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege). This value defaults to &#x60;true&#x60;.
   * @return emailNotification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to send email notifications to [alternative hosts](https://support.zoom.us/hc/en-us/articles/208220166) and [users with scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege). This value defaults to `true`.")

  public Boolean getEmailNotification() {
    return emailNotification;
  }


  public void setEmailNotification(Boolean emailNotification) {
    
    
    
    this.emailNotification = emailNotification;
  }


  public MeetingsCreateMeetingRequestSettings encryptionType(EncryptionTypeEnum encryptionType) {
    
    
    
    
    this.encryptionType = encryptionType;
    return this;
  }

   /**
   * The type of [end-to-end (E2EE) encryption](https://support.zoom.us/hc/en-us/articles/360048660871) to use for the meeting.  * &#x60;enhanced_encryption&#x60; - Enhanced encryption. Encryption is stored in the cloud when you enable this option.  * &#x60;e2ee&#x60; - End-to-end encryption. The encryption key is stored on your local device and **cannot** be obtained by anyone else. When you use E2EE encryption, [certain features](https://support.zoom.us/hc/en-us/articles/360048660871), such as cloud recording or phone and SIP/H.323 dial-in, are **disabled**.
   * @return encryptionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ENHANCED_ENCRYPTION", value = "The type of [end-to-end (E2EE) encryption](https://support.zoom.us/hc/en-us/articles/360048660871) to use for the meeting.  * `enhanced_encryption` - Enhanced encryption. Encryption is stored in the cloud when you enable this option.  * `e2ee` - End-to-end encryption. The encryption key is stored on your local device and **cannot** be obtained by anyone else. When you use E2EE encryption, [certain features](https://support.zoom.us/hc/en-us/articles/360048660871), such as cloud recording or phone and SIP/H.323 dial-in, are **disabled**.")

  public EncryptionTypeEnum getEncryptionType() {
    return encryptionType;
  }


  public void setEncryptionType(EncryptionTypeEnum encryptionType) {
    
    
    
    this.encryptionType = encryptionType;
  }


  public MeetingsCreateMeetingRequestSettings focusMode(Boolean focusMode) {
    
    
    
    
    this.focusMode = focusMode;
    return this;
  }

   /**
   * Whether to enable the [**Focus Mode** feature](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) when the meeting starts.
   * @return focusMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to enable the [**Focus Mode** feature](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) when the meeting starts.")

  public Boolean getFocusMode() {
    return focusMode;
  }


  public void setFocusMode(Boolean focusMode) {
    
    
    
    this.focusMode = focusMode;
  }


  public MeetingsCreateMeetingRequestSettings globalDialInCountries(List<String> globalDialInCountries) {
    
    
    
    
    this.globalDialInCountries = globalDialInCountries;
    return this;
  }

  public MeetingsCreateMeetingRequestSettings addGlobalDialInCountriesItem(String globalDialInCountriesItem) {
    if (this.globalDialInCountries == null) {
      this.globalDialInCountries = new ArrayList<>();
    }
    this.globalDialInCountries.add(globalDialInCountriesItem);
    return this;
  }

   /**
   * A list of available global dial-in countries.
   * @return globalDialInCountries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of available global dial-in countries.")

  public List<String> getGlobalDialInCountries() {
    return globalDialInCountries;
  }


  public void setGlobalDialInCountries(List<String> globalDialInCountries) {
    
    
    
    this.globalDialInCountries = globalDialInCountries;
  }


  public MeetingsCreateMeetingRequestSettings hostVideo(Boolean hostVideo) {
    
    
    
    
    this.hostVideo = hostVideo;
    return this;
  }

   /**
   * Whether to start meetings with the host video on.
   * @return hostVideo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to start meetings with the host video on.")

  public Boolean getHostVideo() {
    return hostVideo;
  }


  public void setHostVideo(Boolean hostVideo) {
    
    
    
    this.hostVideo = hostVideo;
  }


  public MeetingsCreateMeetingRequestSettings inMeeting(Boolean inMeeting) {
    
    
    
    
    this.inMeeting = inMeeting;
    return this;
  }

   /**
   * Whether to host the meeting in India (IN). This value defaults to &#x60;false&#x60;.
   * @return inMeeting
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to host the meeting in India (IN). This value defaults to `false`.")

  public Boolean getInMeeting() {
    return inMeeting;
  }


  public void setInMeeting(Boolean inMeeting) {
    
    
    
    this.inMeeting = inMeeting;
  }


  public MeetingsCreateMeetingRequestSettings jbhTime(JbhTimeEnum jbhTime) {
    
    
    
    
    this.jbhTime = jbhTime;
    return this;
  }

   /**
   * If the value of the &#x60;join_before_host&#x60; field is &#x60;true&#x60;, this field indicates the time limits when a participant can join a meeting before the meeting&#39;s host.  * &#x60;0&#x60; - Allow the participant to join the meeting at anytime. * &#x60;5&#x60; - Allow the participant to join 5 minutes before the meeting&#39;s start time. * &#x60;10&#x60; - Allow the participant to join 10 minutes before the meeting&#39;s start time.
   * @return jbhTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_0", value = "If the value of the `join_before_host` field is `true`, this field indicates the time limits when a participant can join a meeting before the meeting's host.  * `0` - Allow the participant to join the meeting at anytime. * `5` - Allow the participant to join 5 minutes before the meeting's start time. * `10` - Allow the participant to join 10 minutes before the meeting's start time.")

  public JbhTimeEnum getJbhTime() {
    return jbhTime;
  }


  public void setJbhTime(JbhTimeEnum jbhTime) {
    
    
    
    this.jbhTime = jbhTime;
  }


  public MeetingsCreateMeetingRequestSettings joinBeforeHost(Boolean joinBeforeHost) {
    
    
    
    
    this.joinBeforeHost = joinBeforeHost;
    return this;
  }

   /**
   * Whether participants can join the meeting before its host. This field is only used for scheduled meetings (&#x60;2&#x60;) or recurring meetings (&#x60;3&#x60; and &#x60;8&#x60;). This value defaults to &#x60;false&#x60;.  If the [**Waiting Room** feature](https://support.zoom.us/hc/en-us/articles/115000332726-Waiting-Room) is enabled, this setting is **disabled**.
   * @return joinBeforeHost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether participants can join the meeting before its host. This field is only used for scheduled meetings (`2`) or recurring meetings (`3` and `8`). This value defaults to `false`.  If the [**Waiting Room** feature](https://support.zoom.us/hc/en-us/articles/115000332726-Waiting-Room) is enabled, this setting is **disabled**.")

  public Boolean getJoinBeforeHost() {
    return joinBeforeHost;
  }


  public void setJoinBeforeHost(Boolean joinBeforeHost) {
    
    
    
    this.joinBeforeHost = joinBeforeHost;
  }


  public MeetingsCreateMeetingRequestSettings languageInterpretation(MeetingsCreateMeetingRequestSettingsLanguageInterpretation languageInterpretation) {
    
    
    
    
    this.languageInterpretation = languageInterpretation;
    return this;
  }

   /**
   * Get languageInterpretation
   * @return languageInterpretation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsCreateMeetingRequestSettingsLanguageInterpretation getLanguageInterpretation() {
    return languageInterpretation;
  }


  public void setLanguageInterpretation(MeetingsCreateMeetingRequestSettingsLanguageInterpretation languageInterpretation) {
    
    
    
    this.languageInterpretation = languageInterpretation;
  }


  public MeetingsCreateMeetingRequestSettings signLanguageInterpretation(MeetingsCreateMeetingRequestSettingsSignLanguageInterpretation signLanguageInterpretation) {
    
    
    
    
    this.signLanguageInterpretation = signLanguageInterpretation;
    return this;
  }

   /**
   * Get signLanguageInterpretation
   * @return signLanguageInterpretation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsCreateMeetingRequestSettingsSignLanguageInterpretation getSignLanguageInterpretation() {
    return signLanguageInterpretation;
  }


  public void setSignLanguageInterpretation(MeetingsCreateMeetingRequestSettingsSignLanguageInterpretation signLanguageInterpretation) {
    
    
    
    this.signLanguageInterpretation = signLanguageInterpretation;
  }


  public MeetingsCreateMeetingRequestSettings meetingAuthentication(Boolean meetingAuthentication) {
    
    
    
    
    this.meetingAuthentication = meetingAuthentication;
    return this;
  }

   /**
   * If true, only [authenticated](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) users can join the meeting.
   * @return meetingAuthentication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "If true, only [authenticated](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) users can join the meeting.")

  public Boolean getMeetingAuthentication() {
    return meetingAuthentication;
  }


  public void setMeetingAuthentication(Boolean meetingAuthentication) {
    
    
    
    this.meetingAuthentication = meetingAuthentication;
  }


  public MeetingsCreateMeetingRequestSettings meetingInvitees(List<MeetingsCreateMeetingRequestSettingsMeetingInviteesInner> meetingInvitees) {
    
    
    
    
    this.meetingInvitees = meetingInvitees;
    return this;
  }

  public MeetingsCreateMeetingRequestSettings addMeetingInviteesItem(MeetingsCreateMeetingRequestSettingsMeetingInviteesInner meetingInviteesItem) {
    if (this.meetingInvitees == null) {
      this.meetingInvitees = new ArrayList<>();
    }
    this.meetingInvitees.add(meetingInviteesItem);
    return this;
  }

   /**
   * A list of the meeting&#39;s invitees.
   * @return meetingInvitees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of the meeting's invitees.")

  public List<MeetingsCreateMeetingRequestSettingsMeetingInviteesInner> getMeetingInvitees() {
    return meetingInvitees;
  }


  public void setMeetingInvitees(List<MeetingsCreateMeetingRequestSettingsMeetingInviteesInner> meetingInvitees) {
    
    
    
    this.meetingInvitees = meetingInvitees;
  }


  public MeetingsCreateMeetingRequestSettings muteUponEntry(Boolean muteUponEntry) {
    
    
    
    
    this.muteUponEntry = muteUponEntry;
    return this;
  }

   /**
   * Whether to mute participants upon entry.
   * @return muteUponEntry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to mute participants upon entry.")

  public Boolean getMuteUponEntry() {
    return muteUponEntry;
  }


  public void setMuteUponEntry(Boolean muteUponEntry) {
    
    
    
    this.muteUponEntry = muteUponEntry;
  }


  public MeetingsCreateMeetingRequestSettings participantVideo(Boolean participantVideo) {
    
    
    
    
    this.participantVideo = participantVideo;
    return this;
  }

   /**
   * Whether to start meetings with the participant video on.
   * @return participantVideo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to start meetings with the participant video on.")

  public Boolean getParticipantVideo() {
    return participantVideo;
  }


  public void setParticipantVideo(Boolean participantVideo) {
    
    
    
    this.participantVideo = participantVideo;
  }


  public MeetingsCreateMeetingRequestSettings privateMeeting(Boolean privateMeeting) {
    
    
    
    
    this.privateMeeting = privateMeeting;
    return this;
  }

   /**
   * Whether to set the meeting as private.
   * @return privateMeeting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to set the meeting as private.")

  public Boolean getPrivateMeeting() {
    return privateMeeting;
  }


  public void setPrivateMeeting(Boolean privateMeeting) {
    
    
    
    this.privateMeeting = privateMeeting;
  }


  public MeetingsCreateMeetingRequestSettings registrantsConfirmationEmail(Boolean registrantsConfirmationEmail) {
    
    
    
    
    this.registrantsConfirmationEmail = registrantsConfirmationEmail;
    return this;
  }

   /**
   * Whether to send registrants an email confirmation.  * &#x60;true&#x60; - Send a confirmation email.  * &#x60;false&#x60; - Do not send a confirmation email.
   * @return registrantsConfirmationEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to send registrants an email confirmation.  * `true` - Send a confirmation email.  * `false` - Do not send a confirmation email.")

  public Boolean getRegistrantsConfirmationEmail() {
    return registrantsConfirmationEmail;
  }


  public void setRegistrantsConfirmationEmail(Boolean registrantsConfirmationEmail) {
    
    
    
    this.registrantsConfirmationEmail = registrantsConfirmationEmail;
  }


  public MeetingsCreateMeetingRequestSettings registrantsEmailNotification(Boolean registrantsEmailNotification) {
    
    
    
    
    this.registrantsEmailNotification = registrantsEmailNotification;
    return this;
  }

   /**
   * Whether to send registrants email notifications about their registration approval, cancellation, or rejection.  * &#x60;true&#x60; - Send an email notification. * &#x60;false&#x60; - Do not send an email notification.   Set this value to &#x60;true&#x60; to also use the &#x60;registrants_confirmation_email&#x60; parameter.
   * @return registrantsEmailNotification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to send registrants email notifications about their registration approval, cancellation, or rejection.  * `true` - Send an email notification. * `false` - Do not send an email notification.   Set this value to `true` to also use the `registrants_confirmation_email` parameter.")

  public Boolean getRegistrantsEmailNotification() {
    return registrantsEmailNotification;
  }


  public void setRegistrantsEmailNotification(Boolean registrantsEmailNotification) {
    
    
    
    this.registrantsEmailNotification = registrantsEmailNotification;
  }


  public MeetingsCreateMeetingRequestSettings registrationType(RegistrationTypeEnum registrationType) {
    
    
    
    
    this.registrationType = registrationType;
    return this;
  }

   /**
   * The meeting&#39;s registration type.  * &#x60;1&#x60; - Attendees register once and can attend any meeting occurrence.  * &#x60;2&#x60; - Attendees must register for each meeting occurrence.  * &#x60;3&#x60; - Attendees register once and can select one or more meeting occurrences to attend.  This field is only for recurring meetings with fixed times (&#x60;8&#x60;). This value defaults to &#x60;1&#x60;.
   * @return registrationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_1", value = "The meeting's registration type.  * `1` - Attendees register once and can attend any meeting occurrence.  * `2` - Attendees must register for each meeting occurrence.  * `3` - Attendees register once and can select one or more meeting occurrences to attend.  This field is only for recurring meetings with fixed times (`8`). This value defaults to `1`.")

  public RegistrationTypeEnum getRegistrationType() {
    return registrationType;
  }


  public void setRegistrationType(RegistrationTypeEnum registrationType) {
    
    
    
    this.registrationType = registrationType;
  }


  public MeetingsCreateMeetingRequestSettings showShareButton(Boolean showShareButton) {
    
    
    
    
    this.showShareButton = showShareButton;
    return this;
  }

   /**
   * Whether to include social media sharing buttons on the meeting&#39;s registration page. This setting is only applied to meetings with registration enabled.
   * @return showShareButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to include social media sharing buttons on the meeting's registration page. This setting is only applied to meetings with registration enabled.")

  public Boolean getShowShareButton() {
    return showShareButton;
  }


  public void setShowShareButton(Boolean showShareButton) {
    
    
    
    this.showShareButton = showShareButton;
  }


  public MeetingsCreateMeetingRequestSettings usePmi(Boolean usePmi) {
    
    
    
    
    this.usePmi = usePmi;
    return this;
  }

   /**
   * Whether to use a [Personal Meeting ID (PMI)](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi) instead of a generated meeting ID. This field is only used for scheduled meetings (&#x60;2&#x60;), instant meetings (&#x60;1&#x60;), or recurring meetings with no fixed time (&#x60;3&#x60;). This value defaults to &#x60;false&#x60;.
   * @return usePmi
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to use a [Personal Meeting ID (PMI)](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi) instead of a generated meeting ID. This field is only used for scheduled meetings (`2`), instant meetings (`1`), or recurring meetings with no fixed time (`3`). This value defaults to `false`.")

  public Boolean getUsePmi() {
    return usePmi;
  }


  public void setUsePmi(Boolean usePmi) {
    
    
    
    this.usePmi = usePmi;
  }


  public MeetingsCreateMeetingRequestSettings waitingRoom(Boolean waitingRoom) {
    
    
    
    
    this.waitingRoom = waitingRoom;
    return this;
  }

   /**
   * Whether to enable the [**Waiting Room** feature](https://support.zoom.us/hc/en-us/articles/115000332726-Waiting-Room). If this value is &#x60;true&#x60;, this **disables** the &#x60;join_before_host&#x60; setting.
   * @return waitingRoom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to enable the [**Waiting Room** feature](https://support.zoom.us/hc/en-us/articles/115000332726-Waiting-Room). If this value is `true`, this **disables** the `join_before_host` setting.")

  public Boolean getWaitingRoom() {
    return waitingRoom;
  }


  public void setWaitingRoom(Boolean waitingRoom) {
    
    
    
    this.waitingRoom = waitingRoom;
  }


  public MeetingsCreateMeetingRequestSettings watermark(Boolean watermark) {
    
    
    
    
    this.watermark = watermark;
    return this;
  }

   /**
   * Whether to add a watermark when viewing a shared screen.
   * @return watermark
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to add a watermark when viewing a shared screen.")

  public Boolean getWatermark() {
    return watermark;
  }


  public void setWatermark(Boolean watermark) {
    
    
    
    this.watermark = watermark;
  }


  public MeetingsCreateMeetingRequestSettings hostSaveVideoOrder(Boolean hostSaveVideoOrder) {
    
    
    
    
    this.hostSaveVideoOrder = hostSaveVideoOrder;
    return this;
  }

   /**
   * Whether the **Allow host to save video order** feature is enabled.
   * @return hostSaveVideoOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the **Allow host to save video order** feature is enabled.")

  public Boolean getHostSaveVideoOrder() {
    return hostSaveVideoOrder;
  }


  public void setHostSaveVideoOrder(Boolean hostSaveVideoOrder) {
    
    
    
    this.hostSaveVideoOrder = hostSaveVideoOrder;
  }


  public MeetingsCreateMeetingRequestSettings alternativeHostUpdatePolls(Boolean alternativeHostUpdatePolls) {
    
    
    
    
    this.alternativeHostUpdatePolls = alternativeHostUpdatePolls;
    return this;
  }

   /**
   * Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
   * @return alternativeHostUpdatePolls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.")

  public Boolean getAlternativeHostUpdatePolls() {
    return alternativeHostUpdatePolls;
  }


  public void setAlternativeHostUpdatePolls(Boolean alternativeHostUpdatePolls) {
    
    
    
    this.alternativeHostUpdatePolls = alternativeHostUpdatePolls;
  }


  public MeetingsCreateMeetingRequestSettings internalMeeting(Boolean internalMeeting) {
    
    
    
    
    this.internalMeeting = internalMeeting;
    return this;
  }

   /**
   * Whether to set the meeting as an internal meeting.
   * @return internalMeeting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to set the meeting as an internal meeting.")

  public Boolean getInternalMeeting() {
    return internalMeeting;
  }


  public void setInternalMeeting(Boolean internalMeeting) {
    
    
    
    this.internalMeeting = internalMeeting;
  }


  public MeetingsCreateMeetingRequestSettings continuousMeetingChat(MeetingsCreateMeetingRequestSettingsContinuousMeetingChat continuousMeetingChat) {
    
    
    
    
    this.continuousMeetingChat = continuousMeetingChat;
    return this;
  }

   /**
   * Get continuousMeetingChat
   * @return continuousMeetingChat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsCreateMeetingRequestSettingsContinuousMeetingChat getContinuousMeetingChat() {
    return continuousMeetingChat;
  }


  public void setContinuousMeetingChat(MeetingsCreateMeetingRequestSettingsContinuousMeetingChat continuousMeetingChat) {
    
    
    
    this.continuousMeetingChat = continuousMeetingChat;
  }


  public MeetingsCreateMeetingRequestSettings participantFocusedMeeting(Boolean participantFocusedMeeting) {
    
    
    
    
    this.participantFocusedMeeting = participantFocusedMeeting;
    return this;
  }

   /**
   * Whether to set the meeting as a participant focused meeting.
   * @return participantFocusedMeeting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to set the meeting as a participant focused meeting.")

  public Boolean getParticipantFocusedMeeting() {
    return participantFocusedMeeting;
  }


  public void setParticipantFocusedMeeting(Boolean participantFocusedMeeting) {
    
    
    
    this.participantFocusedMeeting = participantFocusedMeeting;
  }


  public MeetingsCreateMeetingRequestSettings pushChangeToCalendar(Boolean pushChangeToCalendar) {
    
    
    
    
    this.pushChangeToCalendar = pushChangeToCalendar;
    return this;
  }

   /**
   * Whether to push meeting changes to the calendar.    To enable this feature, configure the **Configure Calendar and Contacts Service** in the user&#39;s profile page of the Zoom web portal and enable the **Automatically sync Zoom calendar events information bi-directionally between Zoom and integrated calendars.** setting in the **Settings** page of the Zoom web portal. * &#x60;true&#x60; - Push meeting changes to the calendar. * &#x60;false&#x60; - Do not push meeting changes to the calendar.
   * @return pushChangeToCalendar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to push meeting changes to the calendar.    To enable this feature, configure the **Configure Calendar and Contacts Service** in the user's profile page of the Zoom web portal and enable the **Automatically sync Zoom calendar events information bi-directionally between Zoom and integrated calendars.** setting in the **Settings** page of the Zoom web portal. * `true` - Push meeting changes to the calendar. * `false` - Do not push meeting changes to the calendar.")

  public Boolean getPushChangeToCalendar() {
    return pushChangeToCalendar;
  }


  public void setPushChangeToCalendar(Boolean pushChangeToCalendar) {
    
    
    
    this.pushChangeToCalendar = pushChangeToCalendar;
  }


  public MeetingsCreateMeetingRequestSettings resources(List<MeetingsCreateMeetingRequestSettingsResourcesInner> resources) {
    
    
    
    
    this.resources = resources;
    return this;
  }

  public MeetingsCreateMeetingRequestSettings addResourcesItem(MeetingsCreateMeetingRequestSettingsResourcesInner resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * The meeting&#39;s resources.
   * @return resources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The meeting's resources.")

  public List<MeetingsCreateMeetingRequestSettingsResourcesInner> getResources() {
    return resources;
  }


  public void setResources(List<MeetingsCreateMeetingRequestSettingsResourcesInner> resources) {
    
    
    
    this.resources = resources;
  }


  public MeetingsCreateMeetingRequestSettings autoStartMeetingSummary(Boolean autoStartMeetingSummary) {
    
    
    
    
    this.autoStartMeetingSummary = autoStartMeetingSummary;
    return this;
  }

   /**
   * Whether to automatically start a meeting summary.
   * @return autoStartMeetingSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to automatically start a meeting summary.")

  public Boolean getAutoStartMeetingSummary() {
    return autoStartMeetingSummary;
  }


  public void setAutoStartMeetingSummary(Boolean autoStartMeetingSummary) {
    
    
    
    this.autoStartMeetingSummary = autoStartMeetingSummary;
  }


  public MeetingsCreateMeetingRequestSettings autoStartAiCompanionQuestions(Boolean autoStartAiCompanionQuestions) {
    
    
    
    
    this.autoStartAiCompanionQuestions = autoStartAiCompanionQuestions;
    return this;
  }

   /**
   * Whether to automatically start AI Companion questions.
   * @return autoStartAiCompanionQuestions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to automatically start AI Companion questions.")

  public Boolean getAutoStartAiCompanionQuestions() {
    return autoStartAiCompanionQuestions;
  }


  public void setAutoStartAiCompanionQuestions(Boolean autoStartAiCompanionQuestions) {
    
    
    
    this.autoStartAiCompanionQuestions = autoStartAiCompanionQuestions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MeetingsCreateMeetingRequestSettings instance itself
   */
  public MeetingsCreateMeetingRequestSettings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingsCreateMeetingRequestSettings meetingsCreateMeetingRequestSettings = (MeetingsCreateMeetingRequestSettings) o;
    return Objects.equals(this.additionalDataCenterRegions, meetingsCreateMeetingRequestSettings.additionalDataCenterRegions) &&
        Objects.equals(this.allowMultipleDevices, meetingsCreateMeetingRequestSettings.allowMultipleDevices) &&
        Objects.equals(this.alternativeHosts, meetingsCreateMeetingRequestSettings.alternativeHosts) &&
        Objects.equals(this.alternativeHostsEmailNotification, meetingsCreateMeetingRequestSettings.alternativeHostsEmailNotification) &&
        Objects.equals(this.approvalType, meetingsCreateMeetingRequestSettings.approvalType) &&
        Objects.equals(this.approvedOrDeniedCountriesOrRegions, meetingsCreateMeetingRequestSettings.approvedOrDeniedCountriesOrRegions) &&
        Objects.equals(this.audio, meetingsCreateMeetingRequestSettings.audio) &&
        Objects.equals(this.audioConferenceInfo, meetingsCreateMeetingRequestSettings.audioConferenceInfo) &&
        Objects.equals(this.authenticationDomains, meetingsCreateMeetingRequestSettings.authenticationDomains) &&
        Objects.equals(this.authenticationException, meetingsCreateMeetingRequestSettings.authenticationException) &&
        Objects.equals(this.authenticationOption, meetingsCreateMeetingRequestSettings.authenticationOption) &&
        Objects.equals(this.autoRecording, meetingsCreateMeetingRequestSettings.autoRecording) &&
        Objects.equals(this.breakoutRoom, meetingsCreateMeetingRequestSettings.breakoutRoom) &&
        Objects.equals(this.calendarType, meetingsCreateMeetingRequestSettings.calendarType) &&
        Objects.equals(this.closeRegistration, meetingsCreateMeetingRequestSettings.closeRegistration) &&
        Objects.equals(this.cnMeeting, meetingsCreateMeetingRequestSettings.cnMeeting) &&
        Objects.equals(this.contactEmail, meetingsCreateMeetingRequestSettings.contactEmail) &&
        Objects.equals(this.contactName, meetingsCreateMeetingRequestSettings.contactName) &&
        Objects.equals(this.emailNotification, meetingsCreateMeetingRequestSettings.emailNotification) &&
        Objects.equals(this.encryptionType, meetingsCreateMeetingRequestSettings.encryptionType) &&
        Objects.equals(this.focusMode, meetingsCreateMeetingRequestSettings.focusMode) &&
        Objects.equals(this.globalDialInCountries, meetingsCreateMeetingRequestSettings.globalDialInCountries) &&
        Objects.equals(this.hostVideo, meetingsCreateMeetingRequestSettings.hostVideo) &&
        Objects.equals(this.inMeeting, meetingsCreateMeetingRequestSettings.inMeeting) &&
        Objects.equals(this.jbhTime, meetingsCreateMeetingRequestSettings.jbhTime) &&
        Objects.equals(this.joinBeforeHost, meetingsCreateMeetingRequestSettings.joinBeforeHost) &&
        Objects.equals(this.languageInterpretation, meetingsCreateMeetingRequestSettings.languageInterpretation) &&
        Objects.equals(this.signLanguageInterpretation, meetingsCreateMeetingRequestSettings.signLanguageInterpretation) &&
        Objects.equals(this.meetingAuthentication, meetingsCreateMeetingRequestSettings.meetingAuthentication) &&
        Objects.equals(this.meetingInvitees, meetingsCreateMeetingRequestSettings.meetingInvitees) &&
        Objects.equals(this.muteUponEntry, meetingsCreateMeetingRequestSettings.muteUponEntry) &&
        Objects.equals(this.participantVideo, meetingsCreateMeetingRequestSettings.participantVideo) &&
        Objects.equals(this.privateMeeting, meetingsCreateMeetingRequestSettings.privateMeeting) &&
        Objects.equals(this.registrantsConfirmationEmail, meetingsCreateMeetingRequestSettings.registrantsConfirmationEmail) &&
        Objects.equals(this.registrantsEmailNotification, meetingsCreateMeetingRequestSettings.registrantsEmailNotification) &&
        Objects.equals(this.registrationType, meetingsCreateMeetingRequestSettings.registrationType) &&
        Objects.equals(this.showShareButton, meetingsCreateMeetingRequestSettings.showShareButton) &&
        Objects.equals(this.usePmi, meetingsCreateMeetingRequestSettings.usePmi) &&
        Objects.equals(this.waitingRoom, meetingsCreateMeetingRequestSettings.waitingRoom) &&
        Objects.equals(this.watermark, meetingsCreateMeetingRequestSettings.watermark) &&
        Objects.equals(this.hostSaveVideoOrder, meetingsCreateMeetingRequestSettings.hostSaveVideoOrder) &&
        Objects.equals(this.alternativeHostUpdatePolls, meetingsCreateMeetingRequestSettings.alternativeHostUpdatePolls) &&
        Objects.equals(this.internalMeeting, meetingsCreateMeetingRequestSettings.internalMeeting) &&
        Objects.equals(this.continuousMeetingChat, meetingsCreateMeetingRequestSettings.continuousMeetingChat) &&
        Objects.equals(this.participantFocusedMeeting, meetingsCreateMeetingRequestSettings.participantFocusedMeeting) &&
        Objects.equals(this.pushChangeToCalendar, meetingsCreateMeetingRequestSettings.pushChangeToCalendar) &&
        Objects.equals(this.resources, meetingsCreateMeetingRequestSettings.resources) &&
        Objects.equals(this.autoStartMeetingSummary, meetingsCreateMeetingRequestSettings.autoStartMeetingSummary) &&
        Objects.equals(this.autoStartAiCompanionQuestions, meetingsCreateMeetingRequestSettings.autoStartAiCompanionQuestions)&&
        Objects.equals(this.additionalProperties, meetingsCreateMeetingRequestSettings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalDataCenterRegions, allowMultipleDevices, alternativeHosts, alternativeHostsEmailNotification, approvalType, approvedOrDeniedCountriesOrRegions, audio, audioConferenceInfo, authenticationDomains, authenticationException, authenticationOption, autoRecording, breakoutRoom, calendarType, closeRegistration, cnMeeting, contactEmail, contactName, emailNotification, encryptionType, focusMode, globalDialInCountries, hostVideo, inMeeting, jbhTime, joinBeforeHost, languageInterpretation, signLanguageInterpretation, meetingAuthentication, meetingInvitees, muteUponEntry, participantVideo, privateMeeting, registrantsConfirmationEmail, registrantsEmailNotification, registrationType, showShareButton, usePmi, waitingRoom, watermark, hostSaveVideoOrder, alternativeHostUpdatePolls, internalMeeting, continuousMeetingChat, participantFocusedMeeting, pushChangeToCalendar, resources, autoStartMeetingSummary, autoStartAiCompanionQuestions, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingsCreateMeetingRequestSettings {\n");
    sb.append("    additionalDataCenterRegions: ").append(toIndentedString(additionalDataCenterRegions)).append("\n");
    sb.append("    allowMultipleDevices: ").append(toIndentedString(allowMultipleDevices)).append("\n");
    sb.append("    alternativeHosts: ").append(toIndentedString(alternativeHosts)).append("\n");
    sb.append("    alternativeHostsEmailNotification: ").append(toIndentedString(alternativeHostsEmailNotification)).append("\n");
    sb.append("    approvalType: ").append(toIndentedString(approvalType)).append("\n");
    sb.append("    approvedOrDeniedCountriesOrRegions: ").append(toIndentedString(approvedOrDeniedCountriesOrRegions)).append("\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    audioConferenceInfo: ").append(toIndentedString(audioConferenceInfo)).append("\n");
    sb.append("    authenticationDomains: ").append(toIndentedString(authenticationDomains)).append("\n");
    sb.append("    authenticationException: ").append(toIndentedString(authenticationException)).append("\n");
    sb.append("    authenticationOption: ").append(toIndentedString(authenticationOption)).append("\n");
    sb.append("    autoRecording: ").append(toIndentedString(autoRecording)).append("\n");
    sb.append("    breakoutRoom: ").append(toIndentedString(breakoutRoom)).append("\n");
    sb.append("    calendarType: ").append(toIndentedString(calendarType)).append("\n");
    sb.append("    closeRegistration: ").append(toIndentedString(closeRegistration)).append("\n");
    sb.append("    cnMeeting: ").append(toIndentedString(cnMeeting)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    emailNotification: ").append(toIndentedString(emailNotification)).append("\n");
    sb.append("    encryptionType: ").append(toIndentedString(encryptionType)).append("\n");
    sb.append("    focusMode: ").append(toIndentedString(focusMode)).append("\n");
    sb.append("    globalDialInCountries: ").append(toIndentedString(globalDialInCountries)).append("\n");
    sb.append("    hostVideo: ").append(toIndentedString(hostVideo)).append("\n");
    sb.append("    inMeeting: ").append(toIndentedString(inMeeting)).append("\n");
    sb.append("    jbhTime: ").append(toIndentedString(jbhTime)).append("\n");
    sb.append("    joinBeforeHost: ").append(toIndentedString(joinBeforeHost)).append("\n");
    sb.append("    languageInterpretation: ").append(toIndentedString(languageInterpretation)).append("\n");
    sb.append("    signLanguageInterpretation: ").append(toIndentedString(signLanguageInterpretation)).append("\n");
    sb.append("    meetingAuthentication: ").append(toIndentedString(meetingAuthentication)).append("\n");
    sb.append("    meetingInvitees: ").append(toIndentedString(meetingInvitees)).append("\n");
    sb.append("    muteUponEntry: ").append(toIndentedString(muteUponEntry)).append("\n");
    sb.append("    participantVideo: ").append(toIndentedString(participantVideo)).append("\n");
    sb.append("    privateMeeting: ").append(toIndentedString(privateMeeting)).append("\n");
    sb.append("    registrantsConfirmationEmail: ").append(toIndentedString(registrantsConfirmationEmail)).append("\n");
    sb.append("    registrantsEmailNotification: ").append(toIndentedString(registrantsEmailNotification)).append("\n");
    sb.append("    registrationType: ").append(toIndentedString(registrationType)).append("\n");
    sb.append("    showShareButton: ").append(toIndentedString(showShareButton)).append("\n");
    sb.append("    usePmi: ").append(toIndentedString(usePmi)).append("\n");
    sb.append("    waitingRoom: ").append(toIndentedString(waitingRoom)).append("\n");
    sb.append("    watermark: ").append(toIndentedString(watermark)).append("\n");
    sb.append("    hostSaveVideoOrder: ").append(toIndentedString(hostSaveVideoOrder)).append("\n");
    sb.append("    alternativeHostUpdatePolls: ").append(toIndentedString(alternativeHostUpdatePolls)).append("\n");
    sb.append("    internalMeeting: ").append(toIndentedString(internalMeeting)).append("\n");
    sb.append("    continuousMeetingChat: ").append(toIndentedString(continuousMeetingChat)).append("\n");
    sb.append("    participantFocusedMeeting: ").append(toIndentedString(participantFocusedMeeting)).append("\n");
    sb.append("    pushChangeToCalendar: ").append(toIndentedString(pushChangeToCalendar)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    autoStartMeetingSummary: ").append(toIndentedString(autoStartMeetingSummary)).append("\n");
    sb.append("    autoStartAiCompanionQuestions: ").append(toIndentedString(autoStartAiCompanionQuestions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_data_center_regions");
    openapiFields.add("allow_multiple_devices");
    openapiFields.add("alternative_hosts");
    openapiFields.add("alternative_hosts_email_notification");
    openapiFields.add("approval_type");
    openapiFields.add("approved_or_denied_countries_or_regions");
    openapiFields.add("audio");
    openapiFields.add("audio_conference_info");
    openapiFields.add("authentication_domains");
    openapiFields.add("authentication_exception");
    openapiFields.add("authentication_option");
    openapiFields.add("auto_recording");
    openapiFields.add("breakout_room");
    openapiFields.add("calendar_type");
    openapiFields.add("close_registration");
    openapiFields.add("cn_meeting");
    openapiFields.add("contact_email");
    openapiFields.add("contact_name");
    openapiFields.add("email_notification");
    openapiFields.add("encryption_type");
    openapiFields.add("focus_mode");
    openapiFields.add("global_dial_in_countries");
    openapiFields.add("host_video");
    openapiFields.add("in_meeting");
    openapiFields.add("jbh_time");
    openapiFields.add("join_before_host");
    openapiFields.add("language_interpretation");
    openapiFields.add("sign_language_interpretation");
    openapiFields.add("meeting_authentication");
    openapiFields.add("meeting_invitees");
    openapiFields.add("mute_upon_entry");
    openapiFields.add("participant_video");
    openapiFields.add("private_meeting");
    openapiFields.add("registrants_confirmation_email");
    openapiFields.add("registrants_email_notification");
    openapiFields.add("registration_type");
    openapiFields.add("show_share_button");
    openapiFields.add("use_pmi");
    openapiFields.add("waiting_room");
    openapiFields.add("watermark");
    openapiFields.add("host_save_video_order");
    openapiFields.add("alternative_host_update_polls");
    openapiFields.add("internal_meeting");
    openapiFields.add("continuous_meeting_chat");
    openapiFields.add("participant_focused_meeting");
    openapiFields.add("push_change_to_calendar");
    openapiFields.add("resources");
    openapiFields.add("auto_start_meeting_summary");
    openapiFields.add("auto_start_ai_companion_questions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MeetingsCreateMeetingRequestSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MeetingsCreateMeetingRequestSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingsCreateMeetingRequestSettings is not found in the empty JSON string", MeetingsCreateMeetingRequestSettings.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("additional_data_center_regions") != null && !jsonObj.get("additional_data_center_regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_data_center_regions` to be an array in the JSON string but got `%s`", jsonObj.get("additional_data_center_regions").toString()));
      }
      if ((jsonObj.get("alternative_hosts") != null && !jsonObj.get("alternative_hosts").isJsonNull()) && !jsonObj.get("alternative_hosts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternative_hosts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternative_hosts").toString()));
      }
      // validate the optional field `approved_or_denied_countries_or_regions`
      if (jsonObj.get("approved_or_denied_countries_or_regions") != null && !jsonObj.get("approved_or_denied_countries_or_regions").isJsonNull()) {
        MeetingsCreateMeetingRequestSettingsApprovedOrDeniedCountriesOrRegions.validateJsonObject(jsonObj.getAsJsonObject("approved_or_denied_countries_or_regions"));
      }
      if ((jsonObj.get("audio") != null && !jsonObj.get("audio").isJsonNull()) && !jsonObj.get("audio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audio").toString()));
      }
      if ((jsonObj.get("audio_conference_info") != null && !jsonObj.get("audio_conference_info").isJsonNull()) && !jsonObj.get("audio_conference_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_conference_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audio_conference_info").toString()));
      }
      if ((jsonObj.get("authentication_domains") != null && !jsonObj.get("authentication_domains").isJsonNull()) && !jsonObj.get("authentication_domains").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_domains` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_domains").toString()));
      }
      if (jsonObj.get("authentication_exception") != null && !jsonObj.get("authentication_exception").isJsonNull()) {
        JsonArray jsonArrayauthenticationException = jsonObj.getAsJsonArray("authentication_exception");
        if (jsonArrayauthenticationException != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authentication_exception").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authentication_exception` to be an array in the JSON string but got `%s`", jsonObj.get("authentication_exception").toString()));
          }

          // validate the optional field `authentication_exception` (array)
          for (int i = 0; i < jsonArrayauthenticationException.size(); i++) {
            MeetingsCreateMeetingRequestSettingsAuthenticationExceptionInner.validateJsonObject(jsonArrayauthenticationException.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("authentication_option") != null && !jsonObj.get("authentication_option").isJsonNull()) && !jsonObj.get("authentication_option").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_option` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_option").toString()));
      }
      if ((jsonObj.get("auto_recording") != null && !jsonObj.get("auto_recording").isJsonNull()) && !jsonObj.get("auto_recording").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_recording` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto_recording").toString()));
      }
      // validate the optional field `breakout_room`
      if (jsonObj.get("breakout_room") != null && !jsonObj.get("breakout_room").isJsonNull()) {
        MeetingsCreateMeetingRequestSettingsBreakoutRoom.validateJsonObject(jsonObj.getAsJsonObject("breakout_room"));
      }
      if ((jsonObj.get("contact_email") != null && !jsonObj.get("contact_email").isJsonNull()) && !jsonObj.get("contact_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_email").toString()));
      }
      if ((jsonObj.get("contact_name") != null && !jsonObj.get("contact_name").isJsonNull()) && !jsonObj.get("contact_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_name").toString()));
      }
      if ((jsonObj.get("encryption_type") != null && !jsonObj.get("encryption_type").isJsonNull()) && !jsonObj.get("encryption_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryption_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryption_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("global_dial_in_countries") != null && !jsonObj.get("global_dial_in_countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `global_dial_in_countries` to be an array in the JSON string but got `%s`", jsonObj.get("global_dial_in_countries").toString()));
      }
      // validate the optional field `language_interpretation`
      if (jsonObj.get("language_interpretation") != null && !jsonObj.get("language_interpretation").isJsonNull()) {
        MeetingsCreateMeetingRequestSettingsLanguageInterpretation.validateJsonObject(jsonObj.getAsJsonObject("language_interpretation"));
      }
      // validate the optional field `sign_language_interpretation`
      if (jsonObj.get("sign_language_interpretation") != null && !jsonObj.get("sign_language_interpretation").isJsonNull()) {
        MeetingsCreateMeetingRequestSettingsSignLanguageInterpretation.validateJsonObject(jsonObj.getAsJsonObject("sign_language_interpretation"));
      }
      if (jsonObj.get("meeting_invitees") != null && !jsonObj.get("meeting_invitees").isJsonNull()) {
        JsonArray jsonArraymeetingInvitees = jsonObj.getAsJsonArray("meeting_invitees");
        if (jsonArraymeetingInvitees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("meeting_invitees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `meeting_invitees` to be an array in the JSON string but got `%s`", jsonObj.get("meeting_invitees").toString()));
          }

          // validate the optional field `meeting_invitees` (array)
          for (int i = 0; i < jsonArraymeetingInvitees.size(); i++) {
            MeetingsCreateMeetingRequestSettingsMeetingInviteesInner.validateJsonObject(jsonArraymeetingInvitees.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `continuous_meeting_chat`
      if (jsonObj.get("continuous_meeting_chat") != null && !jsonObj.get("continuous_meeting_chat").isJsonNull()) {
        MeetingsCreateMeetingRequestSettingsContinuousMeetingChat.validateJsonObject(jsonObj.getAsJsonObject("continuous_meeting_chat"));
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            MeetingsCreateMeetingRequestSettingsResourcesInner.validateJsonObject(jsonArrayresources.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingsCreateMeetingRequestSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingsCreateMeetingRequestSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingsCreateMeetingRequestSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingsCreateMeetingRequestSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingsCreateMeetingRequestSettings>() {
           @Override
           public void write(JsonWriter out, MeetingsCreateMeetingRequestSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingsCreateMeetingRequestSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MeetingsCreateMeetingRequestSettings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MeetingsCreateMeetingRequestSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MeetingsCreateMeetingRequestSettings
  * @throws IOException if the JSON string is invalid with respect to MeetingsCreateMeetingRequestSettings
  */
  public static MeetingsCreateMeetingRequestSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingsCreateMeetingRequestSettings.class);
  }

 /**
  * Convert an instance of MeetingsCreateMeetingRequestSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

