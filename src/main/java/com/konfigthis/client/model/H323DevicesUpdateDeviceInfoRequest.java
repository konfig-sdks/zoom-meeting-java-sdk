/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The H.323/SIP device object.
 */
@ApiModel(description = "The H.323/SIP device object.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class H323DevicesUpdateDeviceInfoRequest {
  /**
   * Device encryption:    &#x60;auto&#x60; - auto.    &#x60;yes&#x60; - yes.    &#x60;no&#x60; - no.
   */
  @JsonAdapter(EncryptionEnum.Adapter.class)
 public enum EncryptionEnum {
    AUTO("auto"),
    
    TRUE("true"),
    
    FALSE("false");

    private String value;

    EncryptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionEnum fromValue(String value) {
      for (EncryptionEnum b : EncryptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION = "encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private EncryptionEnum encryption;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Device protocol:    &#x60;H.323&#x60; - H.323.    &#x60;SIP&#x60; - SIP.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
 public enum ProtocolEnum {
    H_323("H.323"),
    
    SIP("SIP");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public H323DevicesUpdateDeviceInfoRequest() {
  }

  public H323DevicesUpdateDeviceInfoRequest encryption(EncryptionEnum encryption) {
    
    
    
    
    this.encryption = encryption;
    return this;
  }

   /**
   * Device encryption:    &#x60;auto&#x60; - auto.    &#x60;yes&#x60; - yes.    &#x60;no&#x60; - no.
   * @return encryption
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "AUTO", required = true, value = "Device encryption:    `auto` - auto.    `yes` - yes.    `no` - no.")

  public EncryptionEnum getEncryption() {
    return encryption;
  }


  public void setEncryption(EncryptionEnum encryption) {
    
    
    
    this.encryption = encryption;
  }


  public H323DevicesUpdateDeviceInfoRequest ip(String ip) {
    
    
    
    
    this.ip = ip;
    return this;
  }

   /**
   * Device IP.
   * @return ip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "127.0.0.1", required = true, value = "Device IP.")

  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    
    
    
    this.ip = ip;
  }


  public H323DevicesUpdateDeviceInfoRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Device name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "api_test_20190508", required = true, value = "Device name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public H323DevicesUpdateDeviceInfoRequest protocol(ProtocolEnum protocol) {
    
    
    
    
    this.protocol = protocol;
    return this;
  }

   /**
   * Device protocol:    &#x60;H.323&#x60; - H.323.    &#x60;SIP&#x60; - SIP.
   * @return protocol
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "H_323", required = true, value = "Device protocol:    `H.323` - H.323.    `SIP` - SIP.")

  public ProtocolEnum getProtocol() {
    return protocol;
  }


  public void setProtocol(ProtocolEnum protocol) {
    
    
    
    this.protocol = protocol;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the H323DevicesUpdateDeviceInfoRequest instance itself
   */
  public H323DevicesUpdateDeviceInfoRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    H323DevicesUpdateDeviceInfoRequest h323DevicesUpdateDeviceInfoRequest = (H323DevicesUpdateDeviceInfoRequest) o;
    return Objects.equals(this.encryption, h323DevicesUpdateDeviceInfoRequest.encryption) &&
        Objects.equals(this.ip, h323DevicesUpdateDeviceInfoRequest.ip) &&
        Objects.equals(this.name, h323DevicesUpdateDeviceInfoRequest.name) &&
        Objects.equals(this.protocol, h323DevicesUpdateDeviceInfoRequest.protocol)&&
        Objects.equals(this.additionalProperties, h323DevicesUpdateDeviceInfoRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryption, ip, name, protocol, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class H323DevicesUpdateDeviceInfoRequest {\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryption");
    openapiFields.add("ip");
    openapiFields.add("name");
    openapiFields.add("protocol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("encryption");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("protocol");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to H323DevicesUpdateDeviceInfoRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!H323DevicesUpdateDeviceInfoRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in H323DevicesUpdateDeviceInfoRequest is not found in the empty JSON string", H323DevicesUpdateDeviceInfoRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : H323DevicesUpdateDeviceInfoRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("encryption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryption").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!H323DevicesUpdateDeviceInfoRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'H323DevicesUpdateDeviceInfoRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<H323DevicesUpdateDeviceInfoRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(H323DevicesUpdateDeviceInfoRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<H323DevicesUpdateDeviceInfoRequest>() {
           @Override
           public void write(JsonWriter out, H323DevicesUpdateDeviceInfoRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public H323DevicesUpdateDeviceInfoRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             H323DevicesUpdateDeviceInfoRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of H323DevicesUpdateDeviceInfoRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of H323DevicesUpdateDeviceInfoRequest
  * @throws IOException if the JSON string is invalid with respect to H323DevicesUpdateDeviceInfoRequest
  */
  public static H323DevicesUpdateDeviceInfoRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, H323DevicesUpdateDeviceInfoRequest.class);
  }

 /**
  * Convert an instance of H323DevicesUpdateDeviceInfoRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

