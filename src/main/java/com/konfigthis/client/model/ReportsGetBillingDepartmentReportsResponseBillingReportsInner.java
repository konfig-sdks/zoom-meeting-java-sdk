/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportsGetBillingDepartmentReportsResponseBillingReportsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportsGetBillingDepartmentReportsResponseBillingReportsInner {
  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private String taxAmount;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private String totalAmount;

  /**
   * Type of the billing report. The value should be either of the following:     &#x60;0&#x60; - Detailed Billing Reports &#x60;1&#x60; - Custom Billing Reports
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ReportsGetBillingDepartmentReportsResponseBillingReportsInner() {
  }

  public ReportsGetBillingDepartmentReportsResponseBillingReportsInner endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End date of the billing period.
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Thu Mar 24 17:00:00 PDT 2022", value = "End date of the billing period.")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public ReportsGetBillingDepartmentReportsResponseBillingReportsInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique Identifier of the report. Use this ID to retrieve billing invoice via the &amp;quot;Get Billing Invoices API&amp;quot;.   You can also use this ID to export a CSV file of the billing report from this URL: &#x60;https://zoom.us/account/report/billing/export?id&#x3D;{id}&#x60;.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "indfhgfhfho", value = "Unique Identifier of the report. Use this ID to retrieve billing invoice via the &quot;Get Billing Invoices API&quot;.   You can also use this ID to export a CSV file of the billing report from this URL: `https://zoom.us/account/report/billing/export?id={id}`.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ReportsGetBillingDepartmentReportsResponseBillingReportsInner startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of the billing period.
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Thu Mar 24 17:00:00 PDT 2022", value = "Start date of the billing period.")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public ReportsGetBillingDepartmentReportsResponseBillingReportsInner taxAmount(String taxAmount) {
    
    
    
    
    this.taxAmount = taxAmount;
    return this;
  }

   /**
   * Total tax amount for this billing period.
   * @return taxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "456", value = "Total tax amount for this billing period.")

  public String getTaxAmount() {
    return taxAmount;
  }


  public void setTaxAmount(String taxAmount) {
    
    
    
    this.taxAmount = taxAmount;
  }


  public ReportsGetBillingDepartmentReportsResponseBillingReportsInner totalAmount(String totalAmount) {
    
    
    
    
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * Total billing amount for this billing period.
   * @return totalAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "456", value = "Total billing amount for this billing period.")

  public String getTotalAmount() {
    return totalAmount;
  }


  public void setTotalAmount(String totalAmount) {
    
    
    
    this.totalAmount = totalAmount;
  }


  public ReportsGetBillingDepartmentReportsResponseBillingReportsInner type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of the billing report. The value should be either of the following:     &#x60;0&#x60; - Detailed Billing Reports &#x60;1&#x60; - Custom Billing Reports
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_1", value = "Type of the billing report. The value should be either of the following:     `0` - Detailed Billing Reports `1` - Custom Billing Reports")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportsGetBillingDepartmentReportsResponseBillingReportsInner instance itself
   */
  public ReportsGetBillingDepartmentReportsResponseBillingReportsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsGetBillingDepartmentReportsResponseBillingReportsInner reportsGetBillingDepartmentReportsResponseBillingReportsInner = (ReportsGetBillingDepartmentReportsResponseBillingReportsInner) o;
    return Objects.equals(this.endDate, reportsGetBillingDepartmentReportsResponseBillingReportsInner.endDate) &&
        Objects.equals(this.id, reportsGetBillingDepartmentReportsResponseBillingReportsInner.id) &&
        Objects.equals(this.startDate, reportsGetBillingDepartmentReportsResponseBillingReportsInner.startDate) &&
        Objects.equals(this.taxAmount, reportsGetBillingDepartmentReportsResponseBillingReportsInner.taxAmount) &&
        Objects.equals(this.totalAmount, reportsGetBillingDepartmentReportsResponseBillingReportsInner.totalAmount) &&
        Objects.equals(this.type, reportsGetBillingDepartmentReportsResponseBillingReportsInner.type)&&
        Objects.equals(this.additionalProperties, reportsGetBillingDepartmentReportsResponseBillingReportsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endDate, id, startDate, taxAmount, totalAmount, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsGetBillingDepartmentReportsResponseBillingReportsInner {\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("end_date");
    openapiFields.add("id");
    openapiFields.add("start_date");
    openapiFields.add("tax_amount");
    openapiFields.add("total_amount");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportsGetBillingDepartmentReportsResponseBillingReportsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportsGetBillingDepartmentReportsResponseBillingReportsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsGetBillingDepartmentReportsResponseBillingReportsInner is not found in the empty JSON string", ReportsGetBillingDepartmentReportsResponseBillingReportsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("tax_amount") != null && !jsonObj.get("tax_amount").isJsonNull()) && !jsonObj.get("tax_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_amount").toString()));
      }
      if ((jsonObj.get("total_amount") != null && !jsonObj.get("total_amount").isJsonNull()) && !jsonObj.get("total_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_amount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsGetBillingDepartmentReportsResponseBillingReportsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsGetBillingDepartmentReportsResponseBillingReportsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsGetBillingDepartmentReportsResponseBillingReportsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsGetBillingDepartmentReportsResponseBillingReportsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsGetBillingDepartmentReportsResponseBillingReportsInner>() {
           @Override
           public void write(JsonWriter out, ReportsGetBillingDepartmentReportsResponseBillingReportsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsGetBillingDepartmentReportsResponseBillingReportsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportsGetBillingDepartmentReportsResponseBillingReportsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportsGetBillingDepartmentReportsResponseBillingReportsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportsGetBillingDepartmentReportsResponseBillingReportsInner
  * @throws IOException if the JSON string is invalid with respect to ReportsGetBillingDepartmentReportsResponseBillingReportsInner
  */
  public static ReportsGetBillingDepartmentReportsResponseBillingReportsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsGetBillingDepartmentReportsResponseBillingReportsInner.class);
  }

 /**
  * Convert an instance of ReportsGetBillingDepartmentReportsResponseBillingReportsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

