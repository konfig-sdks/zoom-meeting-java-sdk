/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.MeetingsControlInMeetingFeaturesRequestParamsContactsInner;
import com.konfigthis.client.model.MeetingsControlInMeetingFeaturesRequestParamsH323Headers;
import com.konfigthis.client.model.MeetingsControlInMeetingFeaturesRequestParamsInviteOptions;
import com.konfigthis.client.model.MeetingsControlInMeetingFeaturesRequestParamsSipHeaders;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The in-meeting parameters.
 */
@ApiModel(description = "The in-meeting parameters.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MeetingsControlInMeetingFeaturesRequestParams {
  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<MeetingsControlInMeetingFeaturesRequestParamsContactsInner> contacts = null;

  public static final String SERIALIZED_NAME_INVITEE_NAME = "invitee_name";
  @SerializedName(SERIALIZED_NAME_INVITEE_NAME)
  private String inviteeName;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_INVITE_OPTIONS = "invite_options";
  @SerializedName(SERIALIZED_NAME_INVITE_OPTIONS)
  private MeetingsControlInMeetingFeaturesRequestParamsInviteOptions inviteOptions;

  public static final String SERIALIZED_NAME_CALL_TYPE = "call_type";
  @SerializedName(SERIALIZED_NAME_CALL_TYPE)
  private String callType;

  public static final String SERIALIZED_NAME_DEVICE_IP = "device_ip";
  @SerializedName(SERIALIZED_NAME_DEVICE_IP)
  private String deviceIp;

  public static final String SERIALIZED_NAME_H323_HEADERS = "h323_headers";
  @SerializedName(SERIALIZED_NAME_H323_HEADERS)
  private MeetingsControlInMeetingFeaturesRequestParamsH323Headers h323Headers;

  public static final String SERIALIZED_NAME_SIP_HEADERS = "sip_headers";
  @SerializedName(SERIALIZED_NAME_SIP_HEADERS)
  private MeetingsControlInMeetingFeaturesRequestParamsSipHeaders sipHeaders;

  public MeetingsControlInMeetingFeaturesRequestParams() {
  }

  public MeetingsControlInMeetingFeaturesRequestParams contacts(List<MeetingsControlInMeetingFeaturesRequestParamsContactsInner> contacts) {
    
    
    
    
    this.contacts = contacts;
    return this;
  }

  public MeetingsControlInMeetingFeaturesRequestParams addContactsItem(MeetingsControlInMeetingFeaturesRequestParamsContactsInner contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

   /**
   * The user&#39;s email address or the user ID, up to a maximum of 10 contacts. The account must be a part of the meeting host&#39;s account.
   * @return contacts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's email address or the user ID, up to a maximum of 10 contacts. The account must be a part of the meeting host's account.")

  public List<MeetingsControlInMeetingFeaturesRequestParamsContactsInner> getContacts() {
    return contacts;
  }


  public void setContacts(List<MeetingsControlInMeetingFeaturesRequestParamsContactsInner> contacts) {
    
    
    
    this.contacts = contacts;
  }


  public MeetingsControlInMeetingFeaturesRequestParams inviteeName(String inviteeName) {
    
    
    
    
    this.inviteeName = inviteeName;
    return this;
  }

   /**
   * The user&#39;s name to display in the meeting. Use this field if you pass the &#x60;participant.invite.callout&#x60; value for the &#x60;method&#x60; field.
   * @return inviteeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jill Chill", value = "The user's name to display in the meeting. Use this field if you pass the `participant.invite.callout` value for the `method` field.")

  public String getInviteeName() {
    return inviteeName;
  }


  public void setInviteeName(String inviteeName) {
    
    
    
    this.inviteeName = inviteeName;
  }


  public MeetingsControlInMeetingFeaturesRequestParams phoneNumber(String phoneNumber) {
    
    
    
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * The user&#39;s phone number. Use this field if you pass the &#x60;participant.invite.callout&#x60; value for the &#x60;method&#x60; field. As a best practice, ensure this includes a country code and area code.
   * @return phoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5550100", value = "The user's phone number. Use this field if you pass the `participant.invite.callout` value for the `method` field. As a best practice, ensure this includes a country code and area code.")

  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    
    
    
    this.phoneNumber = phoneNumber;
  }


  public MeetingsControlInMeetingFeaturesRequestParams inviteOptions(MeetingsControlInMeetingFeaturesRequestParamsInviteOptions inviteOptions) {
    
    
    
    
    this.inviteOptions = inviteOptions;
    return this;
  }

   /**
   * Get inviteOptions
   * @return inviteOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsControlInMeetingFeaturesRequestParamsInviteOptions getInviteOptions() {
    return inviteOptions;
  }


  public void setInviteOptions(MeetingsControlInMeetingFeaturesRequestParamsInviteOptions inviteOptions) {
    
    
    
    this.inviteOptions = inviteOptions;
  }


  public MeetingsControlInMeetingFeaturesRequestParams callType(String callType) {
    
    
    
    
    this.callType = callType;
    return this;
  }

   /**
   * The type of call out. Use a value of &#x60;h323&#x60; or &#x60;sip&#x60;. Use this field if you pass the &#x60;participant.invite.room_system_callout&#x60; value for the &#x60;method&#x60; field.
   * @return callType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "h323", value = "The type of call out. Use a value of `h323` or `sip`. Use this field if you pass the `participant.invite.room_system_callout` value for the `method` field.")

  public String getCallType() {
    return callType;
  }


  public void setCallType(String callType) {
    
    
    
    this.callType = callType;
  }


  public MeetingsControlInMeetingFeaturesRequestParams deviceIp(String deviceIp) {
    
    
    
    
    this.deviceIp = deviceIp;
    return this;
  }

   /**
   * The user&#39;s device IP address or URI. Use this field if you pass the &#x60;participant.invite.room_system_callout&#x60; value for the &#x60;method&#x60; field.
   * @return deviceIp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10.100.111.237", value = "The user's device IP address or URI. Use this field if you pass the `participant.invite.room_system_callout` value for the `method` field.")

  public String getDeviceIp() {
    return deviceIp;
  }


  public void setDeviceIp(String deviceIp) {
    
    
    
    this.deviceIp = deviceIp;
  }


  public MeetingsControlInMeetingFeaturesRequestParams h323Headers(MeetingsControlInMeetingFeaturesRequestParamsH323Headers h323Headers) {
    
    
    
    
    this.h323Headers = h323Headers;
    return this;
  }

   /**
   * Get h323Headers
   * @return h323Headers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsControlInMeetingFeaturesRequestParamsH323Headers getH323Headers() {
    return h323Headers;
  }


  public void setH323Headers(MeetingsControlInMeetingFeaturesRequestParamsH323Headers h323Headers) {
    
    
    
    this.h323Headers = h323Headers;
  }


  public MeetingsControlInMeetingFeaturesRequestParams sipHeaders(MeetingsControlInMeetingFeaturesRequestParamsSipHeaders sipHeaders) {
    
    
    
    
    this.sipHeaders = sipHeaders;
    return this;
  }

   /**
   * Get sipHeaders
   * @return sipHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsControlInMeetingFeaturesRequestParamsSipHeaders getSipHeaders() {
    return sipHeaders;
  }


  public void setSipHeaders(MeetingsControlInMeetingFeaturesRequestParamsSipHeaders sipHeaders) {
    
    
    
    this.sipHeaders = sipHeaders;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MeetingsControlInMeetingFeaturesRequestParams instance itself
   */
  public MeetingsControlInMeetingFeaturesRequestParams putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingsControlInMeetingFeaturesRequestParams meetingsControlInMeetingFeaturesRequestParams = (MeetingsControlInMeetingFeaturesRequestParams) o;
    return Objects.equals(this.contacts, meetingsControlInMeetingFeaturesRequestParams.contacts) &&
        Objects.equals(this.inviteeName, meetingsControlInMeetingFeaturesRequestParams.inviteeName) &&
        Objects.equals(this.phoneNumber, meetingsControlInMeetingFeaturesRequestParams.phoneNumber) &&
        Objects.equals(this.inviteOptions, meetingsControlInMeetingFeaturesRequestParams.inviteOptions) &&
        Objects.equals(this.callType, meetingsControlInMeetingFeaturesRequestParams.callType) &&
        Objects.equals(this.deviceIp, meetingsControlInMeetingFeaturesRequestParams.deviceIp) &&
        Objects.equals(this.h323Headers, meetingsControlInMeetingFeaturesRequestParams.h323Headers) &&
        Objects.equals(this.sipHeaders, meetingsControlInMeetingFeaturesRequestParams.sipHeaders)&&
        Objects.equals(this.additionalProperties, meetingsControlInMeetingFeaturesRequestParams.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contacts, inviteeName, phoneNumber, inviteOptions, callType, deviceIp, h323Headers, sipHeaders, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingsControlInMeetingFeaturesRequestParams {\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    inviteeName: ").append(toIndentedString(inviteeName)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    inviteOptions: ").append(toIndentedString(inviteOptions)).append("\n");
    sb.append("    callType: ").append(toIndentedString(callType)).append("\n");
    sb.append("    deviceIp: ").append(toIndentedString(deviceIp)).append("\n");
    sb.append("    h323Headers: ").append(toIndentedString(h323Headers)).append("\n");
    sb.append("    sipHeaders: ").append(toIndentedString(sipHeaders)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contacts");
    openapiFields.add("invitee_name");
    openapiFields.add("phone_number");
    openapiFields.add("invite_options");
    openapiFields.add("call_type");
    openapiFields.add("device_ip");
    openapiFields.add("h323_headers");
    openapiFields.add("sip_headers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MeetingsControlInMeetingFeaturesRequestParams
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MeetingsControlInMeetingFeaturesRequestParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingsControlInMeetingFeaturesRequestParams is not found in the empty JSON string", MeetingsControlInMeetingFeaturesRequestParams.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            MeetingsControlInMeetingFeaturesRequestParamsContactsInner.validateJsonObject(jsonArraycontacts.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("invitee_name") != null && !jsonObj.get("invitee_name").isJsonNull()) && !jsonObj.get("invitee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitee_name").toString()));
      }
      if ((jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) && !jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      // validate the optional field `invite_options`
      if (jsonObj.get("invite_options") != null && !jsonObj.get("invite_options").isJsonNull()) {
        MeetingsControlInMeetingFeaturesRequestParamsInviteOptions.validateJsonObject(jsonObj.getAsJsonObject("invite_options"));
      }
      if ((jsonObj.get("call_type") != null && !jsonObj.get("call_type").isJsonNull()) && !jsonObj.get("call_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_type").toString()));
      }
      if ((jsonObj.get("device_ip") != null && !jsonObj.get("device_ip").isJsonNull()) && !jsonObj.get("device_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_ip").toString()));
      }
      // validate the optional field `h323_headers`
      if (jsonObj.get("h323_headers") != null && !jsonObj.get("h323_headers").isJsonNull()) {
        MeetingsControlInMeetingFeaturesRequestParamsH323Headers.validateJsonObject(jsonObj.getAsJsonObject("h323_headers"));
      }
      // validate the optional field `sip_headers`
      if (jsonObj.get("sip_headers") != null && !jsonObj.get("sip_headers").isJsonNull()) {
        MeetingsControlInMeetingFeaturesRequestParamsSipHeaders.validateJsonObject(jsonObj.getAsJsonObject("sip_headers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingsControlInMeetingFeaturesRequestParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingsControlInMeetingFeaturesRequestParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingsControlInMeetingFeaturesRequestParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingsControlInMeetingFeaturesRequestParams.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingsControlInMeetingFeaturesRequestParams>() {
           @Override
           public void write(JsonWriter out, MeetingsControlInMeetingFeaturesRequestParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingsControlInMeetingFeaturesRequestParams read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MeetingsControlInMeetingFeaturesRequestParams instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MeetingsControlInMeetingFeaturesRequestParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MeetingsControlInMeetingFeaturesRequestParams
  * @throws IOException if the JSON string is invalid with respect to MeetingsControlInMeetingFeaturesRequestParams
  */
  public static MeetingsControlInMeetingFeaturesRequestParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingsControlInMeetingFeaturesRequestParams.class);
  }

 /**
  * Convert an instance of MeetingsControlInMeetingFeaturesRequestParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

