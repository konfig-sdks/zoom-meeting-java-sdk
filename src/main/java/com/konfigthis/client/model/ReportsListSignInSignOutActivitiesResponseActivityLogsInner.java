/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportsListSignInSignOutActivitiesResponseActivityLogsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportsListSignInSignOutActivitiesResponseActivityLogsInner {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_CLIENT_TYPE = "client_type";
  @SerializedName(SERIALIZED_NAME_CLIENT_TYPE)
  private String clientType;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private OffsetDateTime time;

  /**
   * The type of activity.  * &#x60;Sign in&#x60; &amp;mdash; Sign in activity by user.  * &#x60;Sign out&#x60; &amp;mdash; Sign out activity by user.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    IN("Sign in"),
    
    OUT("Sign out");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ReportsListSignInSignOutActivitiesResponseActivityLogsInner() {
  }

  public ReportsListSignInSignOutActivitiesResponseActivityLogsInner version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * Zoom client version of the user.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5.9.1.2581", value = "Zoom client version of the user.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public ReportsListSignInSignOutActivitiesResponseActivityLogsInner clientType(String clientType) {
    
    
    
    
    this.clientType = clientType;
    return this;
  }

   /**
   * The client interface type using which the activity was performed.
   * @return clientType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Browser", value = "The client interface type using which the activity was performed.")

  public String getClientType() {
    return clientType;
  }


  public void setClientType(String clientType) {
    
    
    
    this.clientType = clientType;
  }


  public ReportsListSignInSignOutActivitiesResponseActivityLogsInner email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Email address of the user used for the activity.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jchill@example.com", value = "Email address of the user used for the activity.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public ReportsListSignInSignOutActivitiesResponseActivityLogsInner ipAddress(String ipAddress) {
    
    
    
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * The IP address of the user&#39;s device.
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "192.0.2.1", value = "The IP address of the user's device.")

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    
    
    
    this.ipAddress = ipAddress;
  }


  public ReportsListSignInSignOutActivitiesResponseActivityLogsInner time(OffsetDateTime time) {
    
    
    
    
    this.time = time;
    return this;
  }

   /**
   * Time during which the activity occurred.
   * @return time
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-09-15T19:13:41Z", value = "Time during which the activity occurred.")

  public OffsetDateTime getTime() {
    return time;
  }


  public void setTime(OffsetDateTime time) {
    
    
    
    this.time = time;
  }


  public ReportsListSignInSignOutActivitiesResponseActivityLogsInner type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of activity.  * &#x60;Sign in&#x60; &amp;mdash; Sign in activity by user.  * &#x60;Sign out&#x60; &amp;mdash; Sign out activity by user.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SIGN_OUT", value = "The type of activity.  * `Sign in` &mdash; Sign in activity by user.  * `Sign out` &mdash; Sign out activity by user.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportsListSignInSignOutActivitiesResponseActivityLogsInner instance itself
   */
  public ReportsListSignInSignOutActivitiesResponseActivityLogsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsListSignInSignOutActivitiesResponseActivityLogsInner reportsListSignInSignOutActivitiesResponseActivityLogsInner = (ReportsListSignInSignOutActivitiesResponseActivityLogsInner) o;
    return Objects.equals(this.version, reportsListSignInSignOutActivitiesResponseActivityLogsInner.version) &&
        Objects.equals(this.clientType, reportsListSignInSignOutActivitiesResponseActivityLogsInner.clientType) &&
        Objects.equals(this.email, reportsListSignInSignOutActivitiesResponseActivityLogsInner.email) &&
        Objects.equals(this.ipAddress, reportsListSignInSignOutActivitiesResponseActivityLogsInner.ipAddress) &&
        Objects.equals(this.time, reportsListSignInSignOutActivitiesResponseActivityLogsInner.time) &&
        Objects.equals(this.type, reportsListSignInSignOutActivitiesResponseActivityLogsInner.type)&&
        Objects.equals(this.additionalProperties, reportsListSignInSignOutActivitiesResponseActivityLogsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, clientType, email, ipAddress, time, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsListSignInSignOutActivitiesResponseActivityLogsInner {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    clientType: ").append(toIndentedString(clientType)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("client_type");
    openapiFields.add("email");
    openapiFields.add("ip_address");
    openapiFields.add("time");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportsListSignInSignOutActivitiesResponseActivityLogsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportsListSignInSignOutActivitiesResponseActivityLogsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsListSignInSignOutActivitiesResponseActivityLogsInner is not found in the empty JSON string", ReportsListSignInSignOutActivitiesResponseActivityLogsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("client_type") != null && !jsonObj.get("client_type").isJsonNull()) && !jsonObj.get("client_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_type").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonNull()) && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsListSignInSignOutActivitiesResponseActivityLogsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsListSignInSignOutActivitiesResponseActivityLogsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsListSignInSignOutActivitiesResponseActivityLogsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsListSignInSignOutActivitiesResponseActivityLogsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsListSignInSignOutActivitiesResponseActivityLogsInner>() {
           @Override
           public void write(JsonWriter out, ReportsListSignInSignOutActivitiesResponseActivityLogsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsListSignInSignOutActivitiesResponseActivityLogsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportsListSignInSignOutActivitiesResponseActivityLogsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportsListSignInSignOutActivitiesResponseActivityLogsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportsListSignInSignOutActivitiesResponseActivityLogsInner
  * @throws IOException if the JSON string is invalid with respect to ReportsListSignInSignOutActivitiesResponseActivityLogsInner
  */
  public static ReportsListSignInSignOutActivitiesResponseActivityLogsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsListSignInSignOutActivitiesResponseActivityLogsInner.class);
  }

 /**
  * Convert an instance of ReportsListSignInSignOutActivitiesResponseActivityLogsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

