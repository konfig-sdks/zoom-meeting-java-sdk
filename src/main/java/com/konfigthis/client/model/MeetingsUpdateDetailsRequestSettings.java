/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettingsApprovedOrDeniedCountriesOrRegions;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettingsAuthenticationExceptionInner;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettingsBreakoutRoom;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettingsContinuousMeetingChat;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettingsCustomKeysInner;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettingsGlobalDialInNumbersInner;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettingsLanguageInterpretation;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettingsMeetingInviteesInner;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettingsResourcesInner;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettingsSignLanguageInterpretation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Meeting settings.
 */
@ApiModel(description = "Meeting settings.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MeetingsUpdateDetailsRequestSettings {
  public static final String SERIALIZED_NAME_ALLOW_MULTIPLE_DEVICES = "allow_multiple_devices";
  @SerializedName(SERIALIZED_NAME_ALLOW_MULTIPLE_DEVICES)
  private Boolean allowMultipleDevices;

  public static final String SERIALIZED_NAME_ALTERNATIVE_HOSTS = "alternative_hosts";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_HOSTS)
  private String alternativeHosts;

  public static final String SERIALIZED_NAME_ALTERNATIVE_HOSTS_EMAIL_NOTIFICATION = "alternative_hosts_email_notification";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_HOSTS_EMAIL_NOTIFICATION)
  private Boolean alternativeHostsEmailNotification = true;

  public static final String SERIALIZED_NAME_ALTERNATIVE_HOST_UPDATE_POLLS = "alternative_host_update_polls";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_HOST_UPDATE_POLLS)
  private Boolean alternativeHostUpdatePolls;

  /**
   * Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.**            &#x60;0&#x60; - Automatically approve.    &#x60;1&#x60; - Manually approve.    &#x60;2&#x60; - No registration required.
   */
  @JsonAdapter(ApprovalTypeEnum.Adapter.class)
 public enum ApprovalTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    ApprovalTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalTypeEnum fromValue(Integer value) {
      for (ApprovalTypeEnum b : ApprovalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ApprovalTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPROVAL_TYPE = "approval_type";
  @SerializedName(SERIALIZED_NAME_APPROVAL_TYPE)
  private ApprovalTypeEnum approvalType = ApprovalTypeEnum.NUMBER_2;

  public static final String SERIALIZED_NAME_APPROVED_OR_DENIED_COUNTRIES_OR_REGIONS = "approved_or_denied_countries_or_regions";
  @SerializedName(SERIALIZED_NAME_APPROVED_OR_DENIED_COUNTRIES_OR_REGIONS)
  private MeetingsUpdateDetailsRequestSettingsApprovedOrDeniedCountriesOrRegions approvedOrDeniedCountriesOrRegions;

  /**
   * Determine how participants can join the audio portion of the meeting.    &#x60;both&#x60; - Both Telephony and VoIP.    &#x60;telephony&#x60; - Telephony only.    &#x60;voip&#x60; - VoIP only.    &#x60;thirdParty&#x60; - Third party audio conference.
   */
  @JsonAdapter(AudioEnum.Adapter.class)
 public enum AudioEnum {
    BOTH("both"),
    
    TELEPHONY("telephony"),
    
    VOIP("voip"),
    
    THIRDPARTY("thirdParty");

    private String value;

    AudioEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioEnum fromValue(String value) {
      for (AudioEnum b : AudioEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudioEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudioEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUDIO = "audio";
  @SerializedName(SERIALIZED_NAME_AUDIO)
  private AudioEnum audio = AudioEnum.BOTH;

  public static final String SERIALIZED_NAME_AUDIO_CONFERENCE_INFO = "audio_conference_info";
  @SerializedName(SERIALIZED_NAME_AUDIO_CONFERENCE_INFO)
  private String audioConferenceInfo;

  public static final String SERIALIZED_NAME_AUTHENTICATION_DOMAINS = "authentication_domains";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_DOMAINS)
  private String authenticationDomains;

  public static final String SERIALIZED_NAME_AUTHENTICATION_EXCEPTION = "authentication_exception";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_EXCEPTION)
  private List<MeetingsUpdateDetailsRequestSettingsAuthenticationExceptionInner> authenticationException = null;

  public static final String SERIALIZED_NAME_AUTHENTICATION_NAME = "authentication_name";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_NAME)
  private String authenticationName;

  public static final String SERIALIZED_NAME_AUTHENTICATION_OPTION = "authentication_option";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_OPTION)
  private String authenticationOption;

  /**
   * Automatic recording.   &#x60;local&#x60; - Record on local.    &#x60;cloud&#x60; -  Record on cloud.    &#x60;none&#x60; - Disabled.
   */
  @JsonAdapter(AutoRecordingEnum.Adapter.class)
 public enum AutoRecordingEnum {
    LOCAL("local"),
    
    CLOUD("cloud"),
    
    NONE("none");

    private String value;

    AutoRecordingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoRecordingEnum fromValue(String value) {
      for (AutoRecordingEnum b : AutoRecordingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoRecordingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoRecordingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoRecordingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoRecordingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTO_RECORDING = "auto_recording";
  @SerializedName(SERIALIZED_NAME_AUTO_RECORDING)
  private AutoRecordingEnum autoRecording = AutoRecordingEnum.NONE;

  public static final String SERIALIZED_NAME_BREAKOUT_ROOM = "breakout_room";
  @SerializedName(SERIALIZED_NAME_BREAKOUT_ROOM)
  private MeetingsUpdateDetailsRequestSettingsBreakoutRoom breakoutRoom;

  /**
   * The type of calendar integration used to schedule the meeting.  * &#x60;1&#x60; - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)  * &#x60;2&#x60; - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)  Works with the &#x60;private_meeting&#x60; field to determine whether to share details of meetings.
   */
  @JsonAdapter(CalendarTypeEnum.Adapter.class)
 public enum CalendarTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    CalendarTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalendarTypeEnum fromValue(Integer value) {
      for (CalendarTypeEnum b : CalendarTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalendarTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalendarTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalendarTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return CalendarTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CALENDAR_TYPE = "calendar_type";
  @SerializedName(SERIALIZED_NAME_CALENDAR_TYPE)
  private CalendarTypeEnum calendarType;

  public static final String SERIALIZED_NAME_CLOSE_REGISTRATION = "close_registration";
  @SerializedName(SERIALIZED_NAME_CLOSE_REGISTRATION)
  private Boolean closeRegistration = false;

  public static final String SERIALIZED_NAME_CN_MEETING = "cn_meeting";
  @SerializedName(SERIALIZED_NAME_CN_MEETING)
  private Boolean cnMeeting = false;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "contact_email";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  private String contactEmail;

  public static final String SERIALIZED_NAME_CONTACT_NAME = "contact_name";
  @SerializedName(SERIALIZED_NAME_CONTACT_NAME)
  private String contactName;

  public static final String SERIALIZED_NAME_CUSTOM_KEYS = "custom_keys";
  @SerializedName(SERIALIZED_NAME_CUSTOM_KEYS)
  private List<MeetingsUpdateDetailsRequestSettingsCustomKeysInner> customKeys = null;

  public static final String SERIALIZED_NAME_EMAIL_NOTIFICATION = "email_notification";
  @SerializedName(SERIALIZED_NAME_EMAIL_NOTIFICATION)
  private Boolean emailNotification = true;

  /**
   * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features such cloud recording and phone/SIP/H.323 dial-in, will be **automatically disabled**.     &#x60;enhanced_encryption&#x60; - Enhanced encryption. Encryption is stored in the cloud if you enable this option.       &#x60;e2ee&#x60; - [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the features join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
   */
  @JsonAdapter(EncryptionTypeEnum.Adapter.class)
 public enum EncryptionTypeEnum {
    ENHANCED_ENCRYPTION("enhanced_encryption"),
    
    E2EE("e2ee");

    private String value;

    EncryptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionTypeEnum fromValue(String value) {
      for (EncryptionTypeEnum b : EncryptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_TYPE = "encryption_type";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_TYPE)
  private EncryptionTypeEnum encryptionType;

  public static final String SERIALIZED_NAME_ENFORCE_LOGIN = "enforce_login";
  @SerializedName(SERIALIZED_NAME_ENFORCE_LOGIN)
  private Boolean enforceLogin;

  public static final String SERIALIZED_NAME_ENFORCE_LOGIN_DOMAINS = "enforce_login_domains";
  @SerializedName(SERIALIZED_NAME_ENFORCE_LOGIN_DOMAINS)
  private String enforceLoginDomains;

  public static final String SERIALIZED_NAME_FOCUS_MODE = "focus_mode";
  @SerializedName(SERIALIZED_NAME_FOCUS_MODE)
  private Boolean focusMode;

  public static final String SERIALIZED_NAME_GLOBAL_DIAL_IN_COUNTRIES = "global_dial_in_countries";
  @SerializedName(SERIALIZED_NAME_GLOBAL_DIAL_IN_COUNTRIES)
  private List<String> globalDialInCountries = null;

  public static final String SERIALIZED_NAME_GLOBAL_DIAL_IN_NUMBERS = "global_dial_in_numbers";
  @SerializedName(SERIALIZED_NAME_GLOBAL_DIAL_IN_NUMBERS)
  private List<MeetingsUpdateDetailsRequestSettingsGlobalDialInNumbersInner> globalDialInNumbers = null;

  public static final String SERIALIZED_NAME_HOST_VIDEO = "host_video";
  @SerializedName(SERIALIZED_NAME_HOST_VIDEO)
  private Boolean hostVideo;

  public static final String SERIALIZED_NAME_IN_MEETING = "in_meeting";
  @SerializedName(SERIALIZED_NAME_IN_MEETING)
  private Boolean inMeeting = false;

  /**
   * If the value of &#x60;join_before_host&#x60; field is set to true, use this field to indicate time limits for a participant to join a meeting before a host.  *  &#x60;0&#x60; - Allow participant to join anytime. *  &#x60;5&#x60; - Allow participant to join 5 minutes before meeting start time.  * &#x60;10&#x60; - Allow participant to join 10 minutes before meeting start time.
   */
  @JsonAdapter(JbhTimeEnum.Adapter.class)
 public enum JbhTimeEnum {
    NUMBER_0(0),
    
    NUMBER_5(5),
    
    NUMBER_10(10);

    private Integer value;

    JbhTimeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JbhTimeEnum fromValue(Integer value) {
      for (JbhTimeEnum b : JbhTimeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JbhTimeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JbhTimeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JbhTimeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return JbhTimeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_JBH_TIME = "jbh_time";
  @SerializedName(SERIALIZED_NAME_JBH_TIME)
  private JbhTimeEnum jbhTime;

  public static final String SERIALIZED_NAME_JOIN_BEFORE_HOST = "join_before_host";
  @SerializedName(SERIALIZED_NAME_JOIN_BEFORE_HOST)
  private Boolean joinBeforeHost = false;

  public static final String SERIALIZED_NAME_LANGUAGE_INTERPRETATION = "language_interpretation";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_INTERPRETATION)
  private MeetingsUpdateDetailsRequestSettingsLanguageInterpretation languageInterpretation;

  public static final String SERIALIZED_NAME_SIGN_LANGUAGE_INTERPRETATION = "sign_language_interpretation";
  @SerializedName(SERIALIZED_NAME_SIGN_LANGUAGE_INTERPRETATION)
  private MeetingsUpdateDetailsRequestSettingsSignLanguageInterpretation signLanguageInterpretation;

  public static final String SERIALIZED_NAME_MEETING_AUTHENTICATION = "meeting_authentication";
  @SerializedName(SERIALIZED_NAME_MEETING_AUTHENTICATION)
  private Boolean meetingAuthentication;

  public static final String SERIALIZED_NAME_MEETING_INVITEES = "meeting_invitees";
  @SerializedName(SERIALIZED_NAME_MEETING_INVITEES)
  private List<MeetingsUpdateDetailsRequestSettingsMeetingInviteesInner> meetingInvitees = null;

  public static final String SERIALIZED_NAME_MUTE_UPON_ENTRY = "mute_upon_entry";
  @SerializedName(SERIALIZED_NAME_MUTE_UPON_ENTRY)
  private Boolean muteUponEntry = false;

  public static final String SERIALIZED_NAME_PARTICIPANT_VIDEO = "participant_video";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_VIDEO)
  private Boolean participantVideo;

  public static final String SERIALIZED_NAME_PRIVATE_MEETING = "private_meeting";
  @SerializedName(SERIALIZED_NAME_PRIVATE_MEETING)
  private Boolean privateMeeting;

  public static final String SERIALIZED_NAME_REGISTRANTS_CONFIRMATION_EMAIL = "registrants_confirmation_email";
  @SerializedName(SERIALIZED_NAME_REGISTRANTS_CONFIRMATION_EMAIL)
  private Boolean registrantsConfirmationEmail;

  public static final String SERIALIZED_NAME_REGISTRANTS_EMAIL_NOTIFICATION = "registrants_email_notification";
  @SerializedName(SERIALIZED_NAME_REGISTRANTS_EMAIL_NOTIFICATION)
  private Boolean registrantsEmailNotification;

  /**
   * Registration type. Used for recurring meeting with fixed time only.  &#x60;1&#x60; - Attendees register once and can attend any of the occurrences.    &#x60;2&#x60; - Attendees need to register for each occurrence to attend.    &#x60;3&#x60; - Attendees register once and can choose one or more occurrences to attend.
   */
  @JsonAdapter(RegistrationTypeEnum.Adapter.class)
 public enum RegistrationTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    RegistrationTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegistrationTypeEnum fromValue(Integer value) {
      for (RegistrationTypeEnum b : RegistrationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegistrationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegistrationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegistrationTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return RegistrationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REGISTRATION_TYPE = "registration_type";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_TYPE)
  private RegistrationTypeEnum registrationType = RegistrationTypeEnum.NUMBER_1;

  public static final String SERIALIZED_NAME_SHOW_SHARE_BUTTON = "show_share_button";
  @SerializedName(SERIALIZED_NAME_SHOW_SHARE_BUTTON)
  private Boolean showShareButton;

  public static final String SERIALIZED_NAME_USE_PMI = "use_pmi";
  @SerializedName(SERIALIZED_NAME_USE_PMI)
  private Boolean usePmi = false;

  public static final String SERIALIZED_NAME_WAITING_ROOM = "waiting_room";
  @SerializedName(SERIALIZED_NAME_WAITING_ROOM)
  private Boolean waitingRoom = false;

  public static final String SERIALIZED_NAME_WATERMARK = "watermark";
  @SerializedName(SERIALIZED_NAME_WATERMARK)
  private Boolean watermark = false;

  public static final String SERIALIZED_NAME_HOST_SAVE_VIDEO_ORDER = "host_save_video_order";
  @SerializedName(SERIALIZED_NAME_HOST_SAVE_VIDEO_ORDER)
  private Boolean hostSaveVideoOrder;

  public static final String SERIALIZED_NAME_INTERNAL_MEETING = "internal_meeting";
  @SerializedName(SERIALIZED_NAME_INTERNAL_MEETING)
  private Boolean internalMeeting = false;

  public static final String SERIALIZED_NAME_CONTINUOUS_MEETING_CHAT = "continuous_meeting_chat";
  @SerializedName(SERIALIZED_NAME_CONTINUOUS_MEETING_CHAT)
  private MeetingsUpdateDetailsRequestSettingsContinuousMeetingChat continuousMeetingChat;

  public static final String SERIALIZED_NAME_PARTICIPANT_FOCUSED_MEETING = "participant_focused_meeting";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_FOCUSED_MEETING)
  private Boolean participantFocusedMeeting = false;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<MeetingsUpdateDetailsRequestSettingsResourcesInner> resources = null;

  public static final String SERIALIZED_NAME_AUTO_START_MEETING_SUMMARY = "auto_start_meeting_summary";
  @SerializedName(SERIALIZED_NAME_AUTO_START_MEETING_SUMMARY)
  private Boolean autoStartMeetingSummary = false;

  public static final String SERIALIZED_NAME_AUTO_START_AI_COMPANION_QUESTIONS = "auto_start_ai_companion_questions";
  @SerializedName(SERIALIZED_NAME_AUTO_START_AI_COMPANION_QUESTIONS)
  private Boolean autoStartAiCompanionQuestions = false;

  public MeetingsUpdateDetailsRequestSettings() {
  }

  public MeetingsUpdateDetailsRequestSettings allowMultipleDevices(Boolean allowMultipleDevices) {
    
    
    
    
    this.allowMultipleDevices = allowMultipleDevices;
    return this;
  }

   /**
   * Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
   * @return allowMultipleDevices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).")

  public Boolean getAllowMultipleDevices() {
    return allowMultipleDevices;
  }


  public void setAllowMultipleDevices(Boolean allowMultipleDevices) {
    
    
    
    this.allowMultipleDevices = allowMultipleDevices;
  }


  public MeetingsUpdateDetailsRequestSettings alternativeHosts(String alternativeHosts) {
    
    
    
    
    this.alternativeHosts = alternativeHosts;
    return this;
  }

   /**
   * A semicolon-separated list of the meeting&#39;s alternative hosts&#39; email addresses or IDs.
   * @return alternativeHosts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jchill@example.com;thill@example.com", value = "A semicolon-separated list of the meeting's alternative hosts' email addresses or IDs.")

  public String getAlternativeHosts() {
    return alternativeHosts;
  }


  public void setAlternativeHosts(String alternativeHosts) {
    
    
    
    this.alternativeHosts = alternativeHosts;
  }


  public MeetingsUpdateDetailsRequestSettings alternativeHostsEmailNotification(Boolean alternativeHostsEmailNotification) {
    
    
    
    
    this.alternativeHostsEmailNotification = alternativeHostsEmailNotification;
    return this;
  }

   /**
   * Flag to determine whether to send email notifications to alternative hosts, default value is true.
   * @return alternativeHostsEmailNotification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Flag to determine whether to send email notifications to alternative hosts, default value is true.")

  public Boolean getAlternativeHostsEmailNotification() {
    return alternativeHostsEmailNotification;
  }


  public void setAlternativeHostsEmailNotification(Boolean alternativeHostsEmailNotification) {
    
    
    
    this.alternativeHostsEmailNotification = alternativeHostsEmailNotification;
  }


  public MeetingsUpdateDetailsRequestSettings alternativeHostUpdatePolls(Boolean alternativeHostUpdatePolls) {
    
    
    
    
    this.alternativeHostUpdatePolls = alternativeHostUpdatePolls;
    return this;
  }

   /**
   * Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
   * @return alternativeHostUpdatePolls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.")

  public Boolean getAlternativeHostUpdatePolls() {
    return alternativeHostUpdatePolls;
  }


  public void setAlternativeHostUpdatePolls(Boolean alternativeHostUpdatePolls) {
    
    
    
    this.alternativeHostUpdatePolls = alternativeHostUpdatePolls;
  }


  public MeetingsUpdateDetailsRequestSettings approvalType(ApprovalTypeEnum approvalType) {
    
    
    
    
    this.approvalType = approvalType;
    return this;
  }

   /**
   * Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.**            &#x60;0&#x60; - Automatically approve.    &#x60;1&#x60; - Manually approve.    &#x60;2&#x60; - No registration required.
   * @return approvalType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_0", value = "Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.**            `0` - Automatically approve.    `1` - Manually approve.    `2` - No registration required.")

  public ApprovalTypeEnum getApprovalType() {
    return approvalType;
  }


  public void setApprovalType(ApprovalTypeEnum approvalType) {
    
    
    
    this.approvalType = approvalType;
  }


  public MeetingsUpdateDetailsRequestSettings approvedOrDeniedCountriesOrRegions(MeetingsUpdateDetailsRequestSettingsApprovedOrDeniedCountriesOrRegions approvedOrDeniedCountriesOrRegions) {
    
    
    
    
    this.approvedOrDeniedCountriesOrRegions = approvedOrDeniedCountriesOrRegions;
    return this;
  }

   /**
   * Get approvedOrDeniedCountriesOrRegions
   * @return approvedOrDeniedCountriesOrRegions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsUpdateDetailsRequestSettingsApprovedOrDeniedCountriesOrRegions getApprovedOrDeniedCountriesOrRegions() {
    return approvedOrDeniedCountriesOrRegions;
  }


  public void setApprovedOrDeniedCountriesOrRegions(MeetingsUpdateDetailsRequestSettingsApprovedOrDeniedCountriesOrRegions approvedOrDeniedCountriesOrRegions) {
    
    
    
    this.approvedOrDeniedCountriesOrRegions = approvedOrDeniedCountriesOrRegions;
  }


  public MeetingsUpdateDetailsRequestSettings audio(AudioEnum audio) {
    
    
    
    
    this.audio = audio;
    return this;
  }

   /**
   * Determine how participants can join the audio portion of the meeting.    &#x60;both&#x60; - Both Telephony and VoIP.    &#x60;telephony&#x60; - Telephony only.    &#x60;voip&#x60; - VoIP only.    &#x60;thirdParty&#x60; - Third party audio conference.
   * @return audio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TELEPHONY", value = "Determine how participants can join the audio portion of the meeting.    `both` - Both Telephony and VoIP.    `telephony` - Telephony only.    `voip` - VoIP only.    `thirdParty` - Third party audio conference.")

  public AudioEnum getAudio() {
    return audio;
  }


  public void setAudio(AudioEnum audio) {
    
    
    
    this.audio = audio;
  }


  public MeetingsUpdateDetailsRequestSettings audioConferenceInfo(String audioConferenceInfo) {
    
    
    
    
    this.audioConferenceInfo = audioConferenceInfo;
    return this;
  }

   /**
   * Third party audio conference info.
   * @return audioConferenceInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "test", value = "Third party audio conference info.")

  public String getAudioConferenceInfo() {
    return audioConferenceInfo;
  }


  public void setAudioConferenceInfo(String audioConferenceInfo) {
    
    
    
    this.audioConferenceInfo = audioConferenceInfo;
  }


  public MeetingsUpdateDetailsRequestSettings authenticationDomains(String authenticationDomains) {
    
    
    
    
    this.authenticationDomains = authenticationDomains;
    return this;
  }

   /**
   * If user has configured [Sign Into Zoom with Specified Domains](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
   * @return authenticationDomains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example.com", value = "If user has configured [Sign Into Zoom with Specified Domains](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.")

  public String getAuthenticationDomains() {
    return authenticationDomains;
  }


  public void setAuthenticationDomains(String authenticationDomains) {
    
    
    
    this.authenticationDomains = authenticationDomains;
  }


  public MeetingsUpdateDetailsRequestSettings authenticationException(List<MeetingsUpdateDetailsRequestSettingsAuthenticationExceptionInner> authenticationException) {
    
    
    
    
    this.authenticationException = authenticationException;
    return this;
  }

  public MeetingsUpdateDetailsRequestSettings addAuthenticationExceptionItem(MeetingsUpdateDetailsRequestSettingsAuthenticationExceptionInner authenticationExceptionItem) {
    if (this.authenticationException == null) {
      this.authenticationException = new ArrayList<>();
    }
    this.authenticationException.add(authenticationExceptionItem);
    return this;
  }

   /**
   * The participants added here will receive unique meeting invite links and bypass authentication.
   * @return authenticationException
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The participants added here will receive unique meeting invite links and bypass authentication.")

  public List<MeetingsUpdateDetailsRequestSettingsAuthenticationExceptionInner> getAuthenticationException() {
    return authenticationException;
  }


  public void setAuthenticationException(List<MeetingsUpdateDetailsRequestSettingsAuthenticationExceptionInner> authenticationException) {
    
    
    
    this.authenticationException = authenticationException;
  }


  public MeetingsUpdateDetailsRequestSettings authenticationName(String authenticationName) {
    
    
    
    
    this.authenticationName = authenticationName;
    return this;
  }

   /**
   * Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
   * @return authenticationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sign in to Zoom", value = "Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).")

  public String getAuthenticationName() {
    return authenticationName;
  }


  public void setAuthenticationName(String authenticationName) {
    
    
    
    this.authenticationName = authenticationName;
  }


  public MeetingsUpdateDetailsRequestSettings authenticationOption(String authenticationOption) {
    
    
    
    
    this.authenticationOption = authenticationOption;
    return this;
  }

   /**
   * Meeting authentication option ID.
   * @return authenticationOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "signIn_D8cJuqWVQ623CI4Q8yQK0Q", value = "Meeting authentication option ID.")

  public String getAuthenticationOption() {
    return authenticationOption;
  }


  public void setAuthenticationOption(String authenticationOption) {
    
    
    
    this.authenticationOption = authenticationOption;
  }


  public MeetingsUpdateDetailsRequestSettings autoRecording(AutoRecordingEnum autoRecording) {
    
    
    
    
    this.autoRecording = autoRecording;
    return this;
  }

   /**
   * Automatic recording.   &#x60;local&#x60; - Record on local.    &#x60;cloud&#x60; -  Record on cloud.    &#x60;none&#x60; - Disabled.
   * @return autoRecording
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CLOUD", value = "Automatic recording.   `local` - Record on local.    `cloud` -  Record on cloud.    `none` - Disabled.")

  public AutoRecordingEnum getAutoRecording() {
    return autoRecording;
  }


  public void setAutoRecording(AutoRecordingEnum autoRecording) {
    
    
    
    this.autoRecording = autoRecording;
  }


  public MeetingsUpdateDetailsRequestSettings breakoutRoom(MeetingsUpdateDetailsRequestSettingsBreakoutRoom breakoutRoom) {
    
    
    
    
    this.breakoutRoom = breakoutRoom;
    return this;
  }

   /**
   * Get breakoutRoom
   * @return breakoutRoom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsUpdateDetailsRequestSettingsBreakoutRoom getBreakoutRoom() {
    return breakoutRoom;
  }


  public void setBreakoutRoom(MeetingsUpdateDetailsRequestSettingsBreakoutRoom breakoutRoom) {
    
    
    
    this.breakoutRoom = breakoutRoom;
  }


  public MeetingsUpdateDetailsRequestSettings calendarType(CalendarTypeEnum calendarType) {
    
    
    
    
    this.calendarType = calendarType;
    return this;
  }

   /**
   * The type of calendar integration used to schedule the meeting.  * &#x60;1&#x60; - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)  * &#x60;2&#x60; - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)  Works with the &#x60;private_meeting&#x60; field to determine whether to share details of meetings.
   * @return calendarType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_1", value = "The type of calendar integration used to schedule the meeting.  * `1` - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)  * `2` - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)  Works with the `private_meeting` field to determine whether to share details of meetings.")

  public CalendarTypeEnum getCalendarType() {
    return calendarType;
  }


  public void setCalendarType(CalendarTypeEnum calendarType) {
    
    
    
    this.calendarType = calendarType;
  }


  public MeetingsUpdateDetailsRequestSettings closeRegistration(Boolean closeRegistration) {
    
    
    
    
    this.closeRegistration = closeRegistration;
    return this;
  }

   /**
   * Close registration after the event date.
   * @return closeRegistration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Close registration after the event date.")

  public Boolean getCloseRegistration() {
    return closeRegistration;
  }


  public void setCloseRegistration(Boolean closeRegistration) {
    
    
    
    this.closeRegistration = closeRegistration;
  }


  public MeetingsUpdateDetailsRequestSettings cnMeeting(Boolean cnMeeting) {
    
    
    
    
    this.cnMeeting = cnMeeting;
    return this;
  }

   /**
   * Host the meeting in China.
   * @return cnMeeting
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Host the meeting in China.")

  public Boolean getCnMeeting() {
    return cnMeeting;
  }


  public void setCnMeeting(Boolean cnMeeting) {
    
    
    
    this.cnMeeting = cnMeeting;
  }


  public MeetingsUpdateDetailsRequestSettings contactEmail(String contactEmail) {
    
    
    
    
    this.contactEmail = contactEmail;
    return this;
  }

   /**
   * Contact email for registration.
   * @return contactEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jchill@example.com", value = "Contact email for registration.")

  public String getContactEmail() {
    return contactEmail;
  }


  public void setContactEmail(String contactEmail) {
    
    
    
    this.contactEmail = contactEmail;
  }


  public MeetingsUpdateDetailsRequestSettings contactName(String contactName) {
    
    
    
    
    this.contactName = contactName;
    return this;
  }

   /**
   * Contact name for registration.
   * @return contactName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jill Chill", value = "Contact name for registration.")

  public String getContactName() {
    return contactName;
  }


  public void setContactName(String contactName) {
    
    
    
    this.contactName = contactName;
  }


  public MeetingsUpdateDetailsRequestSettings customKeys(List<MeetingsUpdateDetailsRequestSettingsCustomKeysInner> customKeys) {
    
    
    
    
    this.customKeys = customKeys;
    return this;
  }

  public MeetingsUpdateDetailsRequestSettings addCustomKeysItem(MeetingsUpdateDetailsRequestSettingsCustomKeysInner customKeysItem) {
    if (this.customKeys == null) {
      this.customKeys = new ArrayList<>();
    }
    this.customKeys.add(customKeysItem);
    return this;
  }

   /**
   * Custom keys and values assigned to the meeting.
   * @return customKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom keys and values assigned to the meeting.")

  public List<MeetingsUpdateDetailsRequestSettingsCustomKeysInner> getCustomKeys() {
    return customKeys;
  }


  public void setCustomKeys(List<MeetingsUpdateDetailsRequestSettingsCustomKeysInner> customKeys) {
    
    
    
    this.customKeys = customKeys;
  }


  public MeetingsUpdateDetailsRequestSettings emailNotification(Boolean emailNotification) {
    
    
    
    
    this.emailNotification = emailNotification;
    return this;
  }

   /**
   * Whether to send email notifications to [alternative hosts](https://support.zoom.us/hc/en-us/articles/208220166) and [users with scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege). This value defaults to &#x60;true&#x60;.
   * @return emailNotification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to send email notifications to [alternative hosts](https://support.zoom.us/hc/en-us/articles/208220166) and [users with scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege). This value defaults to `true`.")

  public Boolean getEmailNotification() {
    return emailNotification;
  }


  public void setEmailNotification(Boolean emailNotification) {
    
    
    
    this.emailNotification = emailNotification;
  }


  public MeetingsUpdateDetailsRequestSettings encryptionType(EncryptionTypeEnum encryptionType) {
    
    
    
    
    this.encryptionType = encryptionType;
    return this;
  }

   /**
   * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features such cloud recording and phone/SIP/H.323 dial-in, will be **automatically disabled**.     &#x60;enhanced_encryption&#x60; - Enhanced encryption. Encryption is stored in the cloud if you enable this option.       &#x60;e2ee&#x60; - [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the features join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
   * @return encryptionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ENHANCED_ENCRYPTION", value = "Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features such cloud recording and phone/SIP/H.323 dial-in, will be **automatically disabled**.     `enhanced_encryption` - Enhanced encryption. Encryption is stored in the cloud if you enable this option.       `e2ee` - [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the features join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.")

  public EncryptionTypeEnum getEncryptionType() {
    return encryptionType;
  }


  public void setEncryptionType(EncryptionTypeEnum encryptionType) {
    
    
    
    this.encryptionType = encryptionType;
  }


  public MeetingsUpdateDetailsRequestSettings enforceLogin(Boolean enforceLogin) {
    
    
    
    
    this.enforceLogin = enforceLogin;
    return this;
  }

   /**
   * Only signed in users can join this meeting.  **This field is deprecated and will not be supported in the future.**          As an alternative, use the &#x60;meeting_authentication&#x60;, &#x60;authentication_option&#x60;, and &#x60;authentication_domains&#x60; fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
   * @return enforceLogin
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Only signed in users can join this meeting.  **This field is deprecated and will not be supported in the future.**          As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.")

  public Boolean getEnforceLogin() {
    return enforceLogin;
  }


  public void setEnforceLogin(Boolean enforceLogin) {
    
    
    
    this.enforceLogin = enforceLogin;
  }


  public MeetingsUpdateDetailsRequestSettings enforceLoginDomains(String enforceLoginDomains) {
    
    
    
    
    this.enforceLoginDomains = enforceLoginDomains;
    return this;
  }

   /**
   * Only signed in users with specified domains can join meetings.  **This field is deprecated and will not be supported in the future.**          As an alternative, use the &#x60;meeting_authentication&#x60;, &#x60;authentication_option&#x60;. and &#x60;authentication_domains&#x60; fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
   * @return enforceLoginDomains
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example.com", value = "Only signed in users with specified domains can join meetings.  **This field is deprecated and will not be supported in the future.**          As an alternative, use the `meeting_authentication`, `authentication_option`. and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.")

  public String getEnforceLoginDomains() {
    return enforceLoginDomains;
  }


  public void setEnforceLoginDomains(String enforceLoginDomains) {
    
    
    
    this.enforceLoginDomains = enforceLoginDomains;
  }


  public MeetingsUpdateDetailsRequestSettings focusMode(Boolean focusMode) {
    
    
    
    
    this.focusMode = focusMode;
    return this;
  }

   /**
   * Whether the [**Focus Mode** feature](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) is enabled when the meeting starts.
   * @return focusMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the [**Focus Mode** feature](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) is enabled when the meeting starts.")

  public Boolean getFocusMode() {
    return focusMode;
  }


  public void setFocusMode(Boolean focusMode) {
    
    
    
    this.focusMode = focusMode;
  }


  public MeetingsUpdateDetailsRequestSettings globalDialInCountries(List<String> globalDialInCountries) {
    
    
    
    
    this.globalDialInCountries = globalDialInCountries;
    return this;
  }

  public MeetingsUpdateDetailsRequestSettings addGlobalDialInCountriesItem(String globalDialInCountriesItem) {
    if (this.globalDialInCountries == null) {
      this.globalDialInCountries = new ArrayList<>();
    }
    this.globalDialInCountries.add(globalDialInCountriesItem);
    return this;
  }

   /**
   * List of global dial-in countries
   * @return globalDialInCountries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of global dial-in countries")

  public List<String> getGlobalDialInCountries() {
    return globalDialInCountries;
  }


  public void setGlobalDialInCountries(List<String> globalDialInCountries) {
    
    
    
    this.globalDialInCountries = globalDialInCountries;
  }


  public MeetingsUpdateDetailsRequestSettings globalDialInNumbers(List<MeetingsUpdateDetailsRequestSettingsGlobalDialInNumbersInner> globalDialInNumbers) {
    
    
    
    
    this.globalDialInNumbers = globalDialInNumbers;
    return this;
  }

  public MeetingsUpdateDetailsRequestSettings addGlobalDialInNumbersItem(MeetingsUpdateDetailsRequestSettingsGlobalDialInNumbersInner globalDialInNumbersItem) {
    if (this.globalDialInNumbers == null) {
      this.globalDialInNumbers = new ArrayList<>();
    }
    this.globalDialInNumbers.add(globalDialInNumbersItem);
    return this;
  }

   /**
   * Global dial-in countries or regions
   * @return globalDialInNumbers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Global dial-in countries or regions")

  public List<MeetingsUpdateDetailsRequestSettingsGlobalDialInNumbersInner> getGlobalDialInNumbers() {
    return globalDialInNumbers;
  }


  public void setGlobalDialInNumbers(List<MeetingsUpdateDetailsRequestSettingsGlobalDialInNumbersInner> globalDialInNumbers) {
    
    
    
    this.globalDialInNumbers = globalDialInNumbers;
  }


  public MeetingsUpdateDetailsRequestSettings hostVideo(Boolean hostVideo) {
    
    
    
    
    this.hostVideo = hostVideo;
    return this;
  }

   /**
   * Start video when the host joins the meeting.
   * @return hostVideo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Start video when the host joins the meeting.")

  public Boolean getHostVideo() {
    return hostVideo;
  }


  public void setHostVideo(Boolean hostVideo) {
    
    
    
    this.hostVideo = hostVideo;
  }


  public MeetingsUpdateDetailsRequestSettings inMeeting(Boolean inMeeting) {
    
    
    
    
    this.inMeeting = inMeeting;
    return this;
  }

   /**
   * Host meeting in India.
   * @return inMeeting
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Host meeting in India.")

  public Boolean getInMeeting() {
    return inMeeting;
  }


  public void setInMeeting(Boolean inMeeting) {
    
    
    
    this.inMeeting = inMeeting;
  }


  public MeetingsUpdateDetailsRequestSettings jbhTime(JbhTimeEnum jbhTime) {
    
    
    
    
    this.jbhTime = jbhTime;
    return this;
  }

   /**
   * If the value of &#x60;join_before_host&#x60; field is set to true, use this field to indicate time limits for a participant to join a meeting before a host.  *  &#x60;0&#x60; - Allow participant to join anytime. *  &#x60;5&#x60; - Allow participant to join 5 minutes before meeting start time.  * &#x60;10&#x60; - Allow participant to join 10 minutes before meeting start time.
   * @return jbhTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_0", value = "If the value of `join_before_host` field is set to true, use this field to indicate time limits for a participant to join a meeting before a host.  *  `0` - Allow participant to join anytime. *  `5` - Allow participant to join 5 minutes before meeting start time.  * `10` - Allow participant to join 10 minutes before meeting start time.")

  public JbhTimeEnum getJbhTime() {
    return jbhTime;
  }


  public void setJbhTime(JbhTimeEnum jbhTime) {
    
    
    
    this.jbhTime = jbhTime;
  }


  public MeetingsUpdateDetailsRequestSettings joinBeforeHost(Boolean joinBeforeHost) {
    
    
    
    
    this.joinBeforeHost = joinBeforeHost;
    return this;
  }

   /**
   * Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
   * @return joinBeforeHost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.")

  public Boolean getJoinBeforeHost() {
    return joinBeforeHost;
  }


  public void setJoinBeforeHost(Boolean joinBeforeHost) {
    
    
    
    this.joinBeforeHost = joinBeforeHost;
  }


  public MeetingsUpdateDetailsRequestSettings languageInterpretation(MeetingsUpdateDetailsRequestSettingsLanguageInterpretation languageInterpretation) {
    
    
    
    
    this.languageInterpretation = languageInterpretation;
    return this;
  }

   /**
   * Get languageInterpretation
   * @return languageInterpretation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsUpdateDetailsRequestSettingsLanguageInterpretation getLanguageInterpretation() {
    return languageInterpretation;
  }


  public void setLanguageInterpretation(MeetingsUpdateDetailsRequestSettingsLanguageInterpretation languageInterpretation) {
    
    
    
    this.languageInterpretation = languageInterpretation;
  }


  public MeetingsUpdateDetailsRequestSettings signLanguageInterpretation(MeetingsUpdateDetailsRequestSettingsSignLanguageInterpretation signLanguageInterpretation) {
    
    
    
    
    this.signLanguageInterpretation = signLanguageInterpretation;
    return this;
  }

   /**
   * Get signLanguageInterpretation
   * @return signLanguageInterpretation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsUpdateDetailsRequestSettingsSignLanguageInterpretation getSignLanguageInterpretation() {
    return signLanguageInterpretation;
  }


  public void setSignLanguageInterpretation(MeetingsUpdateDetailsRequestSettingsSignLanguageInterpretation signLanguageInterpretation) {
    
    
    
    this.signLanguageInterpretation = signLanguageInterpretation;
  }


  public MeetingsUpdateDetailsRequestSettings meetingAuthentication(Boolean meetingAuthentication) {
    
    
    
    
    this.meetingAuthentication = meetingAuthentication;
    return this;
  }

   /**
   * &#x60;true&#x60;- Only authenticated users can join meetings.
   * @return meetingAuthentication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "`true`- Only authenticated users can join meetings.")

  public Boolean getMeetingAuthentication() {
    return meetingAuthentication;
  }


  public void setMeetingAuthentication(Boolean meetingAuthentication) {
    
    
    
    this.meetingAuthentication = meetingAuthentication;
  }


  public MeetingsUpdateDetailsRequestSettings meetingInvitees(List<MeetingsUpdateDetailsRequestSettingsMeetingInviteesInner> meetingInvitees) {
    
    
    
    
    this.meetingInvitees = meetingInvitees;
    return this;
  }

  public MeetingsUpdateDetailsRequestSettings addMeetingInviteesItem(MeetingsUpdateDetailsRequestSettingsMeetingInviteesInner meetingInviteesItem) {
    if (this.meetingInvitees == null) {
      this.meetingInvitees = new ArrayList<>();
    }
    this.meetingInvitees.add(meetingInviteesItem);
    return this;
  }

   /**
   * A list of the meeting&#39;s invitees.
   * @return meetingInvitees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of the meeting's invitees.")

  public List<MeetingsUpdateDetailsRequestSettingsMeetingInviteesInner> getMeetingInvitees() {
    return meetingInvitees;
  }


  public void setMeetingInvitees(List<MeetingsUpdateDetailsRequestSettingsMeetingInviteesInner> meetingInvitees) {
    
    
    
    this.meetingInvitees = meetingInvitees;
  }


  public MeetingsUpdateDetailsRequestSettings muteUponEntry(Boolean muteUponEntry) {
    
    
    
    
    this.muteUponEntry = muteUponEntry;
    return this;
  }

   /**
   * Mute participants upon entry.
   * @return muteUponEntry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Mute participants upon entry.")

  public Boolean getMuteUponEntry() {
    return muteUponEntry;
  }


  public void setMuteUponEntry(Boolean muteUponEntry) {
    
    
    
    this.muteUponEntry = muteUponEntry;
  }


  public MeetingsUpdateDetailsRequestSettings participantVideo(Boolean participantVideo) {
    
    
    
    
    this.participantVideo = participantVideo;
    return this;
  }

   /**
   * Start video when participants join the meeting.
   * @return participantVideo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Start video when participants join the meeting.")

  public Boolean getParticipantVideo() {
    return participantVideo;
  }


  public void setParticipantVideo(Boolean participantVideo) {
    
    
    
    this.participantVideo = participantVideo;
  }


  public MeetingsUpdateDetailsRequestSettings privateMeeting(Boolean privateMeeting) {
    
    
    
    
    this.privateMeeting = privateMeeting;
    return this;
  }

   /**
   * Whether the meeting is set as private.
   * @return privateMeeting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the meeting is set as private.")

  public Boolean getPrivateMeeting() {
    return privateMeeting;
  }


  public void setPrivateMeeting(Boolean privateMeeting) {
    
    
    
    this.privateMeeting = privateMeeting;
  }


  public MeetingsUpdateDetailsRequestSettings registrantsConfirmationEmail(Boolean registrantsConfirmationEmail) {
    
    
    
    
    this.registrantsConfirmationEmail = registrantsConfirmationEmail;
    return this;
  }

   /**
   * Whether to send registrants an email confirmation. * &#x60;true&#x60; - Send a confirmation email. * &#x60;false&#x60; - Do not send a confirmation email.
   * @return registrantsConfirmationEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to send registrants an email confirmation. * `true` - Send a confirmation email. * `false` - Do not send a confirmation email.")

  public Boolean getRegistrantsConfirmationEmail() {
    return registrantsConfirmationEmail;
  }


  public void setRegistrantsConfirmationEmail(Boolean registrantsConfirmationEmail) {
    
    
    
    this.registrantsConfirmationEmail = registrantsConfirmationEmail;
  }


  public MeetingsUpdateDetailsRequestSettings registrantsEmailNotification(Boolean registrantsEmailNotification) {
    
    
    
    
    this.registrantsEmailNotification = registrantsEmailNotification;
    return this;
  }

   /**
   * Whether to send registrants email notifications about their registration approval, cancellation, or rejection.  * &#x60;true&#x60; - Send an email notification. * &#x60;false&#x60; - Do not send an email notification.   Set this value to &#x60;true&#x60; to also use the &#x60;registrants_confirmation_email&#x60; parameter.
   * @return registrantsEmailNotification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to send registrants email notifications about their registration approval, cancellation, or rejection.  * `true` - Send an email notification. * `false` - Do not send an email notification.   Set this value to `true` to also use the `registrants_confirmation_email` parameter.")

  public Boolean getRegistrantsEmailNotification() {
    return registrantsEmailNotification;
  }


  public void setRegistrantsEmailNotification(Boolean registrantsEmailNotification) {
    
    
    
    this.registrantsEmailNotification = registrantsEmailNotification;
  }


  public MeetingsUpdateDetailsRequestSettings registrationType(RegistrationTypeEnum registrationType) {
    
    
    
    
    this.registrationType = registrationType;
    return this;
  }

   /**
   * Registration type. Used for recurring meeting with fixed time only.  &#x60;1&#x60; - Attendees register once and can attend any of the occurrences.    &#x60;2&#x60; - Attendees need to register for each occurrence to attend.    &#x60;3&#x60; - Attendees register once and can choose one or more occurrences to attend.
   * @return registrationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_1", value = "Registration type. Used for recurring meeting with fixed time only.  `1` - Attendees register once and can attend any of the occurrences.    `2` - Attendees need to register for each occurrence to attend.    `3` - Attendees register once and can choose one or more occurrences to attend.")

  public RegistrationTypeEnum getRegistrationType() {
    return registrationType;
  }


  public void setRegistrationType(RegistrationTypeEnum registrationType) {
    
    
    
    this.registrationType = registrationType;
  }


  public MeetingsUpdateDetailsRequestSettings showShareButton(Boolean showShareButton) {
    
    
    
    
    this.showShareButton = showShareButton;
    return this;
  }

   /**
   * Show social share buttons on the meeting registration page. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
   * @return showShareButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Show social share buttons on the meeting registration page. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).")

  public Boolean getShowShareButton() {
    return showShareButton;
  }


  public void setShowShareButton(Boolean showShareButton) {
    
    
    
    this.showShareButton = showShareButton;
  }


  public MeetingsUpdateDetailsRequestSettings usePmi(Boolean usePmi) {
    
    
    
    
    this.usePmi = usePmi;
    return this;
  }

   /**
   * Use a [personal meeting ID (PMI)](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi). Only used for scheduled meetings and recurring meetings with no fixed time.
   * @return usePmi
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Use a [personal meeting ID (PMI)](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi). Only used for scheduled meetings and recurring meetings with no fixed time.")

  public Boolean getUsePmi() {
    return usePmi;
  }


  public void setUsePmi(Boolean usePmi) {
    
    
    
    this.usePmi = usePmi;
  }


  public MeetingsUpdateDetailsRequestSettings waitingRoom(Boolean waitingRoom) {
    
    
    
    
    this.waitingRoom = waitingRoom;
    return this;
  }

   /**
   * Enable waiting room.
   * @return waitingRoom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Enable waiting room.")

  public Boolean getWaitingRoom() {
    return waitingRoom;
  }


  public void setWaitingRoom(Boolean waitingRoom) {
    
    
    
    this.waitingRoom = waitingRoom;
  }


  public MeetingsUpdateDetailsRequestSettings watermark(Boolean watermark) {
    
    
    
    
    this.watermark = watermark;
    return this;
  }

   /**
   * Add a watermark when viewing a shared screen.
   * @return watermark
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Add a watermark when viewing a shared screen.")

  public Boolean getWatermark() {
    return watermark;
  }


  public void setWatermark(Boolean watermark) {
    
    
    
    this.watermark = watermark;
  }


  public MeetingsUpdateDetailsRequestSettings hostSaveVideoOrder(Boolean hostSaveVideoOrder) {
    
    
    
    
    this.hostSaveVideoOrder = hostSaveVideoOrder;
    return this;
  }

   /**
   * Whether the **Allow host to save video order** feature is enabled.
   * @return hostSaveVideoOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the **Allow host to save video order** feature is enabled.")

  public Boolean getHostSaveVideoOrder() {
    return hostSaveVideoOrder;
  }


  public void setHostSaveVideoOrder(Boolean hostSaveVideoOrder) {
    
    
    
    this.hostSaveVideoOrder = hostSaveVideoOrder;
  }


  public MeetingsUpdateDetailsRequestSettings internalMeeting(Boolean internalMeeting) {
    
    
    
    
    this.internalMeeting = internalMeeting;
    return this;
  }

   /**
   * Whether to set the meeting as an internal meeting.
   * @return internalMeeting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to set the meeting as an internal meeting.")

  public Boolean getInternalMeeting() {
    return internalMeeting;
  }


  public void setInternalMeeting(Boolean internalMeeting) {
    
    
    
    this.internalMeeting = internalMeeting;
  }


  public MeetingsUpdateDetailsRequestSettings continuousMeetingChat(MeetingsUpdateDetailsRequestSettingsContinuousMeetingChat continuousMeetingChat) {
    
    
    
    
    this.continuousMeetingChat = continuousMeetingChat;
    return this;
  }

   /**
   * Get continuousMeetingChat
   * @return continuousMeetingChat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsUpdateDetailsRequestSettingsContinuousMeetingChat getContinuousMeetingChat() {
    return continuousMeetingChat;
  }


  public void setContinuousMeetingChat(MeetingsUpdateDetailsRequestSettingsContinuousMeetingChat continuousMeetingChat) {
    
    
    
    this.continuousMeetingChat = continuousMeetingChat;
  }


  public MeetingsUpdateDetailsRequestSettings participantFocusedMeeting(Boolean participantFocusedMeeting) {
    
    
    
    
    this.participantFocusedMeeting = participantFocusedMeeting;
    return this;
  }

   /**
   * Whether to set the meeting as a participant focused meeting.
   * @return participantFocusedMeeting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to set the meeting as a participant focused meeting.")

  public Boolean getParticipantFocusedMeeting() {
    return participantFocusedMeeting;
  }


  public void setParticipantFocusedMeeting(Boolean participantFocusedMeeting) {
    
    
    
    this.participantFocusedMeeting = participantFocusedMeeting;
  }


  public MeetingsUpdateDetailsRequestSettings resources(List<MeetingsUpdateDetailsRequestSettingsResourcesInner> resources) {
    
    
    
    
    this.resources = resources;
    return this;
  }

  public MeetingsUpdateDetailsRequestSettings addResourcesItem(MeetingsUpdateDetailsRequestSettingsResourcesInner resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * The meeting&#39;s resources.
   * @return resources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The meeting's resources.")

  public List<MeetingsUpdateDetailsRequestSettingsResourcesInner> getResources() {
    return resources;
  }


  public void setResources(List<MeetingsUpdateDetailsRequestSettingsResourcesInner> resources) {
    
    
    
    this.resources = resources;
  }


  public MeetingsUpdateDetailsRequestSettings autoStartMeetingSummary(Boolean autoStartMeetingSummary) {
    
    
    
    
    this.autoStartMeetingSummary = autoStartMeetingSummary;
    return this;
  }

   /**
   * Whether to automatically start meeting summary.
   * @return autoStartMeetingSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to automatically start meeting summary.")

  public Boolean getAutoStartMeetingSummary() {
    return autoStartMeetingSummary;
  }


  public void setAutoStartMeetingSummary(Boolean autoStartMeetingSummary) {
    
    
    
    this.autoStartMeetingSummary = autoStartMeetingSummary;
  }


  public MeetingsUpdateDetailsRequestSettings autoStartAiCompanionQuestions(Boolean autoStartAiCompanionQuestions) {
    
    
    
    
    this.autoStartAiCompanionQuestions = autoStartAiCompanionQuestions;
    return this;
  }

   /**
   * Whether to automatically start AI Companion questions.
   * @return autoStartAiCompanionQuestions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to automatically start AI Companion questions.")

  public Boolean getAutoStartAiCompanionQuestions() {
    return autoStartAiCompanionQuestions;
  }


  public void setAutoStartAiCompanionQuestions(Boolean autoStartAiCompanionQuestions) {
    
    
    
    this.autoStartAiCompanionQuestions = autoStartAiCompanionQuestions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MeetingsUpdateDetailsRequestSettings instance itself
   */
  public MeetingsUpdateDetailsRequestSettings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingsUpdateDetailsRequestSettings meetingsUpdateDetailsRequestSettings = (MeetingsUpdateDetailsRequestSettings) o;
    return Objects.equals(this.allowMultipleDevices, meetingsUpdateDetailsRequestSettings.allowMultipleDevices) &&
        Objects.equals(this.alternativeHosts, meetingsUpdateDetailsRequestSettings.alternativeHosts) &&
        Objects.equals(this.alternativeHostsEmailNotification, meetingsUpdateDetailsRequestSettings.alternativeHostsEmailNotification) &&
        Objects.equals(this.alternativeHostUpdatePolls, meetingsUpdateDetailsRequestSettings.alternativeHostUpdatePolls) &&
        Objects.equals(this.approvalType, meetingsUpdateDetailsRequestSettings.approvalType) &&
        Objects.equals(this.approvedOrDeniedCountriesOrRegions, meetingsUpdateDetailsRequestSettings.approvedOrDeniedCountriesOrRegions) &&
        Objects.equals(this.audio, meetingsUpdateDetailsRequestSettings.audio) &&
        Objects.equals(this.audioConferenceInfo, meetingsUpdateDetailsRequestSettings.audioConferenceInfo) &&
        Objects.equals(this.authenticationDomains, meetingsUpdateDetailsRequestSettings.authenticationDomains) &&
        Objects.equals(this.authenticationException, meetingsUpdateDetailsRequestSettings.authenticationException) &&
        Objects.equals(this.authenticationName, meetingsUpdateDetailsRequestSettings.authenticationName) &&
        Objects.equals(this.authenticationOption, meetingsUpdateDetailsRequestSettings.authenticationOption) &&
        Objects.equals(this.autoRecording, meetingsUpdateDetailsRequestSettings.autoRecording) &&
        Objects.equals(this.breakoutRoom, meetingsUpdateDetailsRequestSettings.breakoutRoom) &&
        Objects.equals(this.calendarType, meetingsUpdateDetailsRequestSettings.calendarType) &&
        Objects.equals(this.closeRegistration, meetingsUpdateDetailsRequestSettings.closeRegistration) &&
        Objects.equals(this.cnMeeting, meetingsUpdateDetailsRequestSettings.cnMeeting) &&
        Objects.equals(this.contactEmail, meetingsUpdateDetailsRequestSettings.contactEmail) &&
        Objects.equals(this.contactName, meetingsUpdateDetailsRequestSettings.contactName) &&
        Objects.equals(this.customKeys, meetingsUpdateDetailsRequestSettings.customKeys) &&
        Objects.equals(this.emailNotification, meetingsUpdateDetailsRequestSettings.emailNotification) &&
        Objects.equals(this.encryptionType, meetingsUpdateDetailsRequestSettings.encryptionType) &&
        Objects.equals(this.enforceLogin, meetingsUpdateDetailsRequestSettings.enforceLogin) &&
        Objects.equals(this.enforceLoginDomains, meetingsUpdateDetailsRequestSettings.enforceLoginDomains) &&
        Objects.equals(this.focusMode, meetingsUpdateDetailsRequestSettings.focusMode) &&
        Objects.equals(this.globalDialInCountries, meetingsUpdateDetailsRequestSettings.globalDialInCountries) &&
        Objects.equals(this.globalDialInNumbers, meetingsUpdateDetailsRequestSettings.globalDialInNumbers) &&
        Objects.equals(this.hostVideo, meetingsUpdateDetailsRequestSettings.hostVideo) &&
        Objects.equals(this.inMeeting, meetingsUpdateDetailsRequestSettings.inMeeting) &&
        Objects.equals(this.jbhTime, meetingsUpdateDetailsRequestSettings.jbhTime) &&
        Objects.equals(this.joinBeforeHost, meetingsUpdateDetailsRequestSettings.joinBeforeHost) &&
        Objects.equals(this.languageInterpretation, meetingsUpdateDetailsRequestSettings.languageInterpretation) &&
        Objects.equals(this.signLanguageInterpretation, meetingsUpdateDetailsRequestSettings.signLanguageInterpretation) &&
        Objects.equals(this.meetingAuthentication, meetingsUpdateDetailsRequestSettings.meetingAuthentication) &&
        Objects.equals(this.meetingInvitees, meetingsUpdateDetailsRequestSettings.meetingInvitees) &&
        Objects.equals(this.muteUponEntry, meetingsUpdateDetailsRequestSettings.muteUponEntry) &&
        Objects.equals(this.participantVideo, meetingsUpdateDetailsRequestSettings.participantVideo) &&
        Objects.equals(this.privateMeeting, meetingsUpdateDetailsRequestSettings.privateMeeting) &&
        Objects.equals(this.registrantsConfirmationEmail, meetingsUpdateDetailsRequestSettings.registrantsConfirmationEmail) &&
        Objects.equals(this.registrantsEmailNotification, meetingsUpdateDetailsRequestSettings.registrantsEmailNotification) &&
        Objects.equals(this.registrationType, meetingsUpdateDetailsRequestSettings.registrationType) &&
        Objects.equals(this.showShareButton, meetingsUpdateDetailsRequestSettings.showShareButton) &&
        Objects.equals(this.usePmi, meetingsUpdateDetailsRequestSettings.usePmi) &&
        Objects.equals(this.waitingRoom, meetingsUpdateDetailsRequestSettings.waitingRoom) &&
        Objects.equals(this.watermark, meetingsUpdateDetailsRequestSettings.watermark) &&
        Objects.equals(this.hostSaveVideoOrder, meetingsUpdateDetailsRequestSettings.hostSaveVideoOrder) &&
        Objects.equals(this.internalMeeting, meetingsUpdateDetailsRequestSettings.internalMeeting) &&
        Objects.equals(this.continuousMeetingChat, meetingsUpdateDetailsRequestSettings.continuousMeetingChat) &&
        Objects.equals(this.participantFocusedMeeting, meetingsUpdateDetailsRequestSettings.participantFocusedMeeting) &&
        Objects.equals(this.resources, meetingsUpdateDetailsRequestSettings.resources) &&
        Objects.equals(this.autoStartMeetingSummary, meetingsUpdateDetailsRequestSettings.autoStartMeetingSummary) &&
        Objects.equals(this.autoStartAiCompanionQuestions, meetingsUpdateDetailsRequestSettings.autoStartAiCompanionQuestions)&&
        Objects.equals(this.additionalProperties, meetingsUpdateDetailsRequestSettings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMultipleDevices, alternativeHosts, alternativeHostsEmailNotification, alternativeHostUpdatePolls, approvalType, approvedOrDeniedCountriesOrRegions, audio, audioConferenceInfo, authenticationDomains, authenticationException, authenticationName, authenticationOption, autoRecording, breakoutRoom, calendarType, closeRegistration, cnMeeting, contactEmail, contactName, customKeys, emailNotification, encryptionType, enforceLogin, enforceLoginDomains, focusMode, globalDialInCountries, globalDialInNumbers, hostVideo, inMeeting, jbhTime, joinBeforeHost, languageInterpretation, signLanguageInterpretation, meetingAuthentication, meetingInvitees, muteUponEntry, participantVideo, privateMeeting, registrantsConfirmationEmail, registrantsEmailNotification, registrationType, showShareButton, usePmi, waitingRoom, watermark, hostSaveVideoOrder, internalMeeting, continuousMeetingChat, participantFocusedMeeting, resources, autoStartMeetingSummary, autoStartAiCompanionQuestions, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingsUpdateDetailsRequestSettings {\n");
    sb.append("    allowMultipleDevices: ").append(toIndentedString(allowMultipleDevices)).append("\n");
    sb.append("    alternativeHosts: ").append(toIndentedString(alternativeHosts)).append("\n");
    sb.append("    alternativeHostsEmailNotification: ").append(toIndentedString(alternativeHostsEmailNotification)).append("\n");
    sb.append("    alternativeHostUpdatePolls: ").append(toIndentedString(alternativeHostUpdatePolls)).append("\n");
    sb.append("    approvalType: ").append(toIndentedString(approvalType)).append("\n");
    sb.append("    approvedOrDeniedCountriesOrRegions: ").append(toIndentedString(approvedOrDeniedCountriesOrRegions)).append("\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    audioConferenceInfo: ").append(toIndentedString(audioConferenceInfo)).append("\n");
    sb.append("    authenticationDomains: ").append(toIndentedString(authenticationDomains)).append("\n");
    sb.append("    authenticationException: ").append(toIndentedString(authenticationException)).append("\n");
    sb.append("    authenticationName: ").append(toIndentedString(authenticationName)).append("\n");
    sb.append("    authenticationOption: ").append(toIndentedString(authenticationOption)).append("\n");
    sb.append("    autoRecording: ").append(toIndentedString(autoRecording)).append("\n");
    sb.append("    breakoutRoom: ").append(toIndentedString(breakoutRoom)).append("\n");
    sb.append("    calendarType: ").append(toIndentedString(calendarType)).append("\n");
    sb.append("    closeRegistration: ").append(toIndentedString(closeRegistration)).append("\n");
    sb.append("    cnMeeting: ").append(toIndentedString(cnMeeting)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    customKeys: ").append(toIndentedString(customKeys)).append("\n");
    sb.append("    emailNotification: ").append(toIndentedString(emailNotification)).append("\n");
    sb.append("    encryptionType: ").append(toIndentedString(encryptionType)).append("\n");
    sb.append("    enforceLogin: ").append(toIndentedString(enforceLogin)).append("\n");
    sb.append("    enforceLoginDomains: ").append(toIndentedString(enforceLoginDomains)).append("\n");
    sb.append("    focusMode: ").append(toIndentedString(focusMode)).append("\n");
    sb.append("    globalDialInCountries: ").append(toIndentedString(globalDialInCountries)).append("\n");
    sb.append("    globalDialInNumbers: ").append(toIndentedString(globalDialInNumbers)).append("\n");
    sb.append("    hostVideo: ").append(toIndentedString(hostVideo)).append("\n");
    sb.append("    inMeeting: ").append(toIndentedString(inMeeting)).append("\n");
    sb.append("    jbhTime: ").append(toIndentedString(jbhTime)).append("\n");
    sb.append("    joinBeforeHost: ").append(toIndentedString(joinBeforeHost)).append("\n");
    sb.append("    languageInterpretation: ").append(toIndentedString(languageInterpretation)).append("\n");
    sb.append("    signLanguageInterpretation: ").append(toIndentedString(signLanguageInterpretation)).append("\n");
    sb.append("    meetingAuthentication: ").append(toIndentedString(meetingAuthentication)).append("\n");
    sb.append("    meetingInvitees: ").append(toIndentedString(meetingInvitees)).append("\n");
    sb.append("    muteUponEntry: ").append(toIndentedString(muteUponEntry)).append("\n");
    sb.append("    participantVideo: ").append(toIndentedString(participantVideo)).append("\n");
    sb.append("    privateMeeting: ").append(toIndentedString(privateMeeting)).append("\n");
    sb.append("    registrantsConfirmationEmail: ").append(toIndentedString(registrantsConfirmationEmail)).append("\n");
    sb.append("    registrantsEmailNotification: ").append(toIndentedString(registrantsEmailNotification)).append("\n");
    sb.append("    registrationType: ").append(toIndentedString(registrationType)).append("\n");
    sb.append("    showShareButton: ").append(toIndentedString(showShareButton)).append("\n");
    sb.append("    usePmi: ").append(toIndentedString(usePmi)).append("\n");
    sb.append("    waitingRoom: ").append(toIndentedString(waitingRoom)).append("\n");
    sb.append("    watermark: ").append(toIndentedString(watermark)).append("\n");
    sb.append("    hostSaveVideoOrder: ").append(toIndentedString(hostSaveVideoOrder)).append("\n");
    sb.append("    internalMeeting: ").append(toIndentedString(internalMeeting)).append("\n");
    sb.append("    continuousMeetingChat: ").append(toIndentedString(continuousMeetingChat)).append("\n");
    sb.append("    participantFocusedMeeting: ").append(toIndentedString(participantFocusedMeeting)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    autoStartMeetingSummary: ").append(toIndentedString(autoStartMeetingSummary)).append("\n");
    sb.append("    autoStartAiCompanionQuestions: ").append(toIndentedString(autoStartAiCompanionQuestions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_multiple_devices");
    openapiFields.add("alternative_hosts");
    openapiFields.add("alternative_hosts_email_notification");
    openapiFields.add("alternative_host_update_polls");
    openapiFields.add("approval_type");
    openapiFields.add("approved_or_denied_countries_or_regions");
    openapiFields.add("audio");
    openapiFields.add("audio_conference_info");
    openapiFields.add("authentication_domains");
    openapiFields.add("authentication_exception");
    openapiFields.add("authentication_name");
    openapiFields.add("authentication_option");
    openapiFields.add("auto_recording");
    openapiFields.add("breakout_room");
    openapiFields.add("calendar_type");
    openapiFields.add("close_registration");
    openapiFields.add("cn_meeting");
    openapiFields.add("contact_email");
    openapiFields.add("contact_name");
    openapiFields.add("custom_keys");
    openapiFields.add("email_notification");
    openapiFields.add("encryption_type");
    openapiFields.add("enforce_login");
    openapiFields.add("enforce_login_domains");
    openapiFields.add("focus_mode");
    openapiFields.add("global_dial_in_countries");
    openapiFields.add("global_dial_in_numbers");
    openapiFields.add("host_video");
    openapiFields.add("in_meeting");
    openapiFields.add("jbh_time");
    openapiFields.add("join_before_host");
    openapiFields.add("language_interpretation");
    openapiFields.add("sign_language_interpretation");
    openapiFields.add("meeting_authentication");
    openapiFields.add("meeting_invitees");
    openapiFields.add("mute_upon_entry");
    openapiFields.add("participant_video");
    openapiFields.add("private_meeting");
    openapiFields.add("registrants_confirmation_email");
    openapiFields.add("registrants_email_notification");
    openapiFields.add("registration_type");
    openapiFields.add("show_share_button");
    openapiFields.add("use_pmi");
    openapiFields.add("waiting_room");
    openapiFields.add("watermark");
    openapiFields.add("host_save_video_order");
    openapiFields.add("internal_meeting");
    openapiFields.add("continuous_meeting_chat");
    openapiFields.add("participant_focused_meeting");
    openapiFields.add("resources");
    openapiFields.add("auto_start_meeting_summary");
    openapiFields.add("auto_start_ai_companion_questions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MeetingsUpdateDetailsRequestSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MeetingsUpdateDetailsRequestSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingsUpdateDetailsRequestSettings is not found in the empty JSON string", MeetingsUpdateDetailsRequestSettings.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("alternative_hosts") != null && !jsonObj.get("alternative_hosts").isJsonNull()) && !jsonObj.get("alternative_hosts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternative_hosts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternative_hosts").toString()));
      }
      // validate the optional field `approved_or_denied_countries_or_regions`
      if (jsonObj.get("approved_or_denied_countries_or_regions") != null && !jsonObj.get("approved_or_denied_countries_or_regions").isJsonNull()) {
        MeetingsUpdateDetailsRequestSettingsApprovedOrDeniedCountriesOrRegions.validateJsonObject(jsonObj.getAsJsonObject("approved_or_denied_countries_or_regions"));
      }
      if ((jsonObj.get("audio") != null && !jsonObj.get("audio").isJsonNull()) && !jsonObj.get("audio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audio").toString()));
      }
      if ((jsonObj.get("audio_conference_info") != null && !jsonObj.get("audio_conference_info").isJsonNull()) && !jsonObj.get("audio_conference_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_conference_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audio_conference_info").toString()));
      }
      if ((jsonObj.get("authentication_domains") != null && !jsonObj.get("authentication_domains").isJsonNull()) && !jsonObj.get("authentication_domains").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_domains` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_domains").toString()));
      }
      if (jsonObj.get("authentication_exception") != null && !jsonObj.get("authentication_exception").isJsonNull()) {
        JsonArray jsonArrayauthenticationException = jsonObj.getAsJsonArray("authentication_exception");
        if (jsonArrayauthenticationException != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authentication_exception").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authentication_exception` to be an array in the JSON string but got `%s`", jsonObj.get("authentication_exception").toString()));
          }

          // validate the optional field `authentication_exception` (array)
          for (int i = 0; i < jsonArrayauthenticationException.size(); i++) {
            MeetingsUpdateDetailsRequestSettingsAuthenticationExceptionInner.validateJsonObject(jsonArrayauthenticationException.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("authentication_name") != null && !jsonObj.get("authentication_name").isJsonNull()) && !jsonObj.get("authentication_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_name").toString()));
      }
      if ((jsonObj.get("authentication_option") != null && !jsonObj.get("authentication_option").isJsonNull()) && !jsonObj.get("authentication_option").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_option` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_option").toString()));
      }
      if ((jsonObj.get("auto_recording") != null && !jsonObj.get("auto_recording").isJsonNull()) && !jsonObj.get("auto_recording").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_recording` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto_recording").toString()));
      }
      // validate the optional field `breakout_room`
      if (jsonObj.get("breakout_room") != null && !jsonObj.get("breakout_room").isJsonNull()) {
        MeetingsUpdateDetailsRequestSettingsBreakoutRoom.validateJsonObject(jsonObj.getAsJsonObject("breakout_room"));
      }
      if ((jsonObj.get("contact_email") != null && !jsonObj.get("contact_email").isJsonNull()) && !jsonObj.get("contact_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_email").toString()));
      }
      if ((jsonObj.get("contact_name") != null && !jsonObj.get("contact_name").isJsonNull()) && !jsonObj.get("contact_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_name").toString()));
      }
      if (jsonObj.get("custom_keys") != null && !jsonObj.get("custom_keys").isJsonNull()) {
        JsonArray jsonArraycustomKeys = jsonObj.getAsJsonArray("custom_keys");
        if (jsonArraycustomKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_keys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_keys` to be an array in the JSON string but got `%s`", jsonObj.get("custom_keys").toString()));
          }

          // validate the optional field `custom_keys` (array)
          for (int i = 0; i < jsonArraycustomKeys.size(); i++) {
            MeetingsUpdateDetailsRequestSettingsCustomKeysInner.validateJsonObject(jsonArraycustomKeys.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("encryption_type") != null && !jsonObj.get("encryption_type").isJsonNull()) && !jsonObj.get("encryption_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryption_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryption_type").toString()));
      }
      if ((jsonObj.get("enforce_login_domains") != null && !jsonObj.get("enforce_login_domains").isJsonNull()) && !jsonObj.get("enforce_login_domains").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforce_login_domains` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforce_login_domains").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("global_dial_in_countries") != null && !jsonObj.get("global_dial_in_countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `global_dial_in_countries` to be an array in the JSON string but got `%s`", jsonObj.get("global_dial_in_countries").toString()));
      }
      if (jsonObj.get("global_dial_in_numbers") != null && !jsonObj.get("global_dial_in_numbers").isJsonNull()) {
        JsonArray jsonArrayglobalDialInNumbers = jsonObj.getAsJsonArray("global_dial_in_numbers");
        if (jsonArrayglobalDialInNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("global_dial_in_numbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `global_dial_in_numbers` to be an array in the JSON string but got `%s`", jsonObj.get("global_dial_in_numbers").toString()));
          }

          // validate the optional field `global_dial_in_numbers` (array)
          for (int i = 0; i < jsonArrayglobalDialInNumbers.size(); i++) {
            MeetingsUpdateDetailsRequestSettingsGlobalDialInNumbersInner.validateJsonObject(jsonArrayglobalDialInNumbers.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `language_interpretation`
      if (jsonObj.get("language_interpretation") != null && !jsonObj.get("language_interpretation").isJsonNull()) {
        MeetingsUpdateDetailsRequestSettingsLanguageInterpretation.validateJsonObject(jsonObj.getAsJsonObject("language_interpretation"));
      }
      // validate the optional field `sign_language_interpretation`
      if (jsonObj.get("sign_language_interpretation") != null && !jsonObj.get("sign_language_interpretation").isJsonNull()) {
        MeetingsUpdateDetailsRequestSettingsSignLanguageInterpretation.validateJsonObject(jsonObj.getAsJsonObject("sign_language_interpretation"));
      }
      if (jsonObj.get("meeting_invitees") != null && !jsonObj.get("meeting_invitees").isJsonNull()) {
        JsonArray jsonArraymeetingInvitees = jsonObj.getAsJsonArray("meeting_invitees");
        if (jsonArraymeetingInvitees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("meeting_invitees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `meeting_invitees` to be an array in the JSON string but got `%s`", jsonObj.get("meeting_invitees").toString()));
          }

          // validate the optional field `meeting_invitees` (array)
          for (int i = 0; i < jsonArraymeetingInvitees.size(); i++) {
            MeetingsUpdateDetailsRequestSettingsMeetingInviteesInner.validateJsonObject(jsonArraymeetingInvitees.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `continuous_meeting_chat`
      if (jsonObj.get("continuous_meeting_chat") != null && !jsonObj.get("continuous_meeting_chat").isJsonNull()) {
        MeetingsUpdateDetailsRequestSettingsContinuousMeetingChat.validateJsonObject(jsonObj.getAsJsonObject("continuous_meeting_chat"));
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            MeetingsUpdateDetailsRequestSettingsResourcesInner.validateJsonObject(jsonArrayresources.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingsUpdateDetailsRequestSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingsUpdateDetailsRequestSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingsUpdateDetailsRequestSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingsUpdateDetailsRequestSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingsUpdateDetailsRequestSettings>() {
           @Override
           public void write(JsonWriter out, MeetingsUpdateDetailsRequestSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingsUpdateDetailsRequestSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MeetingsUpdateDetailsRequestSettings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MeetingsUpdateDetailsRequestSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MeetingsUpdateDetailsRequestSettings
  * @throws IOException if the JSON string is invalid with respect to MeetingsUpdateDetailsRequestSettings
  */
  public static MeetingsUpdateDetailsRequestSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingsUpdateDetailsRequestSettings.class);
  }

 /**
  * Convert an instance of MeetingsUpdateDetailsRequestSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

