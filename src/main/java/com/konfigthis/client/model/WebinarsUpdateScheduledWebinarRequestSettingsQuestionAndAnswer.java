/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * [Q&amp;amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text&#x3D;Overview,and%20upvote%20each%20other&#39;s%20questions.) for webinar.
 */
@ApiModel(description = "[Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer {
  public static final String SERIALIZED_NAME_ALLOW_SUBMIT_QUESTIONS = "allow_submit_questions";
  @SerializedName(SERIALIZED_NAME_ALLOW_SUBMIT_QUESTIONS)
  private Boolean allowSubmitQuestions;

  public static final String SERIALIZED_NAME_ALLOW_ANONYMOUS_QUESTIONS = "allow_anonymous_questions";
  @SerializedName(SERIALIZED_NAME_ALLOW_ANONYMOUS_QUESTIONS)
  private Boolean allowAnonymousQuestions;

  /**
   * Indicate whether you want attendees to be able to view answered questions only or view all questions.  * &#x60;only&#x60; - Attendees are able to view answered questions only.  *  &#x60;all&#x60; - Attendees are able to view all questions submitted in the Q&amp;amp;A.
   */
  @JsonAdapter(AnswerQuestionsEnum.Adapter.class)
 public enum AnswerQuestionsEnum {
    ONLY("only"),
    
    ALL("all");

    private String value;

    AnswerQuestionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnswerQuestionsEnum fromValue(String value) {
      for (AnswerQuestionsEnum b : AnswerQuestionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnswerQuestionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnswerQuestionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnswerQuestionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnswerQuestionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ANSWER_QUESTIONS = "answer_questions";
  @SerializedName(SERIALIZED_NAME_ANSWER_QUESTIONS)
  private AnswerQuestionsEnum answerQuestions;

  public static final String SERIALIZED_NAME_ATTENDEES_CAN_COMMENT = "attendees_can_comment";
  @SerializedName(SERIALIZED_NAME_ATTENDEES_CAN_COMMENT)
  private Boolean attendeesCanComment;

  public static final String SERIALIZED_NAME_ATTENDEES_CAN_UPVOTE = "attendees_can_upvote";
  @SerializedName(SERIALIZED_NAME_ATTENDEES_CAN_UPVOTE)
  private Boolean attendeesCanUpvote;

  public static final String SERIALIZED_NAME_ALLOW_AUTO_REPLY = "allow_auto_reply";
  @SerializedName(SERIALIZED_NAME_ALLOW_AUTO_REPLY)
  private Boolean allowAutoReply;

  public static final String SERIALIZED_NAME_AUTO_REPLY_TEXT = "auto_reply_text";
  @SerializedName(SERIALIZED_NAME_AUTO_REPLY_TEXT)
  private String autoReplyText;

  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  private Boolean enable;

  public WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer() {
  }

  public WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer allowSubmitQuestions(Boolean allowSubmitQuestions) {
    
    
    
    
    this.allowSubmitQuestions = allowSubmitQuestions;
    return this;
  }

   /**
   * * &#x60;true&#x60; - Allow participants to submit questions.  * &#x60;false&#x60; - Do not allow submit questions.
   * @return allowSubmitQuestions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "* `true` - Allow participants to submit questions.  * `false` - Do not allow submit questions.")

  public Boolean getAllowSubmitQuestions() {
    return allowSubmitQuestions;
  }


  public void setAllowSubmitQuestions(Boolean allowSubmitQuestions) {
    
    
    
    this.allowSubmitQuestions = allowSubmitQuestions;
  }


  public WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer allowAnonymousQuestions(Boolean allowAnonymousQuestions) {
    
    
    
    
    this.allowAnonymousQuestions = allowAnonymousQuestions;
    return this;
  }

   /**
   * * &#x60;true&#x60; - Allow participants to send questions without providing their name to the host, co-host, and panelists..  * &#x60;false&#x60; - Do not allow anonymous questions.
   * @return allowAnonymousQuestions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "* `true` - Allow participants to send questions without providing their name to the host, co-host, and panelists..  * `false` - Do not allow anonymous questions.")

  public Boolean getAllowAnonymousQuestions() {
    return allowAnonymousQuestions;
  }


  public void setAllowAnonymousQuestions(Boolean allowAnonymousQuestions) {
    
    
    
    this.allowAnonymousQuestions = allowAnonymousQuestions;
  }


  public WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer answerQuestions(AnswerQuestionsEnum answerQuestions) {
    
    
    
    
    this.answerQuestions = answerQuestions;
    return this;
  }

   /**
   * Indicate whether you want attendees to be able to view answered questions only or view all questions.  * &#x60;only&#x60; - Attendees are able to view answered questions only.  *  &#x60;all&#x60; - Attendees are able to view all questions submitted in the Q&amp;amp;A.
   * @return answerQuestions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ALL", value = "Indicate whether you want attendees to be able to view answered questions only or view all questions.  * `only` - Attendees are able to view answered questions only.  *  `all` - Attendees are able to view all questions submitted in the Q&amp;A.")

  public AnswerQuestionsEnum getAnswerQuestions() {
    return answerQuestions;
  }


  public void setAnswerQuestions(AnswerQuestionsEnum answerQuestions) {
    
    
    
    this.answerQuestions = answerQuestions;
  }


  public WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer attendeesCanComment(Boolean attendeesCanComment) {
    
    
    
    
    this.attendeesCanComment = attendeesCanComment;
    return this;
  }

   /**
   * * &#x60;true&#x60; - Attendees can answer questions or leave a comment in the question thread.  * &#x60;false&#x60; - Attendees can&#39;t answer questions or leave a comment in the question thread.
   * @return attendeesCanComment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "* `true` - Attendees can answer questions or leave a comment in the question thread.  * `false` - Attendees can't answer questions or leave a comment in the question thread.")

  public Boolean getAttendeesCanComment() {
    return attendeesCanComment;
  }


  public void setAttendeesCanComment(Boolean attendeesCanComment) {
    
    
    
    this.attendeesCanComment = attendeesCanComment;
  }


  public WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer attendeesCanUpvote(Boolean attendeesCanUpvote) {
    
    
    
    
    this.attendeesCanUpvote = attendeesCanUpvote;
    return this;
  }

   /**
   * * &#x60;true&#x60; - Attendees can click the thumbs up button to bring popular questions to the top of the Q&amp;amp;A window.  * &#x60;false&#x60; - Attendees can&#39;t click the thumbs up button on questions.
   * @return attendeesCanUpvote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "* `true` - Attendees can click the thumbs up button to bring popular questions to the top of the Q&amp;A window.  * `false` - Attendees can't click the thumbs up button on questions.")

  public Boolean getAttendeesCanUpvote() {
    return attendeesCanUpvote;
  }


  public void setAttendeesCanUpvote(Boolean attendeesCanUpvote) {
    
    
    
    this.attendeesCanUpvote = attendeesCanUpvote;
  }


  public WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer allowAutoReply(Boolean allowAutoReply) {
    
    
    
    
    this.allowAutoReply = allowAutoReply;
    return this;
  }

   /**
   * If simulive webinar,   * &#x60;true&#x60; - allow auto-reply to attendees.   * &#x60;false&#x60; - don&#39;t allow auto-reply to the attendees.
   * @return allowAutoReply
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "If simulive webinar,   * `true` - allow auto-reply to attendees.   * `false` - don't allow auto-reply to the attendees.")

  public Boolean getAllowAutoReply() {
    return allowAutoReply;
  }


  public void setAllowAutoReply(Boolean allowAutoReply) {
    
    
    
    this.allowAutoReply = allowAutoReply;
  }


  public WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer autoReplyText(String autoReplyText) {
    
    
    
    
    this.autoReplyText = autoReplyText;
    return this;
  }

   /**
   * If &#x60;allow_auto_reply&#x60; &#x3D; true, the text to be included in the automatic response. 
   * @return autoReplyText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Thank you for your question. We will get back to you shortly.", value = "If `allow_auto_reply` = true, the text to be included in the automatic response. ")

  public String getAutoReplyText() {
    return autoReplyText;
  }


  public void setAutoReplyText(String autoReplyText) {
    
    
    
    this.autoReplyText = autoReplyText;
  }


  public WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer enable(Boolean enable) {
    
    
    
    
    this.enable = enable;
    return this;
  }

   /**
   * * &#x60;true&#x60; - Enable [Q&amp;amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text&#x3D;Overview,and%20upvote%20each%20other&#39;s%20questions.) for webinar.  * &#x60;false&#x60; - Disable Q&amp;amp;A for webinar.
   * @return enable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "* `true` - Enable [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.  * `false` - Disable Q&amp;A for webinar.")

  public Boolean getEnable() {
    return enable;
  }


  public void setEnable(Boolean enable) {
    
    
    
    this.enable = enable;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer instance itself
   */
  public WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer webinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer = (WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer) o;
    return Objects.equals(this.allowSubmitQuestions, webinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.allowSubmitQuestions) &&
        Objects.equals(this.allowAnonymousQuestions, webinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.allowAnonymousQuestions) &&
        Objects.equals(this.answerQuestions, webinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.answerQuestions) &&
        Objects.equals(this.attendeesCanComment, webinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.attendeesCanComment) &&
        Objects.equals(this.attendeesCanUpvote, webinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.attendeesCanUpvote) &&
        Objects.equals(this.allowAutoReply, webinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.allowAutoReply) &&
        Objects.equals(this.autoReplyText, webinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.autoReplyText) &&
        Objects.equals(this.enable, webinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.enable)&&
        Objects.equals(this.additionalProperties, webinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowSubmitQuestions, allowAnonymousQuestions, answerQuestions, attendeesCanComment, attendeesCanUpvote, allowAutoReply, autoReplyText, enable, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer {\n");
    sb.append("    allowSubmitQuestions: ").append(toIndentedString(allowSubmitQuestions)).append("\n");
    sb.append("    allowAnonymousQuestions: ").append(toIndentedString(allowAnonymousQuestions)).append("\n");
    sb.append("    answerQuestions: ").append(toIndentedString(answerQuestions)).append("\n");
    sb.append("    attendeesCanComment: ").append(toIndentedString(attendeesCanComment)).append("\n");
    sb.append("    attendeesCanUpvote: ").append(toIndentedString(attendeesCanUpvote)).append("\n");
    sb.append("    allowAutoReply: ").append(toIndentedString(allowAutoReply)).append("\n");
    sb.append("    autoReplyText: ").append(toIndentedString(autoReplyText)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_submit_questions");
    openapiFields.add("allow_anonymous_questions");
    openapiFields.add("answer_questions");
    openapiFields.add("attendees_can_comment");
    openapiFields.add("attendees_can_upvote");
    openapiFields.add("allow_auto_reply");
    openapiFields.add("auto_reply_text");
    openapiFields.add("enable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer is not found in the empty JSON string", WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("answer_questions") != null && !jsonObj.get("answer_questions").isJsonNull()) && !jsonObj.get("answer_questions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answer_questions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answer_questions").toString()));
      }
      if ((jsonObj.get("auto_reply_text") != null && !jsonObj.get("auto_reply_text").isJsonNull()) && !jsonObj.get("auto_reply_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_reply_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto_reply_text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.class));

       return (TypeAdapter<T>) new TypeAdapter<WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer>() {
           @Override
           public void write(JsonWriter out, WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer
  * @throws IOException if the JSON string is invalid with respect to WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer
  */
  public static WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer.class);
  }

 /**
  * Convert an instance of WebinarsUpdateScheduledWebinarRequestSettingsQuestionAndAnswer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

