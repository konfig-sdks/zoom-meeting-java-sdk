/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Recording file object.
 */
@ApiModel(description = "Recording file object.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner {
  public static final String SERIALIZED_NAME_DELETED_TIME = "deleted_time";
  @SerializedName(SERIALIZED_NAME_DELETED_TIME)
  private String deletedTime;

  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "download_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private String downloadUrl;

  public static final String SERIALIZED_NAME_FILE_PATH = "file_path";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_FILE_SIZE = "file_size";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Double fileSize;

  /**
   * The recording file type.     &#x60;MP4&#x60; - Video file of the recording.    &#x60;M4A&#x60; Audio-only file of the recording.    &#x60;TIMELINE&#x60; - Timestamp file of the recording in JSON file format. To get a timeline file, the **Add a timestamp to the recording** setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host&#39;s timezone, set on their Zoom profile.      &#x60;TRANSCRIPT&#x60; - Transcription file of the recording in VTT format.     &#x60;CHAT&#x60; - A TXT file containing in-meeting chat messages that were sent during the meeting.    &#x60;CC&#x60; - File containing closed captions of the recording in VTT file format.    &#x60;CSV&#x60; - File containing polling data in CSV format.          A recording file object with file type of either &#x60;CC&#x60; or &#x60;TIMELINE&#x60; **does not have** the following properties:      &#x60;id&#x60;, &#x60;status&#x60;, &#x60;file_size&#x60;, &#x60;recording_type&#x60;, and &#x60;play_url&#x60;.    &#x60;SUMMARY&#x60; - Summary file of the recording in JSON file format.
   */
  @JsonAdapter(FileTypeEnum.Adapter.class)
 public enum FileTypeEnum {
    MP4("MP4"),
    
    M4A("M4A"),
    
    CHAT("CHAT"),
    
    TRANSCRIPT("TRANSCRIPT"),
    
    CSV("CSV"),
    
    TB("TB"),
    
    CC("CC"),
    
    CHAT_MESSAGE("CHAT_MESSAGE"),
    
    SUMMARY("SUMMARY");

    private String value;

    FileTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileTypeEnum fromValue(String value) {
      for (FileTypeEnum b : FileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FILE_TYPE = "file_type";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private FileTypeEnum fileType;

  /**
   * The file extension type of the recording file.
   */
  @JsonAdapter(FileExtensionEnum.Adapter.class)
 public enum FileExtensionEnum {
    MP4("MP4"),
    
    M4A("M4A"),
    
    TXT("TXT"),
    
    VTT("VTT"),
    
    CSV("CSV"),
    
    JSON("JSON"),
    
    JPG("JPG");

    private String value;

    FileExtensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileExtensionEnum fromValue(String value) {
      for (FileExtensionEnum b : FileExtensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileExtensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileExtensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileExtensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileExtensionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FILE_EXTENSION = "file_extension";
  @SerializedName(SERIALIZED_NAME_FILE_EXTENSION)
  private FileExtensionEnum fileExtension;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MEETING_ID = "meeting_id";
  @SerializedName(SERIALIZED_NAME_MEETING_ID)
  private String meetingId;

  public static final String SERIALIZED_NAME_PLAY_URL = "play_url";
  @SerializedName(SERIALIZED_NAME_PLAY_URL)
  private String playUrl;

  public static final String SERIALIZED_NAME_RECORDING_END = "recording_end";
  @SerializedName(SERIALIZED_NAME_RECORDING_END)
  private String recordingEnd;

  public static final String SERIALIZED_NAME_RECORDING_START = "recording_start";
  @SerializedName(SERIALIZED_NAME_RECORDING_START)
  private String recordingStart;

  /**
   * The recording type.    &#x60;shared_screen_with_speaker_view(CC)&#x60;    &#x60;shared_screen_with_speaker_view&#x60;    &#x60;shared_screen_with_gallery_view&#x60;    &#x60;speaker_view&#x60;    &#x60;gallery_view&#x60;    &#x60;shared_screen&#x60;    &#x60;audio_only&#x60;    &#x60;audio_transcript&#x60;    &#x60;chat_file&#x60;    &#x60;active_speaker&#x60;    &#x60;poll&#x60;    &#x60;timeline&#x60;    &#x60;closed_caption&#x60;    &#x60;audio_interpretation&#x60;    &#x60;summary&#x60;    &#x60;summary_next_steps&#x60;    &#x60;summary_smart_chapters&#x60;    &#x60;sign_interpretation&#x60;    &#x60;production_studio&#x60;
   */
  @JsonAdapter(RecordingTypeEnum.Adapter.class)
 public enum RecordingTypeEnum {
    SHARED_SCREEN_WITH_SPEAKER_VIEW_CC_("shared_screen_with_speaker_view(CC)"),
    
    SHARED_SCREEN_WITH_SPEAKER_VIEW("shared_screen_with_speaker_view"),
    
    SHARED_SCREEN_WITH_GALLERY_VIEW("shared_screen_with_gallery_view"),
    
    ACTIVE_SPEAKER("active_speaker"),
    
    GALLERY_VIEW("gallery_view"),
    
    SHARED_SCREEN("shared_screen"),
    
    AUDIO_ONLY("audio_only"),
    
    AUDIO_TRANSCRIPT("audio_transcript"),
    
    CHAT_FILE("chat_file"),
    
    POLL("poll"),
    
    HOST_VIDEO("host_video"),
    
    CLOSED_CAPTION("closed_caption"),
    
    TIMELINE("timeline"),
    
    THUMBNAIL("thumbnail"),
    
    AUDIO_INTERPRETATION("audio_interpretation"),
    
    SUMMARY("summary"),
    
    SUMMARY_NEXT_STEPS("summary_next_steps"),
    
    SUMMARY_SMART_CHAPTERS("summary_smart_chapters"),
    
    SIGN_INTERPRETATION("sign_interpretation"),
    
    PRODUCTION_STUDIO("production_studio");

    private String value;

    RecordingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecordingTypeEnum fromValue(String value) {
      for (RecordingTypeEnum b : RecordingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecordingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecordingTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RECORDING_TYPE = "recording_type";
  @SerializedName(SERIALIZED_NAME_RECORDING_TYPE)
  private RecordingTypeEnum recordingType;

  /**
   * The recording status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    COMPLETED("completed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner() {
  }

  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner deletedTime(String deletedTime) {
    
    
    
    
    this.deletedTime = deletedTime;
    return this;
  }

   /**
   * The time when recording was deleted. Returned in the response only for trash query.
   * @return deletedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-03-18T05:41:36Z", value = "The time when recording was deleted. Returned in the response only for trash query.")

  public String getDeletedTime() {
    return deletedTime;
  }


  public void setDeletedTime(String deletedTime) {
    
    
    
    this.deletedTime = deletedTime;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner downloadUrl(String downloadUrl) {
    
    
    
    
    this.downloadUrl = downloadUrl;
    return this;
  }

   /**
   * The URL to download the recording.   **OAuth apps**   If a user has authorized and installed your OAuth app that contains recording scopes, use the download_access_token or the user&#39;s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) to download the file, and set the access_token as a Bearer token in the Authorization header.   &#x60;curl -H &#39;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&#39; https://{{base-domain}}/rec/archive/download/xyz&#x60;.   **Note:** This field does **not** return for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). Instead, this API will return the &#x60;file_path&#x60; field.
   * @return downloadUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/rec/download/Qg75t7xZBtEbAkjdlgbfdngBBBB", value = "The URL to download the recording.   **OAuth apps**   If a user has authorized and installed your OAuth app that contains recording scopes, use the download_access_token or the user's [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) to download the file, and set the access_token as a Bearer token in the Authorization header.   `curl -H 'Authorization: Bearer <ACCESS_TOKEN>' https://{{base-domain}}/rec/archive/download/xyz`.   **Note:** This field does **not** return for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). Instead, this API will return the `file_path` field.")

  public String getDownloadUrl() {
    return downloadUrl;
  }


  public void setDownloadUrl(String downloadUrl) {
    
    
    
    this.downloadUrl = downloadUrl;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner filePath(String filePath) {
    
    
    
    
    this.filePath = filePath;
    return this;
  }

   /**
   * The file path to the On-Premise account recording.   **Note:** This API only returns this field for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the &#x60;download_url&#x60; field.
   * @return filePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/9090876528/path01/demo.mp4", value = "The file path to the On-Premise account recording.   **Note:** This API only returns this field for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the `download_url` field.")

  public String getFilePath() {
    return filePath;
  }


  public void setFilePath(String filePath) {
    
    
    
    this.filePath = filePath;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner fileSize(Double fileSize) {
    
    
    
    
    this.fileSize = fileSize;
    return this;
  }

  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner fileSize(Integer fileSize) {
    
    
    
    
    this.fileSize = fileSize.doubleValue();
    return this;
  }

   /**
   * The recording file size.
   * @return fileSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7220", value = "The recording file size.")

  public Double getFileSize() {
    return fileSize;
  }


  public void setFileSize(Double fileSize) {
    
    
    
    this.fileSize = fileSize;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner fileType(FileTypeEnum fileType) {
    
    
    
    
    this.fileType = fileType;
    return this;
  }

   /**
   * The recording file type.     &#x60;MP4&#x60; - Video file of the recording.    &#x60;M4A&#x60; Audio-only file of the recording.    &#x60;TIMELINE&#x60; - Timestamp file of the recording in JSON file format. To get a timeline file, the **Add a timestamp to the recording** setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host&#39;s timezone, set on their Zoom profile.      &#x60;TRANSCRIPT&#x60; - Transcription file of the recording in VTT format.     &#x60;CHAT&#x60; - A TXT file containing in-meeting chat messages that were sent during the meeting.    &#x60;CC&#x60; - File containing closed captions of the recording in VTT file format.    &#x60;CSV&#x60; - File containing polling data in CSV format.          A recording file object with file type of either &#x60;CC&#x60; or &#x60;TIMELINE&#x60; **does not have** the following properties:      &#x60;id&#x60;, &#x60;status&#x60;, &#x60;file_size&#x60;, &#x60;recording_type&#x60;, and &#x60;play_url&#x60;.    &#x60;SUMMARY&#x60; - Summary file of the recording in JSON file format.
   * @return fileType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MP4", value = "The recording file type.     `MP4` - Video file of the recording.    `M4A` Audio-only file of the recording.    `TIMELINE` - Timestamp file of the recording in JSON file format. To get a timeline file, the **Add a timestamp to the recording** setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone, set on their Zoom profile.      `TRANSCRIPT` - Transcription file of the recording in VTT format.     `CHAT` - A TXT file containing in-meeting chat messages that were sent during the meeting.    `CC` - File containing closed captions of the recording in VTT file format.    `CSV` - File containing polling data in CSV format.          A recording file object with file type of either `CC` or `TIMELINE` **does not have** the following properties:      `id`, `status`, `file_size`, `recording_type`, and `play_url`.    `SUMMARY` - Summary file of the recording in JSON file format.")

  public FileTypeEnum getFileType() {
    return fileType;
  }


  public void setFileType(FileTypeEnum fileType) {
    
    
    
    this.fileType = fileType;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner fileExtension(FileExtensionEnum fileExtension) {
    
    
    
    
    this.fileExtension = fileExtension;
    return this;
  }

   /**
   * The file extension type of the recording file.
   * @return fileExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "M4A", value = "The file extension type of the recording file.")

  public FileExtensionEnum getFileExtension() {
    return fileExtension;
  }


  public void setFileExtension(FileExtensionEnum fileExtension) {
    
    
    
    this.fileExtension = fileExtension;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The recording file ID. Included in the response of general query.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "72576a1f-4e66-4a77-87c4-f13f9808bd76", value = "The recording file ID. Included in the response of general query.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner meetingId(String meetingId) {
    
    
    
    
    this.meetingId = meetingId;
    return this;
  }

   /**
   * The meeting ID. 
   * @return meetingId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "L0AGOEPVR9m5WSOOs/d+FQ==", value = "The meeting ID. ")

  public String getMeetingId() {
    return meetingId;
  }


  public void setMeetingId(String meetingId) {
    
    
    
    this.meetingId = meetingId;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner playUrl(String playUrl) {
    
    
    
    
    this.playUrl = playUrl;
    return this;
  }

   /**
   * The URL to play a recording file.
   * @return playUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/rec/play/Qg75t7xZBtEbAkjdlgbfdngBBBB", value = "The URL to play a recording file.")

  public String getPlayUrl() {
    return playUrl;
  }


  public void setPlayUrl(String playUrl) {
    
    
    
    this.playUrl = playUrl;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner recordingEnd(String recordingEnd) {
    
    
    
    
    this.recordingEnd = recordingEnd;
    return this;
  }

   /**
   * The recording end time. Response in general query.
   * @return recordingEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-03-18T05:41:36Z", value = "The recording end time. Response in general query.")

  public String getRecordingEnd() {
    return recordingEnd;
  }


  public void setRecordingEnd(String recordingEnd) {
    
    
    
    this.recordingEnd = recordingEnd;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner recordingStart(String recordingStart) {
    
    
    
    
    this.recordingStart = recordingStart;
    return this;
  }

   /**
   * The recording start time.
   * @return recordingStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-03-18T05:41:36Z", value = "The recording start time.")

  public String getRecordingStart() {
    return recordingStart;
  }


  public void setRecordingStart(String recordingStart) {
    
    
    
    this.recordingStart = recordingStart;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner recordingType(RecordingTypeEnum recordingType) {
    
    
    
    
    this.recordingType = recordingType;
    return this;
  }

   /**
   * The recording type.    &#x60;shared_screen_with_speaker_view(CC)&#x60;    &#x60;shared_screen_with_speaker_view&#x60;    &#x60;shared_screen_with_gallery_view&#x60;    &#x60;speaker_view&#x60;    &#x60;gallery_view&#x60;    &#x60;shared_screen&#x60;    &#x60;audio_only&#x60;    &#x60;audio_transcript&#x60;    &#x60;chat_file&#x60;    &#x60;active_speaker&#x60;    &#x60;poll&#x60;    &#x60;timeline&#x60;    &#x60;closed_caption&#x60;    &#x60;audio_interpretation&#x60;    &#x60;summary&#x60;    &#x60;summary_next_steps&#x60;    &#x60;summary_smart_chapters&#x60;    &#x60;sign_interpretation&#x60;    &#x60;production_studio&#x60;
   * @return recordingType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SHARED_SCREEN_WITH_SPEAKER_VIEW", value = "The recording type.    `shared_screen_with_speaker_view(CC)`    `shared_screen_with_speaker_view`    `shared_screen_with_gallery_view`    `speaker_view`    `gallery_view`    `shared_screen`    `audio_only`    `audio_transcript`    `chat_file`    `active_speaker`    `poll`    `timeline`    `closed_caption`    `audio_interpretation`    `summary`    `summary_next_steps`    `summary_smart_chapters`    `sign_interpretation`    `production_studio`")

  public RecordingTypeEnum getRecordingType() {
    return recordingType;
  }


  public void setRecordingType(RecordingTypeEnum recordingType) {
    
    
    
    this.recordingType = recordingType;
  }


  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The recording status.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "COMPLETED", value = "The recording status.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner instance itself
   */
  public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner = (CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner) o;
    return Objects.equals(this.deletedTime, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.deletedTime) &&
        Objects.equals(this.downloadUrl, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.downloadUrl) &&
        Objects.equals(this.filePath, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.filePath) &&
        Objects.equals(this.fileSize, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.fileSize) &&
        Objects.equals(this.fileType, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.fileType) &&
        Objects.equals(this.fileExtension, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.fileExtension) &&
        Objects.equals(this.id, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.id) &&
        Objects.equals(this.meetingId, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.meetingId) &&
        Objects.equals(this.playUrl, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.playUrl) &&
        Objects.equals(this.recordingEnd, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.recordingEnd) &&
        Objects.equals(this.recordingStart, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.recordingStart) &&
        Objects.equals(this.recordingType, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.recordingType) &&
        Objects.equals(this.status, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.status)&&
        Objects.equals(this.additionalProperties, cloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deletedTime, downloadUrl, filePath, fileSize, fileType, fileExtension, id, meetingId, playUrl, recordingEnd, recordingStart, recordingType, status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner {\n");
    sb.append("    deletedTime: ").append(toIndentedString(deletedTime)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    meetingId: ").append(toIndentedString(meetingId)).append("\n");
    sb.append("    playUrl: ").append(toIndentedString(playUrl)).append("\n");
    sb.append("    recordingEnd: ").append(toIndentedString(recordingEnd)).append("\n");
    sb.append("    recordingStart: ").append(toIndentedString(recordingStart)).append("\n");
    sb.append("    recordingType: ").append(toIndentedString(recordingType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deleted_time");
    openapiFields.add("download_url");
    openapiFields.add("file_path");
    openapiFields.add("file_size");
    openapiFields.add("file_type");
    openapiFields.add("file_extension");
    openapiFields.add("id");
    openapiFields.add("meeting_id");
    openapiFields.add("play_url");
    openapiFields.add("recording_end");
    openapiFields.add("recording_start");
    openapiFields.add("recording_type");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner is not found in the empty JSON string", CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("deleted_time") != null && !jsonObj.get("deleted_time").isJsonNull()) && !jsonObj.get("deleted_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleted_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleted_time").toString()));
      }
      if ((jsonObj.get("download_url") != null && !jsonObj.get("download_url").isJsonNull()) && !jsonObj.get("download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_url").toString()));
      }
      if ((jsonObj.get("file_path") != null && !jsonObj.get("file_path").isJsonNull()) && !jsonObj.get("file_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_path").toString()));
      }
      if ((jsonObj.get("file_type") != null && !jsonObj.get("file_type").isJsonNull()) && !jsonObj.get("file_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_type").toString()));
      }
      if ((jsonObj.get("file_extension") != null && !jsonObj.get("file_extension").isJsonNull()) && !jsonObj.get("file_extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_extension").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("meeting_id") != null && !jsonObj.get("meeting_id").isJsonNull()) && !jsonObj.get("meeting_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meeting_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meeting_id").toString()));
      }
      if ((jsonObj.get("play_url") != null && !jsonObj.get("play_url").isJsonNull()) && !jsonObj.get("play_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `play_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("play_url").toString()));
      }
      if ((jsonObj.get("recording_end") != null && !jsonObj.get("recording_end").isJsonNull()) && !jsonObj.get("recording_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recording_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recording_end").toString()));
      }
      if ((jsonObj.get("recording_start") != null && !jsonObj.get("recording_start").isJsonNull()) && !jsonObj.get("recording_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recording_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recording_start").toString()));
      }
      if ((jsonObj.get("recording_type") != null && !jsonObj.get("recording_type").isJsonNull()) && !jsonObj.get("recording_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recording_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recording_type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner>() {
           @Override
           public void write(JsonWriter out, CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner
  * @throws IOException if the JSON string is invalid with respect to CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner
  */
  public static CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner.class);
  }

 /**
  * Convert an instance of CloudRecordingListRecordingsResponseMeetingsInnerRecordingFilesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

