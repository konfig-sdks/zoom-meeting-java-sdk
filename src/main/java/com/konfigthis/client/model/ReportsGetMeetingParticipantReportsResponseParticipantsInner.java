/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportsGetMeetingParticipantReportsResponseParticipantsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportsGetMeetingParticipantReportsResponseParticipantsInner {
  public static final String SERIALIZED_NAME_CUSTOMER_KEY = "customer_key";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_KEY)
  private String customerKey;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_FAILOVER = "failover";
  @SerializedName(SERIALIZED_NAME_FAILOVER)
  private Boolean failover;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOIN_TIME = "join_time";
  @SerializedName(SERIALIZED_NAME_JOIN_TIME)
  private OffsetDateTime joinTime;

  public static final String SERIALIZED_NAME_LEAVE_TIME = "leave_time";
  @SerializedName(SERIALIZED_NAME_LEAVE_TIME)
  private OffsetDateTime leaveTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REGISTRANT_ID = "registrant_id";
  @SerializedName(SERIALIZED_NAME_REGISTRANT_ID)
  private String registrantId;

  /**
   * The participant&#39;s status.  * &#x60;in_meeting&#x60; - In a meeting.  * &#x60;in_waiting_room&#x60; - In a waiting room.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    MEETING("in_meeting"),
    
    WAITING_ROOM("in_waiting_room");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_USER_EMAIL = "user_email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_BO_MTG_ID = "bo_mtg_id";
  @SerializedName(SERIALIZED_NAME_BO_MTG_ID)
  private String boMtgId;

  public static final String SERIALIZED_NAME_PARTICIPANT_USER_ID = "participant_user_id";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_USER_ID)
  private String participantUserId;

  public ReportsGetMeetingParticipantReportsResponseParticipantsInner() {
  }

  public ReportsGetMeetingParticipantReportsResponseParticipantsInner customerKey(String customerKey) {
    
    
    
    
    this.customerKey = customerKey;
    return this;
  }

   /**
   * The participant&#39;s SDK identifier. This value can be alphanumeric, up to a maximum length of 35 characters.
   * @return customerKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "349589LkJyeW", value = "The participant's SDK identifier. This value can be alphanumeric, up to a maximum length of 35 characters.")

  public String getCustomerKey() {
    return customerKey;
  }


  public void setCustomerKey(String customerKey) {
    
    
    
    this.customerKey = customerKey;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner duration(Integer duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * Participant duration.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "259", value = "Participant duration.")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    
    
    
    this.duration = duration;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner failover(Boolean failover) {
    
    
    
    
    this.failover = failover;
    return this;
  }

   /**
   * Indicates if failover happened during the meeting.
   * @return failover
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates if failover happened during the meeting.")

  public Boolean getFailover() {
    return failover;
  }


  public void setFailover(Boolean failover) {
    
    
    
    this.failover = failover;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The participant&#39;s universally unique ID (UUID).  * If the participant joins the meeting by logging into Zoom, this value is the &#x60;id&#x60; value in the [**Get a user**](https://developers.zoom.us) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.   **Note:** Use the &#x60;participant_user_id&#x60; value instead of this value. We will remove this response in a future release.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "30R7kT7bTIKSNUFEuH_Qlg", value = "The participant's universally unique ID (UUID).  * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](https://developers.zoom.us) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.   **Note:** Use the `participant_user_id` value instead of this value. We will remove this response in a future release.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner joinTime(OffsetDateTime joinTime) {
    
    
    
    
    this.joinTime = joinTime;
    return this;
  }

   /**
   * Participant join time.
   * @return joinTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-03-23T06:58:09Z", value = "Participant join time.")

  public OffsetDateTime getJoinTime() {
    return joinTime;
  }


  public void setJoinTime(OffsetDateTime joinTime) {
    
    
    
    this.joinTime = joinTime;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner leaveTime(OffsetDateTime leaveTime) {
    
    
    
    
    this.leaveTime = leaveTime;
    return this;
  }

   /**
   * Participant leave time.
   * @return leaveTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-03-23T07:02:28Z", value = "Participant leave time.")

  public OffsetDateTime getLeaveTime() {
    return leaveTime;
  }


  public void setLeaveTime(OffsetDateTime leaveTime) {
    
    
    
    this.leaveTime = leaveTime;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Participant display name.  This returns an empty string value if the account calling the API is a BAA account.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example", value = "Participant display name.  This returns an empty string value if the account calling the API is a BAA account.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner registrantId(String registrantId) {
    
    
    
    
    this.registrantId = registrantId;
    return this;
  }

   /**
   * Unique identifier of the registrant. This field is only returned if you entered &amp;quot;registrant_id&amp;quot; as the value of &#x60;include_fields&#x60; query parameter.
   * @return registrantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "abcdefghij0-klmnopq23456", value = "Unique identifier of the registrant. This field is only returned if you entered &quot;registrant_id&quot; as the value of `include_fields` query parameter.")

  public String getRegistrantId() {
    return registrantId;
  }


  public void setRegistrantId(String registrantId) {
    
    
    
    this.registrantId = registrantId;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The participant&#39;s status.  * &#x60;in_meeting&#x60; - In a meeting.  * &#x60;in_waiting_room&#x60; - In a waiting room.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "IN_MEETING", value = "The participant's status.  * `in_meeting` - In a meeting.  * `in_waiting_room` - In a waiting room.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner userEmail(String userEmail) {
    
    
    
    
    this.userEmail = userEmail;
    return this;
  }

   /**
   * Participant email.  If the participant is **not** part of the host&#39;s account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us) for details. This returns an empty string value if the account calling the API is a BAA account.
   * @return userEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jchill@example.com", value = "Participant email.  If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us) for details. This returns an empty string value if the account calling the API is a BAA account.")

  public String getUserEmail() {
    return userEmail;
  }


  public void setUserEmail(String userEmail) {
    
    
    
    this.userEmail = userEmail;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner userId(String userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "27423744", value = "Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    
    
    
    this.userId = userId;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner boMtgId(String boMtgId) {
    
    
    
    
    this.boMtgId = boMtgId;
    return this;
  }

   /**
   * The [breakout room](https://support.zoom.us/hc/en-us/articles/206476313-Managing-breakout-rooms) ID. Each breakout room is assigned a unique ID.
   * @return boMtgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "27423744", value = "The [breakout room](https://support.zoom.us/hc/en-us/articles/206476313-Managing-breakout-rooms) ID. Each breakout room is assigned a unique ID.")

  public String getBoMtgId() {
    return boMtgId;
  }


  public void setBoMtgId(String boMtgId) {
    
    
    
    this.boMtgId = boMtgId;
  }


  public ReportsGetMeetingParticipantReportsResponseParticipantsInner participantUserId(String participantUserId) {
    
    
    
    
    this.participantUserId = participantUserId;
    return this;
  }

   /**
   * The participant&#39;s universally unique ID (UUID).  * If the participant joins the meeting by logging into Zoom, this value is the &#x60;id&#x60; value in the [**Get a user**](https://developers.zoom.us) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.
   * @return participantUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DYHrdpjrS3uaOf7dPkkg8w", value = "The participant's universally unique ID (UUID).  * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](https://developers.zoom.us) API response.  * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.")

  public String getParticipantUserId() {
    return participantUserId;
  }


  public void setParticipantUserId(String participantUserId) {
    
    
    
    this.participantUserId = participantUserId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportsGetMeetingParticipantReportsResponseParticipantsInner instance itself
   */
  public ReportsGetMeetingParticipantReportsResponseParticipantsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsGetMeetingParticipantReportsResponseParticipantsInner reportsGetMeetingParticipantReportsResponseParticipantsInner = (ReportsGetMeetingParticipantReportsResponseParticipantsInner) o;
    return Objects.equals(this.customerKey, reportsGetMeetingParticipantReportsResponseParticipantsInner.customerKey) &&
        Objects.equals(this.duration, reportsGetMeetingParticipantReportsResponseParticipantsInner.duration) &&
        Objects.equals(this.failover, reportsGetMeetingParticipantReportsResponseParticipantsInner.failover) &&
        Objects.equals(this.id, reportsGetMeetingParticipantReportsResponseParticipantsInner.id) &&
        Objects.equals(this.joinTime, reportsGetMeetingParticipantReportsResponseParticipantsInner.joinTime) &&
        Objects.equals(this.leaveTime, reportsGetMeetingParticipantReportsResponseParticipantsInner.leaveTime) &&
        Objects.equals(this.name, reportsGetMeetingParticipantReportsResponseParticipantsInner.name) &&
        Objects.equals(this.registrantId, reportsGetMeetingParticipantReportsResponseParticipantsInner.registrantId) &&
        Objects.equals(this.status, reportsGetMeetingParticipantReportsResponseParticipantsInner.status) &&
        Objects.equals(this.userEmail, reportsGetMeetingParticipantReportsResponseParticipantsInner.userEmail) &&
        Objects.equals(this.userId, reportsGetMeetingParticipantReportsResponseParticipantsInner.userId) &&
        Objects.equals(this.boMtgId, reportsGetMeetingParticipantReportsResponseParticipantsInner.boMtgId) &&
        Objects.equals(this.participantUserId, reportsGetMeetingParticipantReportsResponseParticipantsInner.participantUserId)&&
        Objects.equals(this.additionalProperties, reportsGetMeetingParticipantReportsResponseParticipantsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerKey, duration, failover, id, joinTime, leaveTime, name, registrantId, status, userEmail, userId, boMtgId, participantUserId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsGetMeetingParticipantReportsResponseParticipantsInner {\n");
    sb.append("    customerKey: ").append(toIndentedString(customerKey)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    failover: ").append(toIndentedString(failover)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    joinTime: ").append(toIndentedString(joinTime)).append("\n");
    sb.append("    leaveTime: ").append(toIndentedString(leaveTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    registrantId: ").append(toIndentedString(registrantId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    boMtgId: ").append(toIndentedString(boMtgId)).append("\n");
    sb.append("    participantUserId: ").append(toIndentedString(participantUserId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customer_key");
    openapiFields.add("duration");
    openapiFields.add("failover");
    openapiFields.add("id");
    openapiFields.add("join_time");
    openapiFields.add("leave_time");
    openapiFields.add("name");
    openapiFields.add("registrant_id");
    openapiFields.add("status");
    openapiFields.add("user_email");
    openapiFields.add("user_id");
    openapiFields.add("bo_mtg_id");
    openapiFields.add("participant_user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportsGetMeetingParticipantReportsResponseParticipantsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportsGetMeetingParticipantReportsResponseParticipantsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsGetMeetingParticipantReportsResponseParticipantsInner is not found in the empty JSON string", ReportsGetMeetingParticipantReportsResponseParticipantsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("customer_key") != null && !jsonObj.get("customer_key").isJsonNull()) && !jsonObj.get("customer_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_key").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("registrant_id") != null && !jsonObj.get("registrant_id").isJsonNull()) && !jsonObj.get("registrant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrant_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("user_email") != null && !jsonObj.get("user_email").isJsonNull()) && !jsonObj.get("user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_email").toString()));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      if ((jsonObj.get("bo_mtg_id") != null && !jsonObj.get("bo_mtg_id").isJsonNull()) && !jsonObj.get("bo_mtg_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bo_mtg_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bo_mtg_id").toString()));
      }
      if ((jsonObj.get("participant_user_id") != null && !jsonObj.get("participant_user_id").isJsonNull()) && !jsonObj.get("participant_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participant_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participant_user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsGetMeetingParticipantReportsResponseParticipantsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsGetMeetingParticipantReportsResponseParticipantsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsGetMeetingParticipantReportsResponseParticipantsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsGetMeetingParticipantReportsResponseParticipantsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsGetMeetingParticipantReportsResponseParticipantsInner>() {
           @Override
           public void write(JsonWriter out, ReportsGetMeetingParticipantReportsResponseParticipantsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsGetMeetingParticipantReportsResponseParticipantsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportsGetMeetingParticipantReportsResponseParticipantsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportsGetMeetingParticipantReportsResponseParticipantsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportsGetMeetingParticipantReportsResponseParticipantsInner
  * @throws IOException if the JSON string is invalid with respect to ReportsGetMeetingParticipantReportsResponseParticipantsInner
  */
  public static ReportsGetMeetingParticipantReportsResponseParticipantsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsGetMeetingParticipantReportsResponseParticipantsInner.class);
  }

 /**
  * Convert an instance of ReportsGetMeetingParticipantReportsResponseParticipantsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

