/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.MeetingsAddRegistrantResponseOccurrencesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MeetingsAddRegistrantResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MeetingsAddRegistrantResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_JOIN_URL = "join_url";
  @SerializedName(SERIALIZED_NAME_JOIN_URL)
  private String joinUrl;

  public static final String SERIALIZED_NAME_REGISTRANT_ID = "registrant_id";
  @SerializedName(SERIALIZED_NAME_REGISTRANT_ID)
  private String registrantId;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_OCCURRENCES = "occurrences";
  @SerializedName(SERIALIZED_NAME_OCCURRENCES)
  private List<MeetingsAddRegistrantResponseOccurrencesInner> occurrences = null;

  public static final String SERIALIZED_NAME_PARTICIPANT_PIN_CODE = "participant_pin_code";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_PIN_CODE)
  private Long participantPinCode;

  public MeetingsAddRegistrantResponse() {
  }

  public MeetingsAddRegistrantResponse id(Long id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The meeting ID.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "85746065", value = "The meeting ID.")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    
    
    
    this.id = id;
  }


  public MeetingsAddRegistrantResponse joinUrl(String joinUrl) {
    
    
    
    
    this.joinUrl = joinUrl;
    return this;
  }

   /**
   * The URL the registrant can use to join the meeting.   The API will not return this field if the meeting was [created](https://developers.zoom.us) with the &#x60;approval_type&#x60; field value of &#x60;1&#x60; (manual approval).
   * @return joinUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/j/11111", value = "The URL the registrant can use to join the meeting.   The API will not return this field if the meeting was [created](https://developers.zoom.us) with the `approval_type` field value of `1` (manual approval).")

  public String getJoinUrl() {
    return joinUrl;
  }


  public void setJoinUrl(String joinUrl) {
    
    
    
    this.joinUrl = joinUrl;
  }


  public MeetingsAddRegistrantResponse registrantId(String registrantId) {
    
    
    
    
    this.registrantId = registrantId;
    return this;
  }

   /**
   * The registrant&#39;s ID.
   * @return registrantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "fdgsfh2ey82fuh", value = "The registrant's ID.")

  public String getRegistrantId() {
    return registrantId;
  }


  public void setRegistrantId(String registrantId) {
    
    
    
    this.registrantId = registrantId;
  }


  public MeetingsAddRegistrantResponse startTime(OffsetDateTime startTime) {
    
    
    
    
    this.startTime = startTime;
    return this;
  }

   /**
   * The meeting&#39;s start time.
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-13T21:44:51Z", value = "The meeting's start time.")

  public OffsetDateTime getStartTime() {
    return startTime;
  }


  public void setStartTime(OffsetDateTime startTime) {
    
    
    
    this.startTime = startTime;
  }


  public MeetingsAddRegistrantResponse topic(String topic) {
    
    
    
    
    this.topic = topic;
    return this;
  }

   /**
   * The meeting&#39;s topic.
   * @return topic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My Meeting", value = "The meeting's topic.")

  public String getTopic() {
    return topic;
  }


  public void setTopic(String topic) {
    
    
    
    this.topic = topic;
  }


  public MeetingsAddRegistrantResponse occurrences(List<MeetingsAddRegistrantResponseOccurrencesInner> occurrences) {
    
    
    
    
    this.occurrences = occurrences;
    return this;
  }

  public MeetingsAddRegistrantResponse addOccurrencesItem(MeetingsAddRegistrantResponseOccurrencesInner occurrencesItem) {
    if (this.occurrences == null) {
      this.occurrences = new ArrayList<>();
    }
    this.occurrences.add(occurrencesItem);
    return this;
  }

   /**
   * Array of occurrence objects.
   * @return occurrences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of occurrence objects.")

  public List<MeetingsAddRegistrantResponseOccurrencesInner> getOccurrences() {
    return occurrences;
  }


  public void setOccurrences(List<MeetingsAddRegistrantResponseOccurrencesInner> occurrences) {
    
    
    
    this.occurrences = occurrences;
  }


  public MeetingsAddRegistrantResponse participantPinCode(Long participantPinCode) {
    
    
    
    
    this.participantPinCode = participantPinCode;
    return this;
  }

   /**
   * The participant PIN code is used to authenticate audio participants before they join the meeting.
   * @return participantPinCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "380303", value = "The participant PIN code is used to authenticate audio participants before they join the meeting.")

  public Long getParticipantPinCode() {
    return participantPinCode;
  }


  public void setParticipantPinCode(Long participantPinCode) {
    
    
    
    this.participantPinCode = participantPinCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MeetingsAddRegistrantResponse instance itself
   */
  public MeetingsAddRegistrantResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingsAddRegistrantResponse meetingsAddRegistrantResponse = (MeetingsAddRegistrantResponse) o;
    return Objects.equals(this.id, meetingsAddRegistrantResponse.id) &&
        Objects.equals(this.joinUrl, meetingsAddRegistrantResponse.joinUrl) &&
        Objects.equals(this.registrantId, meetingsAddRegistrantResponse.registrantId) &&
        Objects.equals(this.startTime, meetingsAddRegistrantResponse.startTime) &&
        Objects.equals(this.topic, meetingsAddRegistrantResponse.topic) &&
        Objects.equals(this.occurrences, meetingsAddRegistrantResponse.occurrences) &&
        Objects.equals(this.participantPinCode, meetingsAddRegistrantResponse.participantPinCode)&&
        Objects.equals(this.additionalProperties, meetingsAddRegistrantResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, joinUrl, registrantId, startTime, topic, occurrences, participantPinCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingsAddRegistrantResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    joinUrl: ").append(toIndentedString(joinUrl)).append("\n");
    sb.append("    registrantId: ").append(toIndentedString(registrantId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    occurrences: ").append(toIndentedString(occurrences)).append("\n");
    sb.append("    participantPinCode: ").append(toIndentedString(participantPinCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("join_url");
    openapiFields.add("registrant_id");
    openapiFields.add("start_time");
    openapiFields.add("topic");
    openapiFields.add("occurrences");
    openapiFields.add("participant_pin_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MeetingsAddRegistrantResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MeetingsAddRegistrantResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingsAddRegistrantResponse is not found in the empty JSON string", MeetingsAddRegistrantResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("join_url") != null && !jsonObj.get("join_url").isJsonNull()) && !jsonObj.get("join_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `join_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("join_url").toString()));
      }
      if ((jsonObj.get("registrant_id") != null && !jsonObj.get("registrant_id").isJsonNull()) && !jsonObj.get("registrant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrant_id").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if (jsonObj.get("occurrences") != null && !jsonObj.get("occurrences").isJsonNull()) {
        JsonArray jsonArrayoccurrences = jsonObj.getAsJsonArray("occurrences");
        if (jsonArrayoccurrences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("occurrences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `occurrences` to be an array in the JSON string but got `%s`", jsonObj.get("occurrences").toString()));
          }

          // validate the optional field `occurrences` (array)
          for (int i = 0; i < jsonArrayoccurrences.size(); i++) {
            MeetingsAddRegistrantResponseOccurrencesInner.validateJsonObject(jsonArrayoccurrences.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingsAddRegistrantResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingsAddRegistrantResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingsAddRegistrantResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingsAddRegistrantResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingsAddRegistrantResponse>() {
           @Override
           public void write(JsonWriter out, MeetingsAddRegistrantResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingsAddRegistrantResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MeetingsAddRegistrantResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MeetingsAddRegistrantResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MeetingsAddRegistrantResponse
  * @throws IOException if the JSON string is invalid with respect to MeetingsAddRegistrantResponse
  */
  public static MeetingsAddRegistrantResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingsAddRegistrantResponse.class);
  }

 /**
  * Convert an instance of MeetingsAddRegistrantResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

