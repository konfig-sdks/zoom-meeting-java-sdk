/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.MeetingsGetRegistrantDetailsResponseCustomQuestionsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 *  Registrant.
 */
@ApiModel(description = " Registrant.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MeetingsGetRegistrantDetailsResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CUSTOM_QUESTIONS = "custom_questions";
  @SerializedName(SERIALIZED_NAME_CUSTOM_QUESTIONS)
  private List<MeetingsGetRegistrantDetailsResponseCustomQuestionsInner> customQuestions = null;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private String industry;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  /**
   * The registrant&#39;s number of employees.  * &#x60;1-20&#x60;  * &#x60;21-50&#x60;  * &#x60;51-100&#x60;  * &#x60;101-250&#x60;  * &#x60;251-500&#x60;  * &#x60;501-1,000&#x60;  * &#x60;1,001-5,000&#x60;  * &#x60;5,001-10,000&#x60;  * &#x60;More than 10,000&#x60;
   */
  @JsonAdapter(NoOfEmployeesEnum.Adapter.class)
 public enum NoOfEmployeesEnum {
    EMPTY(""),
    
    _1_20("1-20"),
    
    _21_50("21-50"),
    
    _51_100("51-100"),
    
    _101_250("101-250"),
    
    _251_500("251-500"),
    
    _501_1_000("501-1,000"),
    
    _1_001_5_000("1,001-5,000"),
    
    _5_001_10_000("5,001-10,000"),
    
    MORE_THAN_10_000("More than 10,000");

    private String value;

    NoOfEmployeesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NoOfEmployeesEnum fromValue(String value) {
      for (NoOfEmployeesEnum b : NoOfEmployeesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NoOfEmployeesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NoOfEmployeesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NoOfEmployeesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NoOfEmployeesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NO_OF_EMPLOYEES = "no_of_employees";
  @SerializedName(SERIALIZED_NAME_NO_OF_EMPLOYEES)
  private NoOfEmployeesEnum noOfEmployees;

  public static final String SERIALIZED_NAME_ORG = "org";
  @SerializedName(SERIALIZED_NAME_ORG)
  private String org;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  /**
   * The registrant&#39;s purchasing time frame.  * &#x60;Within a month&#x60;  * &#x60;1-3 months&#x60;  * &#x60;4-6 months&#x60;  * &#x60;More than 6 months&#x60;  * &#x60;No timeframe&#x60;
   */
  @JsonAdapter(PurchasingTimeFrameEnum.Adapter.class)
 public enum PurchasingTimeFrameEnum {
    EMPTY(""),
    
    WITHIN_A_MONTH("Within a month"),
    
    _1_3_MONTHS("1-3 months"),
    
    _4_6_MONTHS("4-6 months"),
    
    MORE_THAN_6_MONTHS("More than 6 months"),
    
    NO_TIMEFRAME("No timeframe");

    private String value;

    PurchasingTimeFrameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PurchasingTimeFrameEnum fromValue(String value) {
      for (PurchasingTimeFrameEnum b : PurchasingTimeFrameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PurchasingTimeFrameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PurchasingTimeFrameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PurchasingTimeFrameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PurchasingTimeFrameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PURCHASING_TIME_FRAME = "purchasing_time_frame";
  @SerializedName(SERIALIZED_NAME_PURCHASING_TIME_FRAME)
  private PurchasingTimeFrameEnum purchasingTimeFrame;

  /**
   * The registrant&#39;s role in the purchase process.  * &#x60;Decision Maker&#x60;  * &#x60;Evaluator/Recommender&#x60;  * &#x60;Influencer&#x60;  * &#x60;Not involved&#x60;
   */
  @JsonAdapter(RoleInPurchaseProcessEnum.Adapter.class)
 public enum RoleInPurchaseProcessEnum {
    EMPTY(""),
    
    DECISION_MAKER("Decision Maker"),
    
    EVALUATOR_RECOMMENDER("Evaluator/Recommender"),
    
    INFLUENCER("Influencer"),
    
    NOT_INVOLVED("Not involved");

    private String value;

    RoleInPurchaseProcessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleInPurchaseProcessEnum fromValue(String value) {
      for (RoleInPurchaseProcessEnum b : RoleInPurchaseProcessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleInPurchaseProcessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleInPurchaseProcessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleInPurchaseProcessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleInPurchaseProcessEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROLE_IN_PURCHASE_PROCESS = "role_in_purchase_process";
  @SerializedName(SERIALIZED_NAME_ROLE_IN_PURCHASE_PROCESS)
  private RoleInPurchaseProcessEnum roleInPurchaseProcess;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  /**
   * The registrant&#39;s registration status. * &#x60;approved&#x60; - The registrant is approved to join the meeting.  * &#x60;pending&#x60; - The registrant&#39;s registration is pending. * &#x60;denied&#x60; - The registrant was declined to join the meeting.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    APPROVED("approved"),
    
    DENIED("denied"),
    
    PENDING("pending");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_CREATE_TIME = "create_time";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_JOIN_URL = "join_url";
  @SerializedName(SERIALIZED_NAME_JOIN_URL)
  private String joinUrl;

  public static final String SERIALIZED_NAME_PARTICIPANT_PIN_CODE = "participant_pin_code";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_PIN_CODE)
  private Long participantPinCode;

  public MeetingsGetRegistrantDetailsResponse() {
  }

  public MeetingsGetRegistrantDetailsResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9tboDiHUQAeOnbmudzWa5g", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public MeetingsGetRegistrantDetailsResponse address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * The registrant&#39;s address.
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1800 Amphibious Blvd.", value = "The registrant's address.")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public MeetingsGetRegistrantDetailsResponse city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * The registrant&#39;s city.
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mountain View", value = "The registrant's city.")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public MeetingsGetRegistrantDetailsResponse comments(String comments) {
    
    
    
    
    this.comments = comments;
    return this;
  }

   /**
   * The registrant&#39;s questions and comments.
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Looking forward to the discussion.", value = "The registrant's questions and comments.")

  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    
    
    
    this.comments = comments;
  }


  public MeetingsGetRegistrantDetailsResponse country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * The registrant&#39;s two-letter [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "The registrant's two-letter [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public MeetingsGetRegistrantDetailsResponse customQuestions(List<MeetingsGetRegistrantDetailsResponseCustomQuestionsInner> customQuestions) {
    
    
    
    
    this.customQuestions = customQuestions;
    return this;
  }

  public MeetingsGetRegistrantDetailsResponse addCustomQuestionsItem(MeetingsGetRegistrantDetailsResponseCustomQuestionsInner customQuestionsItem) {
    if (this.customQuestions == null) {
      this.customQuestions = new ArrayList<>();
    }
    this.customQuestions.add(customQuestionsItem);
    return this;
  }

   /**
   * Information about custom questions.
   * @return customQuestions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information about custom questions.")

  public List<MeetingsGetRegistrantDetailsResponseCustomQuestionsInner> getCustomQuestions() {
    return customQuestions;
  }


  public void setCustomQuestions(List<MeetingsGetRegistrantDetailsResponseCustomQuestionsInner> customQuestions) {
    
    
    
    this.customQuestions = customQuestions;
  }


  public MeetingsGetRegistrantDetailsResponse email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * The registrant&#39;s email address. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "jchill@example.com", required = true, value = "The registrant's email address. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public MeetingsGetRegistrantDetailsResponse firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * The registrant&#39;s first name.
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Jill", required = true, value = "The registrant's first name.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public MeetingsGetRegistrantDetailsResponse industry(String industry) {
    
    
    
    
    this.industry = industry;
    return this;
  }

   /**
   * The registrant&#39;s industry.
   * @return industry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Food", value = "The registrant's industry.")

  public String getIndustry() {
    return industry;
  }


  public void setIndustry(String industry) {
    
    
    
    this.industry = industry;
  }


  public MeetingsGetRegistrantDetailsResponse jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * The registrant&#39;s job title.
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Chef", value = "The registrant's job title.")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public MeetingsGetRegistrantDetailsResponse lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * The registrant&#39;s last name.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Chill", value = "The registrant's last name.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public MeetingsGetRegistrantDetailsResponse noOfEmployees(NoOfEmployeesEnum noOfEmployees) {
    
    
    
    
    this.noOfEmployees = noOfEmployees;
    return this;
  }

   /**
   * The registrant&#39;s number of employees.  * &#x60;1-20&#x60;  * &#x60;21-50&#x60;  * &#x60;51-100&#x60;  * &#x60;101-250&#x60;  * &#x60;251-500&#x60;  * &#x60;501-1,000&#x60;  * &#x60;1,001-5,000&#x60;  * &#x60;5,001-10,000&#x60;  * &#x60;More than 10,000&#x60;
   * @return noOfEmployees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_1_20", value = "The registrant's number of employees.  * `1-20`  * `21-50`  * `51-100`  * `101-250`  * `251-500`  * `501-1,000`  * `1,001-5,000`  * `5,001-10,000`  * `More than 10,000`")

  public NoOfEmployeesEnum getNoOfEmployees() {
    return noOfEmployees;
  }


  public void setNoOfEmployees(NoOfEmployeesEnum noOfEmployees) {
    
    
    
    this.noOfEmployees = noOfEmployees;
  }


  public MeetingsGetRegistrantDetailsResponse org(String org) {
    
    
    
    
    this.org = org;
    return this;
  }

   /**
   * The registrant&#39;s organization.
   * @return org
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Cooking Org", value = "The registrant's organization.")

  public String getOrg() {
    return org;
  }


  public void setOrg(String org) {
    
    
    
    this.org = org;
  }


  public MeetingsGetRegistrantDetailsResponse phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * The registrant&#39;s phone number.
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5550100", value = "The registrant's phone number.")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public MeetingsGetRegistrantDetailsResponse purchasingTimeFrame(PurchasingTimeFrameEnum purchasingTimeFrame) {
    
    
    
    
    this.purchasingTimeFrame = purchasingTimeFrame;
    return this;
  }

   /**
   * The registrant&#39;s purchasing time frame.  * &#x60;Within a month&#x60;  * &#x60;1-3 months&#x60;  * &#x60;4-6 months&#x60;  * &#x60;More than 6 months&#x60;  * &#x60;No timeframe&#x60;
   * @return purchasingTimeFrame
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_1_3_MONTHS", value = "The registrant's purchasing time frame.  * `Within a month`  * `1-3 months`  * `4-6 months`  * `More than 6 months`  * `No timeframe`")

  public PurchasingTimeFrameEnum getPurchasingTimeFrame() {
    return purchasingTimeFrame;
  }


  public void setPurchasingTimeFrame(PurchasingTimeFrameEnum purchasingTimeFrame) {
    
    
    
    this.purchasingTimeFrame = purchasingTimeFrame;
  }


  public MeetingsGetRegistrantDetailsResponse roleInPurchaseProcess(RoleInPurchaseProcessEnum roleInPurchaseProcess) {
    
    
    
    
    this.roleInPurchaseProcess = roleInPurchaseProcess;
    return this;
  }

   /**
   * The registrant&#39;s role in the purchase process.  * &#x60;Decision Maker&#x60;  * &#x60;Evaluator/Recommender&#x60;  * &#x60;Influencer&#x60;  * &#x60;Not involved&#x60;
   * @return roleInPurchaseProcess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INFLUENCER", value = "The registrant's role in the purchase process.  * `Decision Maker`  * `Evaluator/Recommender`  * `Influencer`  * `Not involved`")

  public RoleInPurchaseProcessEnum getRoleInPurchaseProcess() {
    return roleInPurchaseProcess;
  }


  public void setRoleInPurchaseProcess(RoleInPurchaseProcessEnum roleInPurchaseProcess) {
    
    
    
    this.roleInPurchaseProcess = roleInPurchaseProcess;
  }


  public MeetingsGetRegistrantDetailsResponse state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * The registrant&#39;s state or province.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CA", value = "The registrant's state or province.")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public MeetingsGetRegistrantDetailsResponse status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The registrant&#39;s registration status. * &#x60;approved&#x60; - The registrant is approved to join the meeting.  * &#x60;pending&#x60; - The registrant&#39;s registration is pending. * &#x60;denied&#x60; - The registrant was declined to join the meeting.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "APPROVED", value = "The registrant's registration status. * `approved` - The registrant is approved to join the meeting.  * `pending` - The registrant's registration is pending. * `denied` - The registrant was declined to join the meeting.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public MeetingsGetRegistrantDetailsResponse zip(String zip) {
    
    
    
    
    this.zip = zip;
    return this;
  }

   /**
   * The registrant&#39;s ZIP or postal code.
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "94045", value = "The registrant's ZIP or postal code.")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    
    this.zip = zip;
  }


  public MeetingsGetRegistrantDetailsResponse createTime(OffsetDateTime createTime) {
    
    
    
    
    this.createTime = createTime;
    return this;
  }

   /**
   * The registrant&#39;s registration date and time.
   * @return createTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-03-22T05:58:44Z", value = "The registrant's registration date and time.")

  public OffsetDateTime getCreateTime() {
    return createTime;
  }


  public void setCreateTime(OffsetDateTime createTime) {
    
    
    
    this.createTime = createTime;
  }


  public MeetingsGetRegistrantDetailsResponse joinUrl(String joinUrl) {
    
    
    
    
    this.joinUrl = joinUrl;
    return this;
  }

   /**
   * The URL with which the approved registrant can join the meeting.
   * @return joinUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/j/11111", value = "The URL with which the approved registrant can join the meeting.")

  public String getJoinUrl() {
    return joinUrl;
  }


  public void setJoinUrl(String joinUrl) {
    
    
    
    this.joinUrl = joinUrl;
  }


  public MeetingsGetRegistrantDetailsResponse participantPinCode(Long participantPinCode) {
    
    
    
    
    this.participantPinCode = participantPinCode;
    return this;
  }

   /**
   * The participant PIN code is used to authenticate audio participants before they join the meeting.
   * @return participantPinCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "380303", value = "The participant PIN code is used to authenticate audio participants before they join the meeting.")

  public Long getParticipantPinCode() {
    return participantPinCode;
  }


  public void setParticipantPinCode(Long participantPinCode) {
    
    
    
    this.participantPinCode = participantPinCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MeetingsGetRegistrantDetailsResponse instance itself
   */
  public MeetingsGetRegistrantDetailsResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingsGetRegistrantDetailsResponse meetingsGetRegistrantDetailsResponse = (MeetingsGetRegistrantDetailsResponse) o;
    return Objects.equals(this.id, meetingsGetRegistrantDetailsResponse.id) &&
        Objects.equals(this.address, meetingsGetRegistrantDetailsResponse.address) &&
        Objects.equals(this.city, meetingsGetRegistrantDetailsResponse.city) &&
        Objects.equals(this.comments, meetingsGetRegistrantDetailsResponse.comments) &&
        Objects.equals(this.country, meetingsGetRegistrantDetailsResponse.country) &&
        Objects.equals(this.customQuestions, meetingsGetRegistrantDetailsResponse.customQuestions) &&
        Objects.equals(this.email, meetingsGetRegistrantDetailsResponse.email) &&
        Objects.equals(this.firstName, meetingsGetRegistrantDetailsResponse.firstName) &&
        Objects.equals(this.industry, meetingsGetRegistrantDetailsResponse.industry) &&
        Objects.equals(this.jobTitle, meetingsGetRegistrantDetailsResponse.jobTitle) &&
        Objects.equals(this.lastName, meetingsGetRegistrantDetailsResponse.lastName) &&
        Objects.equals(this.noOfEmployees, meetingsGetRegistrantDetailsResponse.noOfEmployees) &&
        Objects.equals(this.org, meetingsGetRegistrantDetailsResponse.org) &&
        Objects.equals(this.phone, meetingsGetRegistrantDetailsResponse.phone) &&
        Objects.equals(this.purchasingTimeFrame, meetingsGetRegistrantDetailsResponse.purchasingTimeFrame) &&
        Objects.equals(this.roleInPurchaseProcess, meetingsGetRegistrantDetailsResponse.roleInPurchaseProcess) &&
        Objects.equals(this.state, meetingsGetRegistrantDetailsResponse.state) &&
        Objects.equals(this.status, meetingsGetRegistrantDetailsResponse.status) &&
        Objects.equals(this.zip, meetingsGetRegistrantDetailsResponse.zip) &&
        Objects.equals(this.createTime, meetingsGetRegistrantDetailsResponse.createTime) &&
        Objects.equals(this.joinUrl, meetingsGetRegistrantDetailsResponse.joinUrl) &&
        Objects.equals(this.participantPinCode, meetingsGetRegistrantDetailsResponse.participantPinCode)&&
        Objects.equals(this.additionalProperties, meetingsGetRegistrantDetailsResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, address, city, comments, country, customQuestions, email, firstName, industry, jobTitle, lastName, noOfEmployees, org, phone, purchasingTimeFrame, roleInPurchaseProcess, state, status, zip, createTime, joinUrl, participantPinCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingsGetRegistrantDetailsResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    customQuestions: ").append(toIndentedString(customQuestions)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    noOfEmployees: ").append(toIndentedString(noOfEmployees)).append("\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    purchasingTimeFrame: ").append(toIndentedString(purchasingTimeFrame)).append("\n");
    sb.append("    roleInPurchaseProcess: ").append(toIndentedString(roleInPurchaseProcess)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    joinUrl: ").append(toIndentedString(joinUrl)).append("\n");
    sb.append("    participantPinCode: ").append(toIndentedString(participantPinCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("address");
    openapiFields.add("city");
    openapiFields.add("comments");
    openapiFields.add("country");
    openapiFields.add("custom_questions");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("industry");
    openapiFields.add("job_title");
    openapiFields.add("last_name");
    openapiFields.add("no_of_employees");
    openapiFields.add("org");
    openapiFields.add("phone");
    openapiFields.add("purchasing_time_frame");
    openapiFields.add("role_in_purchase_process");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("zip");
    openapiFields.add("create_time");
    openapiFields.add("join_url");
    openapiFields.add("participant_pin_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("first_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MeetingsGetRegistrantDetailsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MeetingsGetRegistrantDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingsGetRegistrantDetailsResponse is not found in the empty JSON string", MeetingsGetRegistrantDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MeetingsGetRegistrantDetailsResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (jsonObj.get("custom_questions") != null && !jsonObj.get("custom_questions").isJsonNull()) {
        JsonArray jsonArraycustomQuestions = jsonObj.getAsJsonArray("custom_questions");
        if (jsonArraycustomQuestions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_questions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_questions` to be an array in the JSON string but got `%s`", jsonObj.get("custom_questions").toString()));
          }

          // validate the optional field `custom_questions` (array)
          for (int i = 0; i < jsonArraycustomQuestions.size(); i++) {
            MeetingsGetRegistrantDetailsResponseCustomQuestionsInner.validateJsonObject(jsonArraycustomQuestions.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      if ((jsonObj.get("job_title") != null && !jsonObj.get("job_title").isJsonNull()) && !jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("no_of_employees") != null && !jsonObj.get("no_of_employees").isJsonNull()) && !jsonObj.get("no_of_employees").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `no_of_employees` to be a primitive type in the JSON string but got `%s`", jsonObj.get("no_of_employees").toString()));
      }
      if ((jsonObj.get("org") != null && !jsonObj.get("org").isJsonNull()) && !jsonObj.get("org").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("purchasing_time_frame") != null && !jsonObj.get("purchasing_time_frame").isJsonNull()) && !jsonObj.get("purchasing_time_frame").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchasing_time_frame` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchasing_time_frame").toString()));
      }
      if ((jsonObj.get("role_in_purchase_process") != null && !jsonObj.get("role_in_purchase_process").isJsonNull()) && !jsonObj.get("role_in_purchase_process").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_in_purchase_process` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role_in_purchase_process").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if ((jsonObj.get("join_url") != null && !jsonObj.get("join_url").isJsonNull()) && !jsonObj.get("join_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `join_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("join_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingsGetRegistrantDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingsGetRegistrantDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingsGetRegistrantDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingsGetRegistrantDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingsGetRegistrantDetailsResponse>() {
           @Override
           public void write(JsonWriter out, MeetingsGetRegistrantDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingsGetRegistrantDetailsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MeetingsGetRegistrantDetailsResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MeetingsGetRegistrantDetailsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MeetingsGetRegistrantDetailsResponse
  * @throws IOException if the JSON string is invalid with respect to MeetingsGetRegistrantDetailsResponse
  */
  public static MeetingsGetRegistrantDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingsGetRegistrantDetailsResponse.class);
  }

 /**
  * Convert an instance of MeetingsGetRegistrantDetailsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

