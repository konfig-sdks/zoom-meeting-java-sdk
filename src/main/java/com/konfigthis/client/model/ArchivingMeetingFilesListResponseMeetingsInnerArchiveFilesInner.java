/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner {
  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "download_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private String downloadUrl;

  public static final String SERIALIZED_NAME_FILE_EXTENSION = "file_extension";
  @SerializedName(SERIALIZED_NAME_FILE_EXTENSION)
  private String fileExtension;

  public static final String SERIALIZED_NAME_FILE_PATH = "file_path";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_FILE_SIZE = "file_size";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Integer fileSize;

  /**
   * The archive file&#39;s type.  * &#x60;MP4&#x60; - Video file.  * &#x60;M4A&#x60; - Audio-only file.  * &#x60;CHAT&#x60; - A TXT file containing in-meeting chat messages.  * &#x60;CC&#x60; - A file containing the closed captions of the recording, in VTT file format.  *  &#x60;CHAT_MESSAGE&#x60; - A JSON file encoded in base64 format containing chat messages. The file also includes waiting room chats, deleted messages, meeting emojis and non-verbal feedback.
   */
  @JsonAdapter(FileTypeEnum.Adapter.class)
 public enum FileTypeEnum {
    MP4("MP4"),
    
    M4A("M4A"),
    
    CHAT("CHAT"),
    
    CC("CC"),
    
    CHAT_MESSAGE("CHAT_MESSAGE");

    private String value;

    FileTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileTypeEnum fromValue(String value) {
      for (FileTypeEnum b : FileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FILE_TYPE = "file_type";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private FileTypeEnum fileType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INDIVIDUAL = "individual";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL)
  private Boolean individual;

  public static final String SERIALIZED_NAME_PARTICIPANT_EMAIL = "participant_email";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_EMAIL)
  private String participantEmail;

  public static final String SERIALIZED_NAME_PARTICIPANT_JOIN_TIME = "participant_join_time";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_JOIN_TIME)
  private OffsetDateTime participantJoinTime;

  public static final String SERIALIZED_NAME_PARTICIPANT_LEAVE_TIME = "participant_leave_time";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_LEAVE_TIME)
  private OffsetDateTime participantLeaveTime;

  /**
   * The archive file&#39;s recording type.  * &#x60;shared_screen_with_speaker_view&#x60;  * &#x60;audio_only&#x60;  * &#x60;chat_file&#x60;  * &#x60;closed_caption&#x60;  * &#x60;chat_message&#x60;    For more information, read our [Managing and sharing cloud recordings](https://support.zoom.us/hc/en-us/articles/205347605-Managing-and-sharing-cloud-recordings#h_9898497b-e736-4980-a749-d55608f10773) documentation.
   */
  @JsonAdapter(RecordingTypeEnum.Adapter.class)
 public enum RecordingTypeEnum {
    SHARED_SCREEN_WITH_SPEAKER_VIEW("shared_screen_with_speaker_view"),
    
    AUDIO_ONLY("audio_only"),
    
    CHAT_FILE("chat_file"),
    
    CLOSED_CAPTION("closed_caption"),
    
    CHAT_MESSAGE("chat_message");

    private String value;

    RecordingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecordingTypeEnum fromValue(String value) {
      for (RecordingTypeEnum b : RecordingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecordingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecordingTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RECORDING_TYPE = "recording_type";
  @SerializedName(SERIALIZED_NAME_RECORDING_TYPE)
  private RecordingTypeEnum recordingType;

  /**
   * The archived file&#39;s processing status.  * &#x60;completed&#x60; - The processing of the file is complete.  * &#x60;processing&#x60; - The file is processing.  * &#x60;failed&#x60; - The processing of the file failed.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    COMPLETED("completed"),
    
    PROCESSING("processing"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ENCRYPTION_FINGERPRINT = "encryption_fingerprint";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_FINGERPRINT)
  private String encryptionFingerprint;

  public static final String SERIALIZED_NAME_NUMBER_OF_MESSAGES = "number_of_messages";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_MESSAGES)
  private Integer numberOfMessages;

  /**
   * The region where the file is stored. This field returns only &#x60;Enable Distributed Compliance Archiving&#x60; op feature is enabled.
   */
  @JsonAdapter(StorageLocationEnum.Adapter.class)
 public enum StorageLocationEnum {
    US("US"),
    
    AU("AU"),
    
    BR("BR"),
    
    CA("CA"),
    
    EU("EU"),
    
    IN("IN"),
    
    JP("JP"),
    
    SG("SG"),
    
    CH("CH");

    private String value;

    StorageLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageLocationEnum fromValue(String value) {
      for (StorageLocationEnum b : StorageLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageLocationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_LOCATION = "storage_location";
  @SerializedName(SERIALIZED_NAME_STORAGE_LOCATION)
  private StorageLocationEnum storageLocation;

  public static final String SERIALIZED_NAME_AUTO_DELETE = "auto_delete";
  @SerializedName(SERIALIZED_NAME_AUTO_DELETE)
  private Boolean autoDelete;

  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner() {
  }

  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner downloadUrl(String downloadUrl) {
    
    
    
    
    this.downloadUrl = downloadUrl;
    return this;
  }

   /**
   * The URL to download the the archive file.    **OAuth apps**    If a user has authorized and installed your OAuth app that contains recording scopes, use the user&#39;s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) to download the file. For example, &#x60;https://{{base-domain}}/rec/archive/download/xxx--header &#39;Authorization: Bearer {{OAuth-access-token}}&#39;&#x60;    **Note:** This field does **not** return for [Zoom on-premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). Instead, this API will return the &#x60;file_path&#x60; field.
   * @return downloadUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://example.com/recording/download/Qg75t7xZBtEbAkjdlgbfdngBBBB", required = true, value = "The URL to download the the archive file.    **OAuth apps**    If a user has authorized and installed your OAuth app that contains recording scopes, use the user's [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) to download the file. For example, `https://{{base-domain}}/rec/archive/download/xxx--header 'Authorization: Bearer {{OAuth-access-token}}'`    **Note:** This field does **not** return for [Zoom on-premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). Instead, this API will return the `file_path` field.")

  public String getDownloadUrl() {
    return downloadUrl;
  }


  public void setDownloadUrl(String downloadUrl) {
    
    
    
    this.downloadUrl = downloadUrl;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner fileExtension(String fileExtension) {
    
    
    
    
    this.fileExtension = fileExtension;
    return this;
  }

   /**
   * The archived file&#39;s extension.
   * @return fileExtension
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "JSON", required = true, value = "The archived file's extension.")

  public String getFileExtension() {
    return fileExtension;
  }


  public void setFileExtension(String fileExtension) {
    
    
    
    this.fileExtension = fileExtension;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner filePath(String filePath) {
    
    
    
    
    this.filePath = filePath;
    return this;
  }

   /**
   * The file path to the on-premise account archive file.    **Note:** The API only returns this field for [Zoom on-premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the &#x60;download_url&#x60; field.
   * @return filePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/9090876528/path01/demo.mp4", value = "The file path to the on-premise account archive file.    **Note:** The API only returns this field for [Zoom on-premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the `download_url` field.")

  public String getFilePath() {
    return filePath;
  }


  public void setFilePath(String filePath) {
    
    
    
    this.filePath = filePath;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner fileSize(Integer fileSize) {
    
    
    
    
    this.fileSize = fileSize;
    return this;
  }

   /**
   * The archived file&#39;s size, in bytes.
   * @return fileSize
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "165743", required = true, value = "The archived file's size, in bytes.")

  public Integer getFileSize() {
    return fileSize;
  }


  public void setFileSize(Integer fileSize) {
    
    
    
    this.fileSize = fileSize;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner fileType(FileTypeEnum fileType) {
    
    
    
    
    this.fileType = fileType;
    return this;
  }

   /**
   * The archive file&#39;s type.  * &#x60;MP4&#x60; - Video file.  * &#x60;M4A&#x60; - Audio-only file.  * &#x60;CHAT&#x60; - A TXT file containing in-meeting chat messages.  * &#x60;CC&#x60; - A file containing the closed captions of the recording, in VTT file format.  *  &#x60;CHAT_MESSAGE&#x60; - A JSON file encoded in base64 format containing chat messages. The file also includes waiting room chats, deleted messages, meeting emojis and non-verbal feedback.
   * @return fileType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CHAT", required = true, value = "The archive file's type.  * `MP4` - Video file.  * `M4A` - Audio-only file.  * `CHAT` - A TXT file containing in-meeting chat messages.  * `CC` - A file containing the closed captions of the recording, in VTT file format.  *  `CHAT_MESSAGE` - A JSON file encoded in base64 format containing chat messages. The file also includes waiting room chats, deleted messages, meeting emojis and non-verbal feedback.")

  public FileTypeEnum getFileType() {
    return fileType;
  }


  public void setFileType(FileTypeEnum fileType) {
    
    
    
    this.fileType = fileType;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The archive file&#39;s unique ID.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "a2f19f96-9294-4f51-8134-6f0eea108eb2", required = true, value = "The archive file's unique ID.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner individual(Boolean individual) {
    
    
    
    
    this.individual = individual;
    return this;
  }

   /**
   * Whether the archive file is an individual recording file.  * &#x60;true&#x60; - An individual recording file.   * &#x60;false&#x60; - An entire meeting file.
   * @return individual
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the archive file is an individual recording file.  * `true` - An individual recording file.   * `false` - An entire meeting file.")

  public Boolean getIndividual() {
    return individual;
  }


  public void setIndividual(Boolean individual) {
    
    
    
    this.individual = individual;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner participantEmail(String participantEmail) {
    
    
    
    
    this.participantEmail = participantEmail;
    return this;
  }

   /**
   * The individual recording file&#39;s participant email address. This value is returned when the &#x60;individual&#x60; value is &#x60;true&#x60;. If the participant is **not** part of the host&#39;s account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.
   * @return participantEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jchill@example.com", value = "The individual recording file's participant email address. This value is returned when the `individual` value is `true`. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.")

  public String getParticipantEmail() {
    return participantEmail;
  }


  public void setParticipantEmail(String participantEmail) {
    
    
    
    this.participantEmail = participantEmail;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner participantJoinTime(OffsetDateTime participantJoinTime) {
    
    
    
    
    this.participantJoinTime = participantJoinTime;
    return this;
  }

   /**
   * The join time for the generated recording file. If this value is returned when the individual value is &#x60;true&#x60;, it is the recording file&#39;s participant join time. When the individual value is &#x60;false&#x60;, it returns the join time for the archiving gateway.
   * @return participantJoinTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-03-12T02:07:27Z", required = true, value = "The join time for the generated recording file. If this value is returned when the individual value is `true`, it is the recording file's participant join time. When the individual value is `false`, it returns the join time for the archiving gateway.")

  public OffsetDateTime getParticipantJoinTime() {
    return participantJoinTime;
  }


  public void setParticipantJoinTime(OffsetDateTime participantJoinTime) {
    
    
    
    this.participantJoinTime = participantJoinTime;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner participantLeaveTime(OffsetDateTime participantLeaveTime) {
    
    
    
    
    this.participantLeaveTime = participantLeaveTime;
    return this;
  }

   /**
   * The leave time for the generated recording file. If this value is returned when the individual value is &#x60;true&#x60;, it is the recording file&#39;s participant leave time. When the individual value is &#x60;false&#x60;, it returns the leave time for the archiving gateway.
   * @return participantLeaveTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-03-12T02:12:27Z", required = true, value = "The leave time for the generated recording file. If this value is returned when the individual value is `true`, it is the recording file's participant leave time. When the individual value is `false`, it returns the leave time for the archiving gateway.")

  public OffsetDateTime getParticipantLeaveTime() {
    return participantLeaveTime;
  }


  public void setParticipantLeaveTime(OffsetDateTime participantLeaveTime) {
    
    
    
    this.participantLeaveTime = participantLeaveTime;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner recordingType(RecordingTypeEnum recordingType) {
    
    
    
    
    this.recordingType = recordingType;
    return this;
  }

   /**
   * The archive file&#39;s recording type.  * &#x60;shared_screen_with_speaker_view&#x60;  * &#x60;audio_only&#x60;  * &#x60;chat_file&#x60;  * &#x60;closed_caption&#x60;  * &#x60;chat_message&#x60;    For more information, read our [Managing and sharing cloud recordings](https://support.zoom.us/hc/en-us/articles/205347605-Managing-and-sharing-cloud-recordings#h_9898497b-e736-4980-a749-d55608f10773) documentation.
   * @return recordingType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CHAT_MESSAGE", required = true, value = "The archive file's recording type.  * `shared_screen_with_speaker_view`  * `audio_only`  * `chat_file`  * `closed_caption`  * `chat_message`    For more information, read our [Managing and sharing cloud recordings](https://support.zoom.us/hc/en-us/articles/205347605-Managing-and-sharing-cloud-recordings#h_9898497b-e736-4980-a749-d55608f10773) documentation.")

  public RecordingTypeEnum getRecordingType() {
    return recordingType;
  }


  public void setRecordingType(RecordingTypeEnum recordingType) {
    
    
    
    this.recordingType = recordingType;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The archived file&#39;s processing status.  * &#x60;completed&#x60; - The processing of the file is complete.  * &#x60;processing&#x60; - The file is processing.  * &#x60;failed&#x60; - The processing of the file failed.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "COMPLETED", required = true, value = "The archived file's processing status.  * `completed` - The processing of the file is complete.  * `processing` - The file is processing.  * `failed` - The processing of the file failed.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner encryptionFingerprint(String encryptionFingerprint) {
    
    
    
    
    this.encryptionFingerprint = encryptionFingerprint;
    return this;
  }

   /**
   * The archived file&#39;s encryption fingerprint, using the SHA256 hash algorithm.
   * @return encryptionFingerprint
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "abf85f0fe6a4db3cdd8c37e505e1dd18a34d9696170a14b5bc6395677472cf43", required = true, value = "The archived file's encryption fingerprint, using the SHA256 hash algorithm.")

  public String getEncryptionFingerprint() {
    return encryptionFingerprint;
  }


  public void setEncryptionFingerprint(String encryptionFingerprint) {
    
    
    
    this.encryptionFingerprint = encryptionFingerprint;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner numberOfMessages(Integer numberOfMessages) {
    
    
    
    
    this.numberOfMessages = numberOfMessages;
    return this;
  }

   /**
   * The number of &#x60;TXT&#x60; or &#x60;JSON&#x60; file messages. This field returns only when the &#x60;file_extension&#x60; is &#x60;JSON&#x60; or &#x60;TXT&#x60;.
   * @return numberOfMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "150", value = "The number of `TXT` or `JSON` file messages. This field returns only when the `file_extension` is `JSON` or `TXT`.")

  public Integer getNumberOfMessages() {
    return numberOfMessages;
  }


  public void setNumberOfMessages(Integer numberOfMessages) {
    
    
    
    this.numberOfMessages = numberOfMessages;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner storageLocation(StorageLocationEnum storageLocation) {
    
    
    
    
    this.storageLocation = storageLocation;
    return this;
  }

   /**
   * The region where the file is stored. This field returns only &#x60;Enable Distributed Compliance Archiving&#x60; op feature is enabled.
   * @return storageLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "The region where the file is stored. This field returns only `Enable Distributed Compliance Archiving` op feature is enabled.")

  public StorageLocationEnum getStorageLocation() {
    return storageLocation;
  }


  public void setStorageLocation(StorageLocationEnum storageLocation) {
    
    
    
    this.storageLocation = storageLocation;
  }


  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner autoDelete(Boolean autoDelete) {
    
    
    
    
    this.autoDelete = autoDelete;
    return this;
  }

   /**
   * Whether to auto delete the archived file.  **Prerequisites:**   Enable the \&quot;Tag Archiving Files for Deletion\&quot; feature in OP. Contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) to open.
   * @return autoDelete
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to auto delete the archived file.  **Prerequisites:**   Enable the \"Tag Archiving Files for Deletion\" feature in OP. Contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) to open.")

  public Boolean getAutoDelete() {
    return autoDelete;
  }


  public void setAutoDelete(Boolean autoDelete) {
    
    
    
    this.autoDelete = autoDelete;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner instance itself
   */
  public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner = (ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner) o;
    return Objects.equals(this.downloadUrl, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.downloadUrl) &&
        Objects.equals(this.fileExtension, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.fileExtension) &&
        Objects.equals(this.filePath, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.filePath) &&
        Objects.equals(this.fileSize, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.fileSize) &&
        Objects.equals(this.fileType, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.fileType) &&
        Objects.equals(this.id, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.id) &&
        Objects.equals(this.individual, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.individual) &&
        Objects.equals(this.participantEmail, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.participantEmail) &&
        Objects.equals(this.participantJoinTime, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.participantJoinTime) &&
        Objects.equals(this.participantLeaveTime, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.participantLeaveTime) &&
        Objects.equals(this.recordingType, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.recordingType) &&
        Objects.equals(this.status, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.status) &&
        Objects.equals(this.encryptionFingerprint, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.encryptionFingerprint) &&
        Objects.equals(this.numberOfMessages, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.numberOfMessages) &&
        Objects.equals(this.storageLocation, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.storageLocation) &&
        Objects.equals(this.autoDelete, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.autoDelete)&&
        Objects.equals(this.additionalProperties, archivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downloadUrl, fileExtension, filePath, fileSize, fileType, id, individual, participantEmail, participantJoinTime, participantLeaveTime, recordingType, status, encryptionFingerprint, numberOfMessages, storageLocation, autoDelete, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner {\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    individual: ").append(toIndentedString(individual)).append("\n");
    sb.append("    participantEmail: ").append(toIndentedString(participantEmail)).append("\n");
    sb.append("    participantJoinTime: ").append(toIndentedString(participantJoinTime)).append("\n");
    sb.append("    participantLeaveTime: ").append(toIndentedString(participantLeaveTime)).append("\n");
    sb.append("    recordingType: ").append(toIndentedString(recordingType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    encryptionFingerprint: ").append(toIndentedString(encryptionFingerprint)).append("\n");
    sb.append("    numberOfMessages: ").append(toIndentedString(numberOfMessages)).append("\n");
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("    autoDelete: ").append(toIndentedString(autoDelete)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("download_url");
    openapiFields.add("file_extension");
    openapiFields.add("file_path");
    openapiFields.add("file_size");
    openapiFields.add("file_type");
    openapiFields.add("id");
    openapiFields.add("individual");
    openapiFields.add("participant_email");
    openapiFields.add("participant_join_time");
    openapiFields.add("participant_leave_time");
    openapiFields.add("recording_type");
    openapiFields.add("status");
    openapiFields.add("encryption_fingerprint");
    openapiFields.add("number_of_messages");
    openapiFields.add("storage_location");
    openapiFields.add("auto_delete");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("download_url");
    openapiRequiredFields.add("file_extension");
    openapiRequiredFields.add("file_size");
    openapiRequiredFields.add("file_type");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("individual");
    openapiRequiredFields.add("participant_join_time");
    openapiRequiredFields.add("participant_leave_time");
    openapiRequiredFields.add("recording_type");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("encryption_fingerprint");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner is not found in the empty JSON string", ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_url").toString()));
      }
      if (!jsonObj.get("file_extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_extension").toString()));
      }
      if ((jsonObj.get("file_path") != null && !jsonObj.get("file_path").isJsonNull()) && !jsonObj.get("file_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_path").toString()));
      }
      if (!jsonObj.get("file_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_type").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("participant_email") != null && !jsonObj.get("participant_email").isJsonNull()) && !jsonObj.get("participant_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participant_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participant_email").toString()));
      }
      if (!jsonObj.get("recording_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recording_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recording_type").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("encryption_fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryption_fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryption_fingerprint").toString()));
      }
      if ((jsonObj.get("storage_location") != null && !jsonObj.get("storage_location").isJsonNull()) && !jsonObj.get("storage_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage_location").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner>() {
           @Override
           public void write(JsonWriter out, ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner
  * @throws IOException if the JSON string is invalid with respect to ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner
  */
  public static ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner.class);
  }

 /**
  * Convert an instance of ArchivingMeetingFilesListResponseMeetingsInnerArchiveFilesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

