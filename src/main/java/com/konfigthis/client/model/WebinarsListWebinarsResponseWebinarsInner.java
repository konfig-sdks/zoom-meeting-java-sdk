/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WebinarsListWebinarsResponseWebinarsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WebinarsListWebinarsResponseWebinarsInner {
  public static final String SERIALIZED_NAME_AGENDA = "agenda";
  @SerializedName(SERIALIZED_NAME_AGENDA)
  private String agenda;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_HOST_ID = "host_id";
  @SerializedName(SERIALIZED_NAME_HOST_ID)
  private String hostId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_JOIN_URL = "join_url";
  @SerializedName(SERIALIZED_NAME_JOIN_URL)
  private String joinUrl;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  /**
   * The webinar type.  * &#x60;5&#x60; - A webinar.  * &#x60;6&#x60; - A recurring webinar without a fixed time.  * &#x60;9&#x60; - A recurring webinar with a fixed time.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_9(9);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.NUMBER_5;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_IS_SIMULIVE = "is_simulive";
  @SerializedName(SERIALIZED_NAME_IS_SIMULIVE)
  private Boolean isSimulive;

  public WebinarsListWebinarsResponseWebinarsInner() {
  }

  public WebinarsListWebinarsResponseWebinarsInner agenda(String agenda) {
    
    
    
    
    this.agenda = agenda;
    return this;
  }

   /**
   * Webinar description. The agenda length gets truncated to 250 characters when you list all webinars for a user. To view the complete agenda, retrieve details for a single webinar, use the [**Get a webinar**](https://developers.zoom.us) API.
   * @return agenda
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Learn more about Zoom APIs", value = "Webinar description. The agenda length gets truncated to 250 characters when you list all webinars for a user. To view the complete agenda, retrieve details for a single webinar, use the [**Get a webinar**](https://developers.zoom.us) API.")

  public String getAgenda() {
    return agenda;
  }


  public void setAgenda(String agenda) {
    
    
    
    this.agenda = agenda;
  }


  public WebinarsListWebinarsResponseWebinarsInner createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The webinar&#39;s creation time.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-01T22:00Z", value = "The webinar's creation time.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public WebinarsListWebinarsResponseWebinarsInner duration(Integer duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * The webinar&#39;s duration, in minutes.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60", value = "The webinar's duration, in minutes.")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    
    
    
    this.duration = duration;
  }


  public WebinarsListWebinarsResponseWebinarsInner hostId(String hostId) {
    
    
    
    
    this.hostId = hostId;
    return this;
  }

   /**
   * The host&#39;s ID.
   * @return hostId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "x1yCzABCDEfg23HiJKl4mN", value = "The host's ID.")

  public String getHostId() {
    return hostId;
  }


  public void setHostId(String hostId) {
    
    
    
    this.hostId = hostId;
  }


  public WebinarsListWebinarsResponseWebinarsInner id(Long id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The webinar ID.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234567890", value = "The webinar ID.")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    
    
    
    this.id = id;
  }


  public WebinarsListWebinarsResponseWebinarsInner joinUrl(String joinUrl) {
    
    
    
    
    this.joinUrl = joinUrl;
    return this;
  }

   /**
   * The URL to join the webinar.
   * @return joinUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/j/11111", value = "The URL to join the webinar.")

  public String getJoinUrl() {
    return joinUrl;
  }


  public void setJoinUrl(String joinUrl) {
    
    
    
    this.joinUrl = joinUrl;
  }


  public WebinarsListWebinarsResponseWebinarsInner startTime(OffsetDateTime startTime) {
    
    
    
    
    this.startTime = startTime;
    return this;
  }

   /**
   * The webinar&#39;s start time.
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-13T21:00Z", value = "The webinar's start time.")

  public OffsetDateTime getStartTime() {
    return startTime;
  }


  public void setStartTime(OffsetDateTime startTime) {
    
    
    
    this.startTime = startTime;
  }


  public WebinarsListWebinarsResponseWebinarsInner timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The webinar&#39;s [timezone](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "America/Los_Angeles", value = "The webinar's [timezone](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public WebinarsListWebinarsResponseWebinarsInner topic(String topic) {
    
    
    
    
    this.topic = topic;
    return this;
  }

   /**
   * The webinar&#39;s topic.
   * @return topic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My Webinar", value = "The webinar's topic.")

  public String getTopic() {
    return topic;
  }


  public void setTopic(String topic) {
    
    
    
    this.topic = topic;
  }


  public WebinarsListWebinarsResponseWebinarsInner type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The webinar type.  * &#x60;5&#x60; - A webinar.  * &#x60;6&#x60; - A recurring webinar without a fixed time.  * &#x60;9&#x60; - A recurring webinar with a fixed time.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_9", value = "The webinar type.  * `5` - A webinar.  * `6` - A recurring webinar without a fixed time.  * `9` - A recurring webinar with a fixed time.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public WebinarsListWebinarsResponseWebinarsInner uuid(String uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * The webinar&#39;s universally unique identifier (UUID). Each webinar instance generates a webinar UUID.
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4444AAAiAAAAAiAiAiiAii==", value = "The webinar's universally unique identifier (UUID). Each webinar instance generates a webinar UUID.")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    
    
    
    this.uuid = uuid;
  }


  public WebinarsListWebinarsResponseWebinarsInner isSimulive(Boolean isSimulive) {
    
    
    
    
    this.isSimulive = isSimulive;
    return this;
  }

   /**
   * Whether the webinar is &#x60;simulive&#x60;.
   * @return isSimulive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the webinar is `simulive`.")

  public Boolean getIsSimulive() {
    return isSimulive;
  }


  public void setIsSimulive(Boolean isSimulive) {
    
    
    
    this.isSimulive = isSimulive;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WebinarsListWebinarsResponseWebinarsInner instance itself
   */
  public WebinarsListWebinarsResponseWebinarsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebinarsListWebinarsResponseWebinarsInner webinarsListWebinarsResponseWebinarsInner = (WebinarsListWebinarsResponseWebinarsInner) o;
    return Objects.equals(this.agenda, webinarsListWebinarsResponseWebinarsInner.agenda) &&
        Objects.equals(this.createdAt, webinarsListWebinarsResponseWebinarsInner.createdAt) &&
        Objects.equals(this.duration, webinarsListWebinarsResponseWebinarsInner.duration) &&
        Objects.equals(this.hostId, webinarsListWebinarsResponseWebinarsInner.hostId) &&
        Objects.equals(this.id, webinarsListWebinarsResponseWebinarsInner.id) &&
        Objects.equals(this.joinUrl, webinarsListWebinarsResponseWebinarsInner.joinUrl) &&
        Objects.equals(this.startTime, webinarsListWebinarsResponseWebinarsInner.startTime) &&
        Objects.equals(this.timezone, webinarsListWebinarsResponseWebinarsInner.timezone) &&
        Objects.equals(this.topic, webinarsListWebinarsResponseWebinarsInner.topic) &&
        Objects.equals(this.type, webinarsListWebinarsResponseWebinarsInner.type) &&
        Objects.equals(this.uuid, webinarsListWebinarsResponseWebinarsInner.uuid) &&
        Objects.equals(this.isSimulive, webinarsListWebinarsResponseWebinarsInner.isSimulive)&&
        Objects.equals(this.additionalProperties, webinarsListWebinarsResponseWebinarsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agenda, createdAt, duration, hostId, id, joinUrl, startTime, timezone, topic, type, uuid, isSimulive, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebinarsListWebinarsResponseWebinarsInner {\n");
    sb.append("    agenda: ").append(toIndentedString(agenda)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    joinUrl: ").append(toIndentedString(joinUrl)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    isSimulive: ").append(toIndentedString(isSimulive)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agenda");
    openapiFields.add("created_at");
    openapiFields.add("duration");
    openapiFields.add("host_id");
    openapiFields.add("id");
    openapiFields.add("join_url");
    openapiFields.add("start_time");
    openapiFields.add("timezone");
    openapiFields.add("topic");
    openapiFields.add("type");
    openapiFields.add("uuid");
    openapiFields.add("is_simulive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebinarsListWebinarsResponseWebinarsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebinarsListWebinarsResponseWebinarsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebinarsListWebinarsResponseWebinarsInner is not found in the empty JSON string", WebinarsListWebinarsResponseWebinarsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("agenda") != null && !jsonObj.get("agenda").isJsonNull()) && !jsonObj.get("agenda").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agenda` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agenda").toString()));
      }
      if ((jsonObj.get("host_id") != null && !jsonObj.get("host_id").isJsonNull()) && !jsonObj.get("host_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host_id").toString()));
      }
      if ((jsonObj.get("join_url") != null && !jsonObj.get("join_url").isJsonNull()) && !jsonObj.get("join_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `join_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("join_url").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebinarsListWebinarsResponseWebinarsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebinarsListWebinarsResponseWebinarsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebinarsListWebinarsResponseWebinarsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebinarsListWebinarsResponseWebinarsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<WebinarsListWebinarsResponseWebinarsInner>() {
           @Override
           public void write(JsonWriter out, WebinarsListWebinarsResponseWebinarsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WebinarsListWebinarsResponseWebinarsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WebinarsListWebinarsResponseWebinarsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebinarsListWebinarsResponseWebinarsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebinarsListWebinarsResponseWebinarsInner
  * @throws IOException if the JSON string is invalid with respect to WebinarsListWebinarsResponseWebinarsInner
  */
  public static WebinarsListWebinarsResponseWebinarsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebinarsListWebinarsResponseWebinarsInner.class);
  }

 /**
  * Convert an instance of WebinarsListWebinarsResponseWebinarsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

