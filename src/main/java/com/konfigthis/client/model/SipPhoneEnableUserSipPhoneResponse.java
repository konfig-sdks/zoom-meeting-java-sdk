/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SipPhoneEnableUserSipPhoneResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SipPhoneEnableUserSipPhoneResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_AUTHORIZATION_NAME = "authorization_name";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_NAME)
  private String authorizationName;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PROXY_SERVER = "proxy_server";
  @SerializedName(SERIALIZED_NAME_PROXY_SERVER)
  private String proxyServer;

  public static final String SERIALIZED_NAME_PROXY_SERVER2 = "proxy_server2";
  @SerializedName(SERIALIZED_NAME_PROXY_SERVER2)
  private String proxyServer2;

  public static final String SERIALIZED_NAME_PROXY_SERVER3 = "proxy_server3";
  @SerializedName(SERIALIZED_NAME_PROXY_SERVER3)
  private String proxyServer3;

  public static final String SERIALIZED_NAME_REGISTER_SERVER = "register_server";
  @SerializedName(SERIALIZED_NAME_REGISTER_SERVER)
  private String registerServer;

  public static final String SERIALIZED_NAME_REGISTER_SERVER2 = "register_server2";
  @SerializedName(SERIALIZED_NAME_REGISTER_SERVER2)
  private String registerServer2;

  public static final String SERIALIZED_NAME_REGISTER_SERVER3 = "register_server3";
  @SerializedName(SERIALIZED_NAME_REGISTER_SERVER3)
  private String registerServer3;

  public static final String SERIALIZED_NAME_REGISTRATION_EXPIRE_TIME = "registration_expire_time";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_EXPIRE_TIME)
  private Integer registrationExpireTime = 60;

  /**
   * Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;.
   */
  @JsonAdapter(TransportProtocolEnum.Adapter.class)
 public enum TransportProtocolEnum {
    UDP("UDP"),
    
    TCP("TCP"),
    
    TLS("TLS"),
    
    AUTO("AUTO");

    private String value;

    TransportProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransportProtocolEnum fromValue(String value) {
      for (TransportProtocolEnum b : TransportProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransportProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransportProtocolEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSPORT_PROTOCOL = "transport_protocol";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_PROTOCOL)
  private TransportProtocolEnum transportProtocol;

  /**
   * Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;.
   */
  @JsonAdapter(TransportProtocol2Enum.Adapter.class)
 public enum TransportProtocol2Enum {
    UDP("UDP"),
    
    TCP("TCP"),
    
    TLS("TLS"),
    
    AUTO("AUTO");

    private String value;

    TransportProtocol2Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransportProtocol2Enum fromValue(String value) {
      for (TransportProtocol2Enum b : TransportProtocol2Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransportProtocol2Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportProtocol2Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportProtocol2Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransportProtocol2Enum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSPORT_PROTOCOL2 = "transport_protocol2";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_PROTOCOL2)
  private TransportProtocol2Enum transportProtocol2;

  /**
   * Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;.
   */
  @JsonAdapter(TransportProtocol3Enum.Adapter.class)
 public enum TransportProtocol3Enum {
    UDP("UDP"),
    
    TCP("TCP"),
    
    TLS("TLS"),
    
    AUTO("AUTO");

    private String value;

    TransportProtocol3Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransportProtocol3Enum fromValue(String value) {
      for (TransportProtocol3Enum b : TransportProtocol3Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransportProtocol3Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportProtocol3Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportProtocol3Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransportProtocol3Enum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSPORT_PROTOCOL3 = "transport_protocol3";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_PROTOCOL3)
  private TransportProtocol3Enum transportProtocol3;

  public static final String SERIALIZED_NAME_USER_EMAIL = "user_email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_VOICE_MAIL = "voice_mail";
  @SerializedName(SERIALIZED_NAME_VOICE_MAIL)
  private String voiceMail;

  public SipPhoneEnableUserSipPhoneResponse() {
  }

  public SipPhoneEnableUserSipPhoneResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The SIP phone ID.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456", value = "The SIP phone ID.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public SipPhoneEnableUserSipPhoneResponse authorizationName(String authorizationName) {
    
    
    
    
    this.authorizationName = authorizationName;
    return this;
  }

   /**
   * The authorization name of the user that is registered for SIP phone.
   * @return authorizationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "testname", value = "The authorization name of the user that is registered for SIP phone.")

  public String getAuthorizationName() {
    return authorizationName;
  }


  public void setAuthorizationName(String authorizationName) {
    
    
    
    this.authorizationName = authorizationName;
  }


  public SipPhoneEnableUserSipPhoneResponse domain(String domain) {
    
    
    
    
    this.domain = domain;
    return this;
  }

   /**
   * The name or IP address of your provider&#39;s SIP domain (example: CDC.WEB). 
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example.com", value = "The name or IP address of your provider's SIP domain (example: CDC.WEB). ")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    
    
    
    this.domain = domain;
  }


  public SipPhoneEnableUserSipPhoneResponse password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * The password generated for the user in the SIP account.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456", value = "The password generated for the user in the SIP account.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public SipPhoneEnableUserSipPhoneResponse proxyServer(String proxyServer) {
    
    
    
    
    this.proxyServer = proxyServer;
    return this;
  }

   /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
   * @return proxyServer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "192.0.2.2", value = "The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.")

  public String getProxyServer() {
    return proxyServer;
  }


  public void setProxyServer(String proxyServer) {
    
    
    
    this.proxyServer = proxyServer;
  }


  public SipPhoneEnableUserSipPhoneResponse proxyServer2(String proxyServer2) {
    
    
    
    
    this.proxyServer2 = proxyServer2;
    return this;
  }

   /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
   * @return proxyServer2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "192.0.2.4", value = "The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.")

  public String getProxyServer2() {
    return proxyServer2;
  }


  public void setProxyServer2(String proxyServer2) {
    
    
    
    this.proxyServer2 = proxyServer2;
  }


  public SipPhoneEnableUserSipPhoneResponse proxyServer3(String proxyServer3) {
    
    
    
    
    this.proxyServer3 = proxyServer3;
    return this;
  }

   /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
   * @return proxyServer3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "192.0.2.6", value = "The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.")

  public String getProxyServer3() {
    return proxyServer3;
  }


  public void setProxyServer3(String proxyServer3) {
    
    
    
    this.proxyServer3 = proxyServer3;
  }


  public SipPhoneEnableUserSipPhoneResponse registerServer(String registerServer) {
    
    
    
    
    this.registerServer = registerServer;
    return this;
  }

   /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   * @return registerServer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "192.0.2.1", value = "The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.")

  public String getRegisterServer() {
    return registerServer;
  }


  public void setRegisterServer(String registerServer) {
    
    
    
    this.registerServer = registerServer;
  }


  public SipPhoneEnableUserSipPhoneResponse registerServer2(String registerServer2) {
    
    
    
    
    this.registerServer2 = registerServer2;
    return this;
  }

   /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   * @return registerServer2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "192.0.2.3", value = "The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.")

  public String getRegisterServer2() {
    return registerServer2;
  }


  public void setRegisterServer2(String registerServer2) {
    
    
    
    this.registerServer2 = registerServer2;
  }


  public SipPhoneEnableUserSipPhoneResponse registerServer3(String registerServer3) {
    
    
    
    
    this.registerServer3 = registerServer3;
    return this;
  }

   /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   * @return registerServer3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "192.0.2.5", value = "The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.")

  public String getRegisterServer3() {
    return registerServer3;
  }


  public void setRegisterServer3(String registerServer3) {
    
    
    
    this.registerServer3 = registerServer3;
  }


  public SipPhoneEnableUserSipPhoneResponse registrationExpireTime(Integer registrationExpireTime) {
    if (registrationExpireTime != null && registrationExpireTime < 1) {
      throw new IllegalArgumentException("Invalid value for registrationExpireTime. Must be greater than or equal to 1.");
    }
    if (registrationExpireTime != null && registrationExpireTime > 127) {
      throw new IllegalArgumentException("Invalid value for registrationExpireTime. Must be less than or equal to 127.");
    }
    
    
    this.registrationExpireTime = registrationExpireTime;
    return this;
  }

   /**
   * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
   * minimum: 1
   * maximum: 127
   * @return registrationExpireTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60", value = "The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.")

  public Integer getRegistrationExpireTime() {
    return registrationExpireTime;
  }


  public void setRegistrationExpireTime(Integer registrationExpireTime) {
    if (registrationExpireTime != null && registrationExpireTime < 1) {
      throw new IllegalArgumentException("Invalid value for registrationExpireTime. Must be greater than or equal to 1.");
    }
    if (registrationExpireTime != null && registrationExpireTime > 127) {
      throw new IllegalArgumentException("Invalid value for registrationExpireTime. Must be less than or equal to 127.");
    }
    
    this.registrationExpireTime = registrationExpireTime;
  }


  public SipPhoneEnableUserSipPhoneResponse transportProtocol(TransportProtocolEnum transportProtocol) {
    
    
    
    
    this.transportProtocol = transportProtocol;
    return this;
  }

   /**
   * Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;.
   * @return transportProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UDP", value = "Protocols supported by the SIP provider.     The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.")

  public TransportProtocolEnum getTransportProtocol() {
    return transportProtocol;
  }


  public void setTransportProtocol(TransportProtocolEnum transportProtocol) {
    
    
    
    this.transportProtocol = transportProtocol;
  }


  public SipPhoneEnableUserSipPhoneResponse transportProtocol2(TransportProtocol2Enum transportProtocol2) {
    
    
    
    
    this.transportProtocol2 = transportProtocol2;
    return this;
  }

   /**
   * Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;.
   * @return transportProtocol2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UDP", value = "Protocols supported by the SIP provider.     The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.")

  public TransportProtocol2Enum getTransportProtocol2() {
    return transportProtocol2;
  }


  public void setTransportProtocol2(TransportProtocol2Enum transportProtocol2) {
    
    
    
    this.transportProtocol2 = transportProtocol2;
  }


  public SipPhoneEnableUserSipPhoneResponse transportProtocol3(TransportProtocol3Enum transportProtocol3) {
    
    
    
    
    this.transportProtocol3 = transportProtocol3;
    return this;
  }

   /**
   * Protocols supported by the SIP provider.     The value must be either &#x60;UDP&#x60;, &#x60;TCP&#x60;, &#x60;TLS&#x60;, &#x60;AUTO&#x60;.
   * @return transportProtocol3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UDP", value = "Protocols supported by the SIP provider.     The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.")

  public TransportProtocol3Enum getTransportProtocol3() {
    return transportProtocol3;
  }


  public void setTransportProtocol3(TransportProtocol3Enum transportProtocol3) {
    
    
    
    this.transportProtocol3 = transportProtocol3;
  }


  public SipPhoneEnableUserSipPhoneResponse userEmail(String userEmail) {
    
    
    
    
    this.userEmail = userEmail;
    return this;
  }

   /**
   * The email address of the user to associate with the SIP Phone. Can add &#x60;.win&#x60;, &#x60;.mac&#x60;, &#x60;.android&#x60;, &#x60;.ipad&#x60;, &#x60;.iphone&#x60;, &#x60;.linux&#x60;, &#x60;.pc&#x60;, &#x60;.mobile&#x60;, &#x60;.pad&#x60; at the end of the email (for example, &#x60;user@example.com.mac&#x60;) to add accounts for different platforms for the same user.
   * @return userEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jchill@example.com", value = "The email address of the user to associate with the SIP Phone. Can add `.win`, `.mac`, `.android`, `.ipad`, `.iphone`, `.linux`, `.pc`, `.mobile`, `.pad` at the end of the email (for example, `user@example.com.mac`) to add accounts for different platforms for the same user.")

  public String getUserEmail() {
    return userEmail;
  }


  public void setUserEmail(String userEmail) {
    
    
    
    this.userEmail = userEmail;
  }


  public SipPhoneEnableUserSipPhoneResponse userName(String userName) {
    
    
    
    
    this.userName = userName;
    return this;
  }

   /**
   * The phone number associated with the user in the SIP account.
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jill Chill", value = "The phone number associated with the user in the SIP account.")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    
    
    
    this.userName = userName;
  }


  public SipPhoneEnableUserSipPhoneResponse voiceMail(String voiceMail) {
    
    
    
    
    this.voiceMail = voiceMail;
    return this;
  }

   /**
   * The number to dial for checking voicemail.
   * @return voiceMail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4000", value = "The number to dial for checking voicemail.")

  public String getVoiceMail() {
    return voiceMail;
  }


  public void setVoiceMail(String voiceMail) {
    
    
    
    this.voiceMail = voiceMail;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SipPhoneEnableUserSipPhoneResponse instance itself
   */
  public SipPhoneEnableUserSipPhoneResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SipPhoneEnableUserSipPhoneResponse sipPhoneEnableUserSipPhoneResponse = (SipPhoneEnableUserSipPhoneResponse) o;
    return Objects.equals(this.id, sipPhoneEnableUserSipPhoneResponse.id) &&
        Objects.equals(this.authorizationName, sipPhoneEnableUserSipPhoneResponse.authorizationName) &&
        Objects.equals(this.domain, sipPhoneEnableUserSipPhoneResponse.domain) &&
        Objects.equals(this.password, sipPhoneEnableUserSipPhoneResponse.password) &&
        Objects.equals(this.proxyServer, sipPhoneEnableUserSipPhoneResponse.proxyServer) &&
        Objects.equals(this.proxyServer2, sipPhoneEnableUserSipPhoneResponse.proxyServer2) &&
        Objects.equals(this.proxyServer3, sipPhoneEnableUserSipPhoneResponse.proxyServer3) &&
        Objects.equals(this.registerServer, sipPhoneEnableUserSipPhoneResponse.registerServer) &&
        Objects.equals(this.registerServer2, sipPhoneEnableUserSipPhoneResponse.registerServer2) &&
        Objects.equals(this.registerServer3, sipPhoneEnableUserSipPhoneResponse.registerServer3) &&
        Objects.equals(this.registrationExpireTime, sipPhoneEnableUserSipPhoneResponse.registrationExpireTime) &&
        Objects.equals(this.transportProtocol, sipPhoneEnableUserSipPhoneResponse.transportProtocol) &&
        Objects.equals(this.transportProtocol2, sipPhoneEnableUserSipPhoneResponse.transportProtocol2) &&
        Objects.equals(this.transportProtocol3, sipPhoneEnableUserSipPhoneResponse.transportProtocol3) &&
        Objects.equals(this.userEmail, sipPhoneEnableUserSipPhoneResponse.userEmail) &&
        Objects.equals(this.userName, sipPhoneEnableUserSipPhoneResponse.userName) &&
        Objects.equals(this.voiceMail, sipPhoneEnableUserSipPhoneResponse.voiceMail)&&
        Objects.equals(this.additionalProperties, sipPhoneEnableUserSipPhoneResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, authorizationName, domain, password, proxyServer, proxyServer2, proxyServer3, registerServer, registerServer2, registerServer3, registrationExpireTime, transportProtocol, transportProtocol2, transportProtocol3, userEmail, userName, voiceMail, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SipPhoneEnableUserSipPhoneResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    authorizationName: ").append(toIndentedString(authorizationName)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    proxyServer: ").append(toIndentedString(proxyServer)).append("\n");
    sb.append("    proxyServer2: ").append(toIndentedString(proxyServer2)).append("\n");
    sb.append("    proxyServer3: ").append(toIndentedString(proxyServer3)).append("\n");
    sb.append("    registerServer: ").append(toIndentedString(registerServer)).append("\n");
    sb.append("    registerServer2: ").append(toIndentedString(registerServer2)).append("\n");
    sb.append("    registerServer3: ").append(toIndentedString(registerServer3)).append("\n");
    sb.append("    registrationExpireTime: ").append(toIndentedString(registrationExpireTime)).append("\n");
    sb.append("    transportProtocol: ").append(toIndentedString(transportProtocol)).append("\n");
    sb.append("    transportProtocol2: ").append(toIndentedString(transportProtocol2)).append("\n");
    sb.append("    transportProtocol3: ").append(toIndentedString(transportProtocol3)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    voiceMail: ").append(toIndentedString(voiceMail)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("authorization_name");
    openapiFields.add("domain");
    openapiFields.add("password");
    openapiFields.add("proxy_server");
    openapiFields.add("proxy_server2");
    openapiFields.add("proxy_server3");
    openapiFields.add("register_server");
    openapiFields.add("register_server2");
    openapiFields.add("register_server3");
    openapiFields.add("registration_expire_time");
    openapiFields.add("transport_protocol");
    openapiFields.add("transport_protocol2");
    openapiFields.add("transport_protocol3");
    openapiFields.add("user_email");
    openapiFields.add("user_name");
    openapiFields.add("voice_mail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SipPhoneEnableUserSipPhoneResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SipPhoneEnableUserSipPhoneResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SipPhoneEnableUserSipPhoneResponse is not found in the empty JSON string", SipPhoneEnableUserSipPhoneResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("authorization_name") != null && !jsonObj.get("authorization_name").isJsonNull()) && !jsonObj.get("authorization_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_name").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("proxy_server") != null && !jsonObj.get("proxy_server").isJsonNull()) && !jsonObj.get("proxy_server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxy_server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxy_server").toString()));
      }
      if ((jsonObj.get("proxy_server2") != null && !jsonObj.get("proxy_server2").isJsonNull()) && !jsonObj.get("proxy_server2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxy_server2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxy_server2").toString()));
      }
      if ((jsonObj.get("proxy_server3") != null && !jsonObj.get("proxy_server3").isJsonNull()) && !jsonObj.get("proxy_server3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxy_server3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxy_server3").toString()));
      }
      if ((jsonObj.get("register_server") != null && !jsonObj.get("register_server").isJsonNull()) && !jsonObj.get("register_server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `register_server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("register_server").toString()));
      }
      if ((jsonObj.get("register_server2") != null && !jsonObj.get("register_server2").isJsonNull()) && !jsonObj.get("register_server2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `register_server2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("register_server2").toString()));
      }
      if ((jsonObj.get("register_server3") != null && !jsonObj.get("register_server3").isJsonNull()) && !jsonObj.get("register_server3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `register_server3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("register_server3").toString()));
      }
      if ((jsonObj.get("transport_protocol") != null && !jsonObj.get("transport_protocol").isJsonNull()) && !jsonObj.get("transport_protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transport_protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transport_protocol").toString()));
      }
      if ((jsonObj.get("transport_protocol2") != null && !jsonObj.get("transport_protocol2").isJsonNull()) && !jsonObj.get("transport_protocol2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transport_protocol2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transport_protocol2").toString()));
      }
      if ((jsonObj.get("transport_protocol3") != null && !jsonObj.get("transport_protocol3").isJsonNull()) && !jsonObj.get("transport_protocol3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transport_protocol3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transport_protocol3").toString()));
      }
      if ((jsonObj.get("user_email") != null && !jsonObj.get("user_email").isJsonNull()) && !jsonObj.get("user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_email").toString()));
      }
      if ((jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonNull()) && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
      if ((jsonObj.get("voice_mail") != null && !jsonObj.get("voice_mail").isJsonNull()) && !jsonObj.get("voice_mail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voice_mail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voice_mail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SipPhoneEnableUserSipPhoneResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SipPhoneEnableUserSipPhoneResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SipPhoneEnableUserSipPhoneResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SipPhoneEnableUserSipPhoneResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SipPhoneEnableUserSipPhoneResponse>() {
           @Override
           public void write(JsonWriter out, SipPhoneEnableUserSipPhoneResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SipPhoneEnableUserSipPhoneResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SipPhoneEnableUserSipPhoneResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SipPhoneEnableUserSipPhoneResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SipPhoneEnableUserSipPhoneResponse
  * @throws IOException if the JSON string is invalid with respect to SipPhoneEnableUserSipPhoneResponse
  */
  public static SipPhoneEnableUserSipPhoneResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SipPhoneEnableUserSipPhoneResponse.class);
  }

 /**
  * Convert an instance of SipPhoneEnableUserSipPhoneResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

