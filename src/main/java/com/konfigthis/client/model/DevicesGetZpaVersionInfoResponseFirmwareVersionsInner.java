/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Details of firmware that the vendor can upgrade.
 */
@ApiModel(description = "Details of firmware that the vendor can upgrade.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DevicesGetZpaVersionInfoResponseFirmwareVersionsInner {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_WARN_INFO = "warn_info";
  @SerializedName(SERIALIZED_NAME_WARN_INFO)
  private String warnInfo;

  public DevicesGetZpaVersionInfoResponseFirmwareVersionsInner() {
  }

  public DevicesGetZpaVersionInfoResponseFirmwareVersionsInner version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The package version.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.19.552", value = "The package version.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public DevicesGetZpaVersionInfoResponseFirmwareVersionsInner vendor(String vendor) {
    
    
    
    
    this.vendor = vendor;
    return this;
  }

   /**
   * The device&#39;s manufacturer.
   * @return vendor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AudioCodes", value = "The device's manufacturer.")

  public String getVendor() {
    return vendor;
  }


  public void setVendor(String vendor) {
    
    
    
    this.vendor = vendor;
  }


  public DevicesGetZpaVersionInfoResponseFirmwareVersionsInner model(String model) {
    
    
    
    
    this.model = model;
    return this;
  }

   /**
   * The device&#39;s model name.
   * @return model
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "C470HD", value = "The device's model name.")

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    
    
    
    this.model = model;
  }


  public DevicesGetZpaVersionInfoResponseFirmwareVersionsInner warnInfo(String warnInfo) {
    
    
    
    
    this.warnInfo = warnInfo;
    return this;
  }

   /**
   * The prompt information for this version.
   * @return warnInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "You are about to perform an Android operating system upgrade. The change is permanent and cannot be reversed.", value = "The prompt information for this version.")

  public String getWarnInfo() {
    return warnInfo;
  }


  public void setWarnInfo(String warnInfo) {
    
    
    
    this.warnInfo = warnInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DevicesGetZpaVersionInfoResponseFirmwareVersionsInner instance itself
   */
  public DevicesGetZpaVersionInfoResponseFirmwareVersionsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DevicesGetZpaVersionInfoResponseFirmwareVersionsInner devicesGetZpaVersionInfoResponseFirmwareVersionsInner = (DevicesGetZpaVersionInfoResponseFirmwareVersionsInner) o;
    return Objects.equals(this.version, devicesGetZpaVersionInfoResponseFirmwareVersionsInner.version) &&
        Objects.equals(this.vendor, devicesGetZpaVersionInfoResponseFirmwareVersionsInner.vendor) &&
        Objects.equals(this.model, devicesGetZpaVersionInfoResponseFirmwareVersionsInner.model) &&
        Objects.equals(this.warnInfo, devicesGetZpaVersionInfoResponseFirmwareVersionsInner.warnInfo)&&
        Objects.equals(this.additionalProperties, devicesGetZpaVersionInfoResponseFirmwareVersionsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, vendor, model, warnInfo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DevicesGetZpaVersionInfoResponseFirmwareVersionsInner {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    warnInfo: ").append(toIndentedString(warnInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("vendor");
    openapiFields.add("model");
    openapiFields.add("warn_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DevicesGetZpaVersionInfoResponseFirmwareVersionsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DevicesGetZpaVersionInfoResponseFirmwareVersionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DevicesGetZpaVersionInfoResponseFirmwareVersionsInner is not found in the empty JSON string", DevicesGetZpaVersionInfoResponseFirmwareVersionsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("warn_info") != null && !jsonObj.get("warn_info").isJsonNull()) && !jsonObj.get("warn_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warn_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warn_info").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DevicesGetZpaVersionInfoResponseFirmwareVersionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DevicesGetZpaVersionInfoResponseFirmwareVersionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DevicesGetZpaVersionInfoResponseFirmwareVersionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DevicesGetZpaVersionInfoResponseFirmwareVersionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DevicesGetZpaVersionInfoResponseFirmwareVersionsInner>() {
           @Override
           public void write(JsonWriter out, DevicesGetZpaVersionInfoResponseFirmwareVersionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DevicesGetZpaVersionInfoResponseFirmwareVersionsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DevicesGetZpaVersionInfoResponseFirmwareVersionsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DevicesGetZpaVersionInfoResponseFirmwareVersionsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DevicesGetZpaVersionInfoResponseFirmwareVersionsInner
  * @throws IOException if the JSON string is invalid with respect to DevicesGetZpaVersionInfoResponseFirmwareVersionsInner
  */
  public static DevicesGetZpaVersionInfoResponseFirmwareVersionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DevicesGetZpaVersionInfoResponseFirmwareVersionsInner.class);
  }

 /**
  * Convert an instance of DevicesGetZpaVersionInfoResponseFirmwareVersionsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

