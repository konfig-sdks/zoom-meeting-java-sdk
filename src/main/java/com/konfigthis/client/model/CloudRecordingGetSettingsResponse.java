/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CloudRecordingGetSettingsResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CloudRecordingGetSettingsResponse {
  /**
   * The approval type for the registration.     &#x60;0&#x60;- Automatically approve the registration when a user registers.     &#x60;1&#x60; - Manually approve or deny the registration of a user.     &#x60;2&#x60; - No registration required to view the recording.
   */
  @JsonAdapter(ApprovalTypeEnum.Adapter.class)
 public enum ApprovalTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    ApprovalTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalTypeEnum fromValue(Integer value) {
      for (ApprovalTypeEnum b : ApprovalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ApprovalTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPROVAL_TYPE = "approval_type";
  @SerializedName(SERIALIZED_NAME_APPROVAL_TYPE)
  private ApprovalTypeEnum approvalType;

  public static final String SERIALIZED_NAME_AUTHENTICATION_DOMAINS = "authentication_domains";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_DOMAINS)
  private String authenticationDomains;

  public static final String SERIALIZED_NAME_AUTHENTICATION_OPTION = "authentication_option";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_OPTION)
  private String authenticationOption;

  public static final String SERIALIZED_NAME_ON_DEMAND = "on_demand";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND)
  private Boolean onDemand;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_RECORDING_AUTHENTICATION = "recording_authentication";
  @SerializedName(SERIALIZED_NAME_RECORDING_AUTHENTICATION)
  private Boolean recordingAuthentication;

  public static final String SERIALIZED_NAME_SEND_EMAIL_TO_HOST = "send_email_to_host";
  @SerializedName(SERIALIZED_NAME_SEND_EMAIL_TO_HOST)
  private Boolean sendEmailToHost;

  /**
   * This field determines how the meeting recording is shared.
   */
  @JsonAdapter(ShareRecordingEnum.Adapter.class)
 public enum ShareRecordingEnum {
    PUBLICLY("publicly"),
    
    INTERNALLY("internally"),
    
    NONE("none");

    private String value;

    ShareRecordingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShareRecordingEnum fromValue(String value) {
      for (ShareRecordingEnum b : ShareRecordingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShareRecordingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShareRecordingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShareRecordingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShareRecordingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SHARE_RECORDING = "share_recording";
  @SerializedName(SERIALIZED_NAME_SHARE_RECORDING)
  private ShareRecordingEnum shareRecording;

  public static final String SERIALIZED_NAME_SHOW_SOCIAL_SHARE_BUTTONS = "show_social_share_buttons";
  @SerializedName(SERIALIZED_NAME_SHOW_SOCIAL_SHARE_BUTTONS)
  private Boolean showSocialShareButtons;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_VIEWER_DOWNLOAD = "viewer_download";
  @SerializedName(SERIALIZED_NAME_VIEWER_DOWNLOAD)
  private Boolean viewerDownload;

  public CloudRecordingGetSettingsResponse() {
  }

  public CloudRecordingGetSettingsResponse approvalType(ApprovalTypeEnum approvalType) {
    
    
    
    
    this.approvalType = approvalType;
    return this;
  }

   /**
   * The approval type for the registration.     &#x60;0&#x60;- Automatically approve the registration when a user registers.     &#x60;1&#x60; - Manually approve or deny the registration of a user.     &#x60;2&#x60; - No registration required to view the recording.
   * @return approvalType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_0", value = "The approval type for the registration.     `0`- Automatically approve the registration when a user registers.     `1` - Manually approve or deny the registration of a user.     `2` - No registration required to view the recording.")

  public ApprovalTypeEnum getApprovalType() {
    return approvalType;
  }


  public void setApprovalType(ApprovalTypeEnum approvalType) {
    
    
    
    this.approvalType = approvalType;
  }


  public CloudRecordingGetSettingsResponse authenticationDomains(String authenticationDomains) {
    
    
    
    
    this.authenticationDomains = authenticationDomains;
    return this;
  }

   /**
   * The domains for authentication.
   * @return authenticationDomains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "test.com", value = "The domains for authentication.")

  public String getAuthenticationDomains() {
    return authenticationDomains;
  }


  public void setAuthenticationDomains(String authenticationDomains) {
    
    
    
    this.authenticationDomains = authenticationDomains;
  }


  public CloudRecordingGetSettingsResponse authenticationOption(String authenticationOption) {
    
    
    
    
    this.authenticationOption = authenticationOption;
    return this;
  }

   /**
   * The options for authentication .
   * @return authenticationOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "auth_option", value = "The options for authentication .")

  public String getAuthenticationOption() {
    return authenticationOption;
  }


  public void setAuthenticationOption(String authenticationOption) {
    
    
    
    this.authenticationOption = authenticationOption;
  }


  public CloudRecordingGetSettingsResponse onDemand(Boolean onDemand) {
    
    
    
    
    this.onDemand = onDemand;
    return this;
  }

   /**
   * This field determines whether registration is required to view the recording.
   * @return onDemand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "This field determines whether registration is required to view the recording.")

  public Boolean getOnDemand() {
    return onDemand;
  }


  public void setOnDemand(Boolean onDemand) {
    
    
    
    this.onDemand = onDemand;
  }


  public CloudRecordingGetSettingsResponse password(String password) {
    
    
    if (password != null && password.length() < 8) {
      throw new IllegalArgumentException("Invalid value for password. Length must be greater than or equal to 8.");
    }
    
    this.password = password;
    return this;
  }

   /**
   * This field enables passcode protection for the recording by setting a passcode. The passcode must have a minimum of **eight** characters with a mix of numbers, letters and special characters.          **Note:** If the account owner or the admin has set minimum passcode strength requirements for recordings through Account Settings, the passcode value provided here must meet those requirements.         If the requirements are enabled, you can view those requirements by calling either the [**Get user settings**](/api-reference/zoom-api/methods#operation/userSettings) API or the [**Get account settings**](/api-reference/zoom-api/ma#operation/accountSettings) API.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "975238724", value = "This field enables passcode protection for the recording by setting a passcode. The passcode must have a minimum of **eight** characters with a mix of numbers, letters and special characters.          **Note:** If the account owner or the admin has set minimum passcode strength requirements for recordings through Account Settings, the passcode value provided here must meet those requirements.         If the requirements are enabled, you can view those requirements by calling either the [**Get user settings**](/api-reference/zoom-api/methods#operation/userSettings) API or the [**Get account settings**](/api-reference/zoom-api/ma#operation/accountSettings) API.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    if (password != null && password.length() < 8) {
      throw new IllegalArgumentException("Invalid value for password. Length must be greater than or equal to 8.");
    }
    this.password = password;
  }


  public CloudRecordingGetSettingsResponse recordingAuthentication(Boolean recordingAuthentication) {
    
    
    
    
    this.recordingAuthentication = recordingAuthentication;
    return this;
  }

   /**
   * THis field only authenticated users can view.
   * @return recordingAuthentication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "THis field only authenticated users can view.")

  public Boolean getRecordingAuthentication() {
    return recordingAuthentication;
  }


  public void setRecordingAuthentication(Boolean recordingAuthentication) {
    
    
    
    this.recordingAuthentication = recordingAuthentication;
  }


  public CloudRecordingGetSettingsResponse sendEmailToHost(Boolean sendEmailToHost) {
    
    
    
    
    this.sendEmailToHost = sendEmailToHost;
    return this;
  }

   /**
   * This field enables you to send an email to the host when someone registers to view the recording. This applies for On-demand recordings only.
   * @return sendEmailToHost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "This field enables you to send an email to the host when someone registers to view the recording. This applies for On-demand recordings only.")

  public Boolean getSendEmailToHost() {
    return sendEmailToHost;
  }


  public void setSendEmailToHost(Boolean sendEmailToHost) {
    
    
    
    this.sendEmailToHost = sendEmailToHost;
  }


  public CloudRecordingGetSettingsResponse shareRecording(ShareRecordingEnum shareRecording) {
    
    
    
    
    this.shareRecording = shareRecording;
    return this;
  }

   /**
   * This field determines how the meeting recording is shared.
   * @return shareRecording
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PUBLICLY", value = "This field determines how the meeting recording is shared.")

  public ShareRecordingEnum getShareRecording() {
    return shareRecording;
  }


  public void setShareRecording(ShareRecordingEnum shareRecording) {
    
    
    
    this.shareRecording = shareRecording;
  }


  public CloudRecordingGetSettingsResponse showSocialShareButtons(Boolean showSocialShareButtons) {
    
    
    
    
    this.showSocialShareButtons = showSocialShareButtons;
    return this;
  }

   /**
   * This field shows social share buttons on registration page. This applies for On-demand recordings only.
   * @return showSocialShareButtons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "This field shows social share buttons on registration page. This applies for On-demand recordings only.")

  public Boolean getShowSocialShareButtons() {
    return showSocialShareButtons;
  }


  public void setShowSocialShareButtons(Boolean showSocialShareButtons) {
    
    
    
    this.showSocialShareButtons = showSocialShareButtons;
  }


  public CloudRecordingGetSettingsResponse topic(String topic) {
    
    
    
    
    this.topic = topic;
    return this;
  }

   /**
   * The name of the recording.
   * @return topic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My Personal Meeting Room", value = "The name of the recording.")

  public String getTopic() {
    return topic;
  }


  public void setTopic(String topic) {
    
    
    
    this.topic = topic;
  }


  public CloudRecordingGetSettingsResponse viewerDownload(Boolean viewerDownload) {
    
    
    
    
    this.viewerDownload = viewerDownload;
    return this;
  }

   /**
   * This field determines whether a viewer can download the recording file or not.
   * @return viewerDownload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "This field determines whether a viewer can download the recording file or not.")

  public Boolean getViewerDownload() {
    return viewerDownload;
  }


  public void setViewerDownload(Boolean viewerDownload) {
    
    
    
    this.viewerDownload = viewerDownload;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CloudRecordingGetSettingsResponse instance itself
   */
  public CloudRecordingGetSettingsResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudRecordingGetSettingsResponse cloudRecordingGetSettingsResponse = (CloudRecordingGetSettingsResponse) o;
    return Objects.equals(this.approvalType, cloudRecordingGetSettingsResponse.approvalType) &&
        Objects.equals(this.authenticationDomains, cloudRecordingGetSettingsResponse.authenticationDomains) &&
        Objects.equals(this.authenticationOption, cloudRecordingGetSettingsResponse.authenticationOption) &&
        Objects.equals(this.onDemand, cloudRecordingGetSettingsResponse.onDemand) &&
        Objects.equals(this.password, cloudRecordingGetSettingsResponse.password) &&
        Objects.equals(this.recordingAuthentication, cloudRecordingGetSettingsResponse.recordingAuthentication) &&
        Objects.equals(this.sendEmailToHost, cloudRecordingGetSettingsResponse.sendEmailToHost) &&
        Objects.equals(this.shareRecording, cloudRecordingGetSettingsResponse.shareRecording) &&
        Objects.equals(this.showSocialShareButtons, cloudRecordingGetSettingsResponse.showSocialShareButtons) &&
        Objects.equals(this.topic, cloudRecordingGetSettingsResponse.topic) &&
        Objects.equals(this.viewerDownload, cloudRecordingGetSettingsResponse.viewerDownload)&&
        Objects.equals(this.additionalProperties, cloudRecordingGetSettingsResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvalType, authenticationDomains, authenticationOption, onDemand, password, recordingAuthentication, sendEmailToHost, shareRecording, showSocialShareButtons, topic, viewerDownload, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudRecordingGetSettingsResponse {\n");
    sb.append("    approvalType: ").append(toIndentedString(approvalType)).append("\n");
    sb.append("    authenticationDomains: ").append(toIndentedString(authenticationDomains)).append("\n");
    sb.append("    authenticationOption: ").append(toIndentedString(authenticationOption)).append("\n");
    sb.append("    onDemand: ").append(toIndentedString(onDemand)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    recordingAuthentication: ").append(toIndentedString(recordingAuthentication)).append("\n");
    sb.append("    sendEmailToHost: ").append(toIndentedString(sendEmailToHost)).append("\n");
    sb.append("    shareRecording: ").append(toIndentedString(shareRecording)).append("\n");
    sb.append("    showSocialShareButtons: ").append(toIndentedString(showSocialShareButtons)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    viewerDownload: ").append(toIndentedString(viewerDownload)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approval_type");
    openapiFields.add("authentication_domains");
    openapiFields.add("authentication_option");
    openapiFields.add("on_demand");
    openapiFields.add("password");
    openapiFields.add("recording_authentication");
    openapiFields.add("send_email_to_host");
    openapiFields.add("share_recording");
    openapiFields.add("show_social_share_buttons");
    openapiFields.add("topic");
    openapiFields.add("viewer_download");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CloudRecordingGetSettingsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CloudRecordingGetSettingsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudRecordingGetSettingsResponse is not found in the empty JSON string", CloudRecordingGetSettingsResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("authentication_domains") != null && !jsonObj.get("authentication_domains").isJsonNull()) && !jsonObj.get("authentication_domains").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_domains` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_domains").toString()));
      }
      if ((jsonObj.get("authentication_option") != null && !jsonObj.get("authentication_option").isJsonNull()) && !jsonObj.get("authentication_option").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_option` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_option").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("share_recording") != null && !jsonObj.get("share_recording").isJsonNull()) && !jsonObj.get("share_recording").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `share_recording` to be a primitive type in the JSON string but got `%s`", jsonObj.get("share_recording").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudRecordingGetSettingsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudRecordingGetSettingsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudRecordingGetSettingsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudRecordingGetSettingsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudRecordingGetSettingsResponse>() {
           @Override
           public void write(JsonWriter out, CloudRecordingGetSettingsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudRecordingGetSettingsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CloudRecordingGetSettingsResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CloudRecordingGetSettingsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CloudRecordingGetSettingsResponse
  * @throws IOException if the JSON string is invalid with respect to CloudRecordingGetSettingsResponse
  */
  public static CloudRecordingGetSettingsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudRecordingGetSettingsResponse.class);
  }

 /**
  * Convert an instance of CloudRecordingGetSettingsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

