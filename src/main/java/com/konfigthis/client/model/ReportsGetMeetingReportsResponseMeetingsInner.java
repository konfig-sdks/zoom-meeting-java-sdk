/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReportsGetMeetingReportsResponseMeetingsInnerCustomKeysInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportsGetMeetingReportsResponseMeetingsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportsGetMeetingReportsResponseMeetingsInner {
  public static final String SERIALIZED_NAME_CUSTOM_KEYS = "custom_keys";
  @SerializedName(SERIALIZED_NAME_CUSTOM_KEYS)
  private List<ReportsGetMeetingReportsResponseMeetingsInnerCustomKeysInner> customKeys = null;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PARTICIPANTS_COUNT = "participants_count";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS_COUNT)
  private Integer participantsCount;

  public static final String SERIALIZED_NAME_SESSION_KEY = "session_key";
  @SerializedName(SERIALIZED_NAME_SESSION_KEY)
  private String sessionKey;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_TOTAL_MINUTES = "total_minutes";
  @SerializedName(SERIALIZED_NAME_TOTAL_MINUTES)
  private Integer totalMinutes;

  /**
   * The type of meeting or webinar.   meeting:  * &#x60;1&#x60; &amp;mdash; Instant meeting.  * &#x60;2&#x60; &amp;mdash; Scheduled meeting.  * &#x60;3&#x60; &amp;mdash; A recurring meeting with no fixed time.  * &#x60;4&#x60; &amp;mdash; A meeting created via PMI (Personal Meeting ID).  * &#x60;7&#x60; &amp;mdash; A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).  * &#x60;8&#x60; - Recurring meeting with a fixed time.   webinar:  * &#x60;5&#x60; &amp;mdash; A webinar.  * &#x60;6&#x60; &amp;mdash; A recurring webinar without a fixed time  * &#x60;9&#x60; &amp;mdash; A recurring webinar with a fixed time. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER_EMAIL = "user_email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_SCHEDULE_TIME = "schedule_time";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TIME)
  private String scheduleTime;

  public static final String SERIALIZED_NAME_JOIN_WAITING_ROOM_TIME = "join_waiting_room_time";
  @SerializedName(SERIALIZED_NAME_JOIN_WAITING_ROOM_TIME)
  private String joinWaitingRoomTime;

  public static final String SERIALIZED_NAME_JOIN_TIME = "join_time";
  @SerializedName(SERIALIZED_NAME_JOIN_TIME)
  private String joinTime;

  public static final String SERIALIZED_NAME_LEAVE_TIME = "leave_time";
  @SerializedName(SERIALIZED_NAME_LEAVE_TIME)
  private String leaveTime;

  public static final String SERIALIZED_NAME_HOST_ORGANIZATION = "host_organization";
  @SerializedName(SERIALIZED_NAME_HOST_ORGANIZATION)
  private String hostOrganization;

  public static final String SERIALIZED_NAME_HOST_NAME = "host_name";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_HAS_SCREEN_SHARE = "has_screen_share";
  @SerializedName(SERIALIZED_NAME_HAS_SCREEN_SHARE)
  private Boolean hasScreenShare;

  public static final String SERIALIZED_NAME_HAS_RECORDING = "has_recording";
  @SerializedName(SERIALIZED_NAME_HAS_RECORDING)
  private Boolean hasRecording;

  public static final String SERIALIZED_NAME_HAS_CHAT = "has_chat";
  @SerializedName(SERIALIZED_NAME_HAS_CHAT)
  private Boolean hasChat;

  /**
   * The meeting&#39;s encryption status.  * &#x60;1&#x60; &amp;mdash; E2E encryption.  * &#x60;2&#x60; &amp;mdash; Enhanced encryption.
   */
  @JsonAdapter(MeetingEncryptionStatusEnum.Adapter.class)
 public enum MeetingEncryptionStatusEnum {
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    MeetingEncryptionStatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MeetingEncryptionStatusEnum fromValue(Integer value) {
      for (MeetingEncryptionStatusEnum b : MeetingEncryptionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MeetingEncryptionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MeetingEncryptionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MeetingEncryptionStatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return MeetingEncryptionStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MEETING_ENCRYPTION_STATUS = "meeting_encryption_status";
  @SerializedName(SERIALIZED_NAME_MEETING_ENCRYPTION_STATUS)
  private MeetingEncryptionStatusEnum meetingEncryptionStatus;

  public static final String SERIALIZED_NAME_PARTICIPANTS_COUNT_MY_ACCOUNT = "participants_count_my_account";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS_COUNT_MY_ACCOUNT)
  private Integer participantsCountMyAccount;

  public ReportsGetMeetingReportsResponseMeetingsInner() {
  }

  public ReportsGetMeetingReportsResponseMeetingsInner customKeys(List<ReportsGetMeetingReportsResponseMeetingsInnerCustomKeysInner> customKeys) {
    
    
    
    
    this.customKeys = customKeys;
    return this;
  }

  public ReportsGetMeetingReportsResponseMeetingsInner addCustomKeysItem(ReportsGetMeetingReportsResponseMeetingsInnerCustomKeysInner customKeysItem) {
    if (this.customKeys == null) {
      this.customKeys = new ArrayList<>();
    }
    this.customKeys.add(customKeysItem);
    return this;
  }

   /**
   * Information about the meeting&#39;s assigned custom keys and values. This returns a maximum of 10 items.
   * @return customKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information about the meeting's assigned custom keys and values. This returns a maximum of 10 items.")

  public List<ReportsGetMeetingReportsResponseMeetingsInnerCustomKeysInner> getCustomKeys() {
    return customKeys;
  }


  public void setCustomKeys(List<ReportsGetMeetingReportsResponseMeetingsInnerCustomKeysInner> customKeys) {
    
    
    
    this.customKeys = customKeys;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner duration(Integer duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * The meeting&#39;s duration.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6", value = "The meeting's duration.")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    
    
    
    this.duration = duration;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner endTime(OffsetDateTime endTime) {
    
    
    
    
    this.endTime = endTime;
    return this;
  }

   /**
   * The meeting&#39;s end date and time.
   * @return endTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-07-15T23:30:19Z", value = "The meeting's end date and time.")

  public OffsetDateTime getEndTime() {
    return endTime;
  }


  public void setEndTime(OffsetDateTime endTime) {
    
    
    
    this.endTime = endTime;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID).
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345", value = "The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID).")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner participantsCount(Integer participantsCount) {
    
    
    
    
    this.participantsCount = participantsCount;
    return this;
  }

   /**
   * The number of meeting participants.
   * @return participantsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "The number of meeting participants.")

  public Integer getParticipantsCount() {
    return participantsCount;
  }


  public void setParticipantsCount(Integer participantsCount) {
    
    
    
    this.participantsCount = participantsCount;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner sessionKey(String sessionKey) {
    
    
    
    
    this.sessionKey = sessionKey;
    return this;
  }

   /**
   * The Video SDK custom session ID.
   * @return sessionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ABC36jaBI145", value = "The Video SDK custom session ID.")

  public String getSessionKey() {
    return sessionKey;
  }


  public void setSessionKey(String sessionKey) {
    
    
    
    this.sessionKey = sessionKey;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner source(String source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Whether the meeting was created directly through Zoom or via an API request:  * If the meeting was created via an OAuth app, this field returns the OAuth app&#39;s name.  * If the meeting was created via JWT or the Zoom Web Portal, this returns the &#x60;Zoom&#x60; value.
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Zoom", value = "Whether the meeting was created directly through Zoom or via an API request:  * If the meeting was created via an OAuth app, this field returns the OAuth app's name.  * If the meeting was created via JWT or the Zoom Web Portal, this returns the `Zoom` value.")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    
    
    
    this.source = source;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner startTime(OffsetDateTime startTime) {
    
    
    
    
    this.startTime = startTime;
    return this;
  }

   /**
   * The meeting&#39;s start date and time.
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-07-15T23:24:52Z", value = "The meeting's start date and time.")

  public OffsetDateTime getStartTime() {
    return startTime;
  }


  public void setStartTime(OffsetDateTime startTime) {
    
    
    
    this.startTime = startTime;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner topic(String topic) {
    
    
    
    
    this.topic = topic;
    return this;
  }

   /**
   * The meeting&#39;s topic.
   * @return topic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My Meeting", value = "The meeting's topic.")

  public String getTopic() {
    return topic;
  }


  public void setTopic(String topic) {
    
    
    
    this.topic = topic;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner totalMinutes(Integer totalMinutes) {
    
    
    
    
    this.totalMinutes = totalMinutes;
    return this;
  }

   /**
   * The sum of meeting minutes from all meeting participants in the meeting.
   * @return totalMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11", value = "The sum of meeting minutes from all meeting participants in the meeting.")

  public Integer getTotalMinutes() {
    return totalMinutes;
  }


  public void setTotalMinutes(Integer totalMinutes) {
    
    
    
    this.totalMinutes = totalMinutes;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of meeting or webinar.   meeting:  * &#x60;1&#x60; &amp;mdash; Instant meeting.  * &#x60;2&#x60; &amp;mdash; Scheduled meeting.  * &#x60;3&#x60; &amp;mdash; A recurring meeting with no fixed time.  * &#x60;4&#x60; &amp;mdash; A meeting created via PMI (Personal Meeting ID).  * &#x60;7&#x60; &amp;mdash; A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).  * &#x60;8&#x60; - Recurring meeting with a fixed time.   webinar:  * &#x60;5&#x60; &amp;mdash; A webinar.  * &#x60;6&#x60; &amp;mdash; A recurring webinar without a fixed time  * &#x60;9&#x60; &amp;mdash; A recurring webinar with a fixed time. 
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_2", value = "The type of meeting or webinar.   meeting:  * `1` &mdash; Instant meeting.  * `2` &mdash; Scheduled meeting.  * `3` &mdash; A recurring meeting with no fixed time.  * `4` &mdash; A meeting created via PMI (Personal Meeting ID).  * `7` &mdash; A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).  * `8` - Recurring meeting with a fixed time.   webinar:  * `5` &mdash; A webinar.  * `6` &mdash; A recurring webinar without a fixed time  * `9` &mdash; A recurring webinar with a fixed time. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner userEmail(String userEmail) {
    
    
    
    
    this.userEmail = userEmail;
    return this;
  }

   /**
   * The user&#39;s email address.
   * @return userEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jchill@example.com", value = "The user's email address.")

  public String getUserEmail() {
    return userEmail;
  }


  public void setUserEmail(String userEmail) {
    
    
    
    this.userEmail = userEmail;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner userName(String userName) {
    
    
    
    
    this.userName = userName;
    return this;
  }

   /**
   * The user&#39;s display name.
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jill Chill", value = "The user's display name.")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    
    
    
    this.userName = userName;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner uuid(String uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * The meeting&#39;s universally unique identifier (UUID). Each meeting instance generates a meeting UUID.
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4444AAAiAAAAAiAiAiiAii==", value = "The meeting's universally unique identifier (UUID). Each meeting instance generates a meeting UUID.")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    
    
    
    this.uuid = uuid;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner scheduleTime(String scheduleTime) {
    
    
    
    
    this.scheduleTime = scheduleTime;
    return this;
  }

   /**
   * The meeting&#39;s scheduled date and time.
   * @return scheduleTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12/22/2021 16:20", value = "The meeting's scheduled date and time.")

  public String getScheduleTime() {
    return scheduleTime;
  }


  public void setScheduleTime(String scheduleTime) {
    
    
    
    this.scheduleTime = scheduleTime;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner joinWaitingRoomTime(String joinWaitingRoomTime) {
    
    
    
    
    this.joinWaitingRoomTime = joinWaitingRoomTime;
    return this;
  }

   /**
   * The date and time at which the attendee joined the waiting room.
   * @return joinWaitingRoomTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "02/11/2022 16:15", value = "The date and time at which the attendee joined the waiting room.")

  public String getJoinWaitingRoomTime() {
    return joinWaitingRoomTime;
  }


  public void setJoinWaitingRoomTime(String joinWaitingRoomTime) {
    
    
    
    this.joinWaitingRoomTime = joinWaitingRoomTime;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner joinTime(String joinTime) {
    
    
    
    
    this.joinTime = joinTime;
    return this;
  }

   /**
   * The date and time at which the attendee joined the meeting.
   * @return joinTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12/22/2021 16:20", value = "The date and time at which the attendee joined the meeting.")

  public String getJoinTime() {
    return joinTime;
  }


  public void setJoinTime(String joinTime) {
    
    
    
    this.joinTime = joinTime;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner leaveTime(String leaveTime) {
    
    
    
    
    this.leaveTime = leaveTime;
    return this;
  }

   /**
   * The date and time at which the attendee left the meeting.
   * @return leaveTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12/22/2021 17:13", value = "The date and time at which the attendee left the meeting.")

  public String getLeaveTime() {
    return leaveTime;
  }


  public void setLeaveTime(String leaveTime) {
    
    
    
    this.leaveTime = leaveTime;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner hostOrganization(String hostOrganization) {
    
    
    
    
    this.hostOrganization = hostOrganization;
    return this;
  }

   /**
   * Host Account Name of Hosting Organization.
   * @return hostOrganization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "org", value = "Host Account Name of Hosting Organization.")

  public String getHostOrganization() {
    return hostOrganization;
  }


  public void setHostOrganization(String hostOrganization) {
    
    
    
    this.hostOrganization = hostOrganization;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner hostName(String hostName) {
    
    
    
    
    this.hostName = hostName;
    return this;
  }

   /**
   * Host&#39;s name.
   * @return hostName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jill", value = "Host's name.")

  public String getHostName() {
    return hostName;
  }


  public void setHostName(String hostName) {
    
    
    
    this.hostName = hostName;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner hasScreenShare(Boolean hasScreenShare) {
    
    
    
    
    this.hasScreenShare = hasScreenShare;
    return this;
  }

   /**
   * Indicates whether or not the screenshare feature was used in the meeting.
   * @return hasScreenShare
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates whether or not the screenshare feature was used in the meeting.")

  public Boolean getHasScreenShare() {
    return hasScreenShare;
  }


  public void setHasScreenShare(Boolean hasScreenShare) {
    
    
    
    this.hasScreenShare = hasScreenShare;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner hasRecording(Boolean hasRecording) {
    
    
    
    
    this.hasRecording = hasRecording;
    return this;
  }

   /**
   * Indicates whether or not the recording feature was used in the meeting.
   * @return hasRecording
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates whether or not the recording feature was used in the meeting.")

  public Boolean getHasRecording() {
    return hasRecording;
  }


  public void setHasRecording(Boolean hasRecording) {
    
    
    
    this.hasRecording = hasRecording;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner hasChat(Boolean hasChat) {
    
    
    
    
    this.hasChat = hasChat;
    return this;
  }

   /**
   * Indicates whether or not the chat feature was used in the meeting.
   * @return hasChat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates whether or not the chat feature was used in the meeting.")

  public Boolean getHasChat() {
    return hasChat;
  }


  public void setHasChat(Boolean hasChat) {
    
    
    
    this.hasChat = hasChat;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner meetingEncryptionStatus(MeetingEncryptionStatusEnum meetingEncryptionStatus) {
    
    
    
    
    this.meetingEncryptionStatus = meetingEncryptionStatus;
    return this;
  }

   /**
   * The meeting&#39;s encryption status.  * &#x60;1&#x60; &amp;mdash; E2E encryption.  * &#x60;2&#x60; &amp;mdash; Enhanced encryption.
   * @return meetingEncryptionStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_1", value = "The meeting's encryption status.  * `1` &mdash; E2E encryption.  * `2` &mdash; Enhanced encryption.")

  public MeetingEncryptionStatusEnum getMeetingEncryptionStatus() {
    return meetingEncryptionStatus;
  }


  public void setMeetingEncryptionStatus(MeetingEncryptionStatusEnum meetingEncryptionStatus) {
    
    
    
    this.meetingEncryptionStatus = meetingEncryptionStatus;
  }


  public ReportsGetMeetingReportsResponseMeetingsInner participantsCountMyAccount(Integer participantsCountMyAccount) {
    
    
    
    
    this.participantsCountMyAccount = participantsCountMyAccount;
    return this;
  }

   /**
   * The number of meeting participants from my account.
   * @return participantsCountMyAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "The number of meeting participants from my account.")

  public Integer getParticipantsCountMyAccount() {
    return participantsCountMyAccount;
  }


  public void setParticipantsCountMyAccount(Integer participantsCountMyAccount) {
    
    
    
    this.participantsCountMyAccount = participantsCountMyAccount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportsGetMeetingReportsResponseMeetingsInner instance itself
   */
  public ReportsGetMeetingReportsResponseMeetingsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsGetMeetingReportsResponseMeetingsInner reportsGetMeetingReportsResponseMeetingsInner = (ReportsGetMeetingReportsResponseMeetingsInner) o;
    return Objects.equals(this.customKeys, reportsGetMeetingReportsResponseMeetingsInner.customKeys) &&
        Objects.equals(this.duration, reportsGetMeetingReportsResponseMeetingsInner.duration) &&
        Objects.equals(this.endTime, reportsGetMeetingReportsResponseMeetingsInner.endTime) &&
        Objects.equals(this.id, reportsGetMeetingReportsResponseMeetingsInner.id) &&
        Objects.equals(this.participantsCount, reportsGetMeetingReportsResponseMeetingsInner.participantsCount) &&
        Objects.equals(this.sessionKey, reportsGetMeetingReportsResponseMeetingsInner.sessionKey) &&
        Objects.equals(this.source, reportsGetMeetingReportsResponseMeetingsInner.source) &&
        Objects.equals(this.startTime, reportsGetMeetingReportsResponseMeetingsInner.startTime) &&
        Objects.equals(this.topic, reportsGetMeetingReportsResponseMeetingsInner.topic) &&
        Objects.equals(this.totalMinutes, reportsGetMeetingReportsResponseMeetingsInner.totalMinutes) &&
        Objects.equals(this.type, reportsGetMeetingReportsResponseMeetingsInner.type) &&
        Objects.equals(this.userEmail, reportsGetMeetingReportsResponseMeetingsInner.userEmail) &&
        Objects.equals(this.userName, reportsGetMeetingReportsResponseMeetingsInner.userName) &&
        Objects.equals(this.uuid, reportsGetMeetingReportsResponseMeetingsInner.uuid) &&
        Objects.equals(this.scheduleTime, reportsGetMeetingReportsResponseMeetingsInner.scheduleTime) &&
        Objects.equals(this.joinWaitingRoomTime, reportsGetMeetingReportsResponseMeetingsInner.joinWaitingRoomTime) &&
        Objects.equals(this.joinTime, reportsGetMeetingReportsResponseMeetingsInner.joinTime) &&
        Objects.equals(this.leaveTime, reportsGetMeetingReportsResponseMeetingsInner.leaveTime) &&
        Objects.equals(this.hostOrganization, reportsGetMeetingReportsResponseMeetingsInner.hostOrganization) &&
        Objects.equals(this.hostName, reportsGetMeetingReportsResponseMeetingsInner.hostName) &&
        Objects.equals(this.hasScreenShare, reportsGetMeetingReportsResponseMeetingsInner.hasScreenShare) &&
        Objects.equals(this.hasRecording, reportsGetMeetingReportsResponseMeetingsInner.hasRecording) &&
        Objects.equals(this.hasChat, reportsGetMeetingReportsResponseMeetingsInner.hasChat) &&
        Objects.equals(this.meetingEncryptionStatus, reportsGetMeetingReportsResponseMeetingsInner.meetingEncryptionStatus) &&
        Objects.equals(this.participantsCountMyAccount, reportsGetMeetingReportsResponseMeetingsInner.participantsCountMyAccount)&&
        Objects.equals(this.additionalProperties, reportsGetMeetingReportsResponseMeetingsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customKeys, duration, endTime, id, participantsCount, sessionKey, source, startTime, topic, totalMinutes, type, userEmail, userName, uuid, scheduleTime, joinWaitingRoomTime, joinTime, leaveTime, hostOrganization, hostName, hasScreenShare, hasRecording, hasChat, meetingEncryptionStatus, participantsCountMyAccount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsGetMeetingReportsResponseMeetingsInner {\n");
    sb.append("    customKeys: ").append(toIndentedString(customKeys)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    participantsCount: ").append(toIndentedString(participantsCount)).append("\n");
    sb.append("    sessionKey: ").append(toIndentedString(sessionKey)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    totalMinutes: ").append(toIndentedString(totalMinutes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    scheduleTime: ").append(toIndentedString(scheduleTime)).append("\n");
    sb.append("    joinWaitingRoomTime: ").append(toIndentedString(joinWaitingRoomTime)).append("\n");
    sb.append("    joinTime: ").append(toIndentedString(joinTime)).append("\n");
    sb.append("    leaveTime: ").append(toIndentedString(leaveTime)).append("\n");
    sb.append("    hostOrganization: ").append(toIndentedString(hostOrganization)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    hasScreenShare: ").append(toIndentedString(hasScreenShare)).append("\n");
    sb.append("    hasRecording: ").append(toIndentedString(hasRecording)).append("\n");
    sb.append("    hasChat: ").append(toIndentedString(hasChat)).append("\n");
    sb.append("    meetingEncryptionStatus: ").append(toIndentedString(meetingEncryptionStatus)).append("\n");
    sb.append("    participantsCountMyAccount: ").append(toIndentedString(participantsCountMyAccount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("custom_keys");
    openapiFields.add("duration");
    openapiFields.add("end_time");
    openapiFields.add("id");
    openapiFields.add("participants_count");
    openapiFields.add("session_key");
    openapiFields.add("source");
    openapiFields.add("start_time");
    openapiFields.add("topic");
    openapiFields.add("total_minutes");
    openapiFields.add("type");
    openapiFields.add("user_email");
    openapiFields.add("user_name");
    openapiFields.add("uuid");
    openapiFields.add("schedule_time");
    openapiFields.add("join_waiting_room_time");
    openapiFields.add("join_time");
    openapiFields.add("leave_time");
    openapiFields.add("host_organization");
    openapiFields.add("host_name");
    openapiFields.add("has_screen_share");
    openapiFields.add("has_recording");
    openapiFields.add("has_chat");
    openapiFields.add("meeting_encryption_status");
    openapiFields.add("participants_count_my_account");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportsGetMeetingReportsResponseMeetingsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportsGetMeetingReportsResponseMeetingsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsGetMeetingReportsResponseMeetingsInner is not found in the empty JSON string", ReportsGetMeetingReportsResponseMeetingsInner.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("custom_keys") != null && !jsonObj.get("custom_keys").isJsonNull()) {
        JsonArray jsonArraycustomKeys = jsonObj.getAsJsonArray("custom_keys");
        if (jsonArraycustomKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_keys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_keys` to be an array in the JSON string but got `%s`", jsonObj.get("custom_keys").toString()));
          }

          // validate the optional field `custom_keys` (array)
          for (int i = 0; i < jsonArraycustomKeys.size(); i++) {
            ReportsGetMeetingReportsResponseMeetingsInnerCustomKeysInner.validateJsonObject(jsonArraycustomKeys.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("session_key") != null && !jsonObj.get("session_key").isJsonNull()) && !jsonObj.get("session_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_key").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("user_email") != null && !jsonObj.get("user_email").isJsonNull()) && !jsonObj.get("user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_email").toString()));
      }
      if ((jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonNull()) && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("schedule_time") != null && !jsonObj.get("schedule_time").isJsonNull()) && !jsonObj.get("schedule_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule_time").toString()));
      }
      if ((jsonObj.get("join_waiting_room_time") != null && !jsonObj.get("join_waiting_room_time").isJsonNull()) && !jsonObj.get("join_waiting_room_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `join_waiting_room_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("join_waiting_room_time").toString()));
      }
      if ((jsonObj.get("join_time") != null && !jsonObj.get("join_time").isJsonNull()) && !jsonObj.get("join_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `join_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("join_time").toString()));
      }
      if ((jsonObj.get("leave_time") != null && !jsonObj.get("leave_time").isJsonNull()) && !jsonObj.get("leave_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leave_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leave_time").toString()));
      }
      if ((jsonObj.get("host_organization") != null && !jsonObj.get("host_organization").isJsonNull()) && !jsonObj.get("host_organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host_organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host_organization").toString()));
      }
      if ((jsonObj.get("host_name") != null && !jsonObj.get("host_name").isJsonNull()) && !jsonObj.get("host_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsGetMeetingReportsResponseMeetingsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsGetMeetingReportsResponseMeetingsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsGetMeetingReportsResponseMeetingsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsGetMeetingReportsResponseMeetingsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsGetMeetingReportsResponseMeetingsInner>() {
           @Override
           public void write(JsonWriter out, ReportsGetMeetingReportsResponseMeetingsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsGetMeetingReportsResponseMeetingsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportsGetMeetingReportsResponseMeetingsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportsGetMeetingReportsResponseMeetingsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportsGetMeetingReportsResponseMeetingsInner
  * @throws IOException if the JSON string is invalid with respect to ReportsGetMeetingReportsResponseMeetingsInner
  */
  public static ReportsGetMeetingReportsResponseMeetingsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsGetMeetingReportsResponseMeetingsInner.class);
  }

 /**
  * Convert an instance of ReportsGetMeetingReportsResponseMeetingsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

