/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestRecurrence;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestSettings;
import com.konfigthis.client.model.MeetingsUpdateDetailsRequestTrackingFieldsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Meeting object.
 */
@ApiModel(description = "Meeting object.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MeetingsUpdateDetailsRequest {
  public static final String SERIALIZED_NAME_AGENDA = "agenda";
  @SerializedName(SERIALIZED_NAME_AGENDA)
  private String agenda;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PRE_SCHEDULE = "pre_schedule";
  @SerializedName(SERIALIZED_NAME_PRE_SCHEDULE)
  private Boolean preSchedule = false;

  public static final String SERIALIZED_NAME_SCHEDULE_FOR = "schedule_for";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_FOR)
  private String scheduleFor;

  public static final String SERIALIZED_NAME_RECURRENCE = "recurrence";
  @SerializedName(SERIALIZED_NAME_RECURRENCE)
  private MeetingsUpdateDetailsRequestRecurrence recurrence;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private MeetingsUpdateDetailsRequestSettings settings;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_TRACKING_FIELDS = "tracking_fields";
  @SerializedName(SERIALIZED_NAME_TRACKING_FIELDS)
  private List<MeetingsUpdateDetailsRequestTrackingFieldsInner> trackingFields = null;

  /**
   * Meeting types.  &#x60;1&#x60; - Instant meeting.    &#x60;2&#x60; - Scheduled meeting.    &#x60;3&#x60; - Recurring meeting with no fixed time.    &#x60;8&#x60; - Recurring meeting with a fixed time.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_8(8);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.NUMBER_2;

  public MeetingsUpdateDetailsRequest() {
  }

  public MeetingsUpdateDetailsRequest agenda(String agenda) {
    
    
    
    
    this.agenda = agenda;
    return this;
  }

   /**
   * Meeting description.
   * @return agenda
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My Meeting", value = "Meeting description.")

  public String getAgenda() {
    return agenda;
  }


  public void setAgenda(String agenda) {
    
    
    
    this.agenda = agenda;
  }


  public MeetingsUpdateDetailsRequest duration(Integer duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * Meeting duration in minutes. Used for scheduled meetings only.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60", value = "Meeting duration in minutes. Used for scheduled meetings only.")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    
    
    
    this.duration = duration;
  }


  public MeetingsUpdateDetailsRequest password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * Meeting passcode. Passcodes may only contain these characters [a-z A-Z 0-9 @ - _ *] and can have a maximum of 10 characters.  **Note** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements.         If the requirements are enabled, view those requirements by calling either the [**Get user settings**](https://developers.zoom.us) API or the [**Get account settings**](https://developers.zoom.us) API.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456", value = "Meeting passcode. Passcodes may only contain these characters [a-z A-Z 0-9 @ - _ *] and can have a maximum of 10 characters.  **Note** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements.         If the requirements are enabled, view those requirements by calling either the [**Get user settings**](https://developers.zoom.us) API or the [**Get account settings**](https://developers.zoom.us) API.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public MeetingsUpdateDetailsRequest preSchedule(Boolean preSchedule) {
    
    
    
    
    this.preSchedule = preSchedule;
    return this;
  }

   /**
   * Whether to create a prescheduled meeting through the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting &#x60;type&#x60; value of &#x60;2&#x60; - scheduled meetings- and &#x60;3&#x60; - recurring meetings with no fixed time.  * &#x60;true&#x60; - Create a prescheduled meeting.  * &#x60;false&#x60; - Create a regular meeting.
   * @return preSchedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to create a prescheduled meeting through the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting `type` value of `2` - scheduled meetings- and `3` - recurring meetings with no fixed time.  * `true` - Create a prescheduled meeting.  * `false` - Create a regular meeting.")

  public Boolean getPreSchedule() {
    return preSchedule;
  }


  public void setPreSchedule(Boolean preSchedule) {
    
    
    
    this.preSchedule = preSchedule;
  }


  public MeetingsUpdateDetailsRequest scheduleFor(String scheduleFor) {
    
    
    
    
    this.scheduleFor = scheduleFor;
    return this;
  }

   /**
   * The email address or &#x60;userId&#x60; of the user to schedule a meeting for.
   * @return scheduleFor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jchill@example.com", value = "The email address or `userId` of the user to schedule a meeting for.")

  public String getScheduleFor() {
    return scheduleFor;
  }


  public void setScheduleFor(String scheduleFor) {
    
    
    
    this.scheduleFor = scheduleFor;
  }


  public MeetingsUpdateDetailsRequest recurrence(MeetingsUpdateDetailsRequestRecurrence recurrence) {
    
    
    
    
    this.recurrence = recurrence;
    return this;
  }

   /**
   * Get recurrence
   * @return recurrence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsUpdateDetailsRequestRecurrence getRecurrence() {
    return recurrence;
  }


  public void setRecurrence(MeetingsUpdateDetailsRequestRecurrence recurrence) {
    
    
    
    this.recurrence = recurrence;
  }


  public MeetingsUpdateDetailsRequest settings(MeetingsUpdateDetailsRequestSettings settings) {
    
    
    
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MeetingsUpdateDetailsRequestSettings getSettings() {
    return settings;
  }


  public void setSettings(MeetingsUpdateDetailsRequestSettings settings) {
    
    
    
    this.settings = settings;
  }


  public MeetingsUpdateDetailsRequest startTime(OffsetDateTime startTime) {
    
    
    
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Meeting start time. When using a format like &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;&#x60;, always use GMT time. When using a format like &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#x60;, use local time and specify the time zone. Only used for scheduled meetings and recurring meetings with a fixed time.
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-03-25T07:29:29Z", value = "Meeting start time. When using a format like `yyyy-MM-dd'T'HH:mm:ss'Z'`, always use GMT time. When using a format like `yyyy-MM-dd'T'HH:mm:ss`, use local time and specify the time zone. Only used for scheduled meetings and recurring meetings with a fixed time.")

  public OffsetDateTime getStartTime() {
    return startTime;
  }


  public void setStartTime(OffsetDateTime startTime) {
    
    
    
    this.startTime = startTime;
  }


  public MeetingsUpdateDetailsRequest templateId(String templateId) {
    
    
    
    
    this.templateId = templateId;
    return this;
  }

   /**
   * Unique identifier of the meeting template.   [Schedule the meeting from a meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates#h_86f06cff-0852-4998-81c5-c83663c176fb). Retrieve this field&#39;s value by calling the [List meeting templates](https://developers.zoom.us/docs/api/rest/reference/zoom-api/methods/#operation/listMeetingTemplates) API.
   * @return templateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5Cj3ceXoStO6TGOVvIOVPA==", value = "Unique identifier of the meeting template.   [Schedule the meeting from a meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates#h_86f06cff-0852-4998-81c5-c83663c176fb). Retrieve this field's value by calling the [List meeting templates](https://developers.zoom.us/docs/api/rest/reference/zoom-api/methods/#operation/listMeetingTemplates) API.")

  public String getTemplateId() {
    return templateId;
  }


  public void setTemplateId(String templateId) {
    
    
    
    this.templateId = templateId;
  }


  public MeetingsUpdateDetailsRequest timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The timezone to assign to the &#x60;start_time&#x60; value. Only use this field ifor scheduled or recurring meetings with a fixed time.  For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "America/Los_Angeles", value = "The timezone to assign to the `start_time` value. Only use this field ifor scheduled or recurring meetings with a fixed time.  For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public MeetingsUpdateDetailsRequest topic(String topic) {
    
    
    
    
    this.topic = topic;
    return this;
  }

   /**
   * Meeting topic.
   * @return topic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My Meeting", value = "Meeting topic.")

  public String getTopic() {
    return topic;
  }


  public void setTopic(String topic) {
    
    
    
    this.topic = topic;
  }


  public MeetingsUpdateDetailsRequest trackingFields(List<MeetingsUpdateDetailsRequestTrackingFieldsInner> trackingFields) {
    
    
    
    
    this.trackingFields = trackingFields;
    return this;
  }

  public MeetingsUpdateDetailsRequest addTrackingFieldsItem(MeetingsUpdateDetailsRequestTrackingFieldsInner trackingFieldsItem) {
    if (this.trackingFields == null) {
      this.trackingFields = new ArrayList<>();
    }
    this.trackingFields.add(trackingFieldsItem);
    return this;
  }

   /**
   * Tracking fields.
   * @return trackingFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tracking fields.")

  public List<MeetingsUpdateDetailsRequestTrackingFieldsInner> getTrackingFields() {
    return trackingFields;
  }


  public void setTrackingFields(List<MeetingsUpdateDetailsRequestTrackingFieldsInner> trackingFields) {
    
    
    
    this.trackingFields = trackingFields;
  }


  public MeetingsUpdateDetailsRequest type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Meeting types.  &#x60;1&#x60; - Instant meeting.    &#x60;2&#x60; - Scheduled meeting.    &#x60;3&#x60; - Recurring meeting with no fixed time.    &#x60;8&#x60; - Recurring meeting with a fixed time.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_2", value = "Meeting types.  `1` - Instant meeting.    `2` - Scheduled meeting.    `3` - Recurring meeting with no fixed time.    `8` - Recurring meeting with a fixed time.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MeetingsUpdateDetailsRequest instance itself
   */
  public MeetingsUpdateDetailsRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingsUpdateDetailsRequest meetingsUpdateDetailsRequest = (MeetingsUpdateDetailsRequest) o;
    return Objects.equals(this.agenda, meetingsUpdateDetailsRequest.agenda) &&
        Objects.equals(this.duration, meetingsUpdateDetailsRequest.duration) &&
        Objects.equals(this.password, meetingsUpdateDetailsRequest.password) &&
        Objects.equals(this.preSchedule, meetingsUpdateDetailsRequest.preSchedule) &&
        Objects.equals(this.scheduleFor, meetingsUpdateDetailsRequest.scheduleFor) &&
        Objects.equals(this.recurrence, meetingsUpdateDetailsRequest.recurrence) &&
        Objects.equals(this.settings, meetingsUpdateDetailsRequest.settings) &&
        Objects.equals(this.startTime, meetingsUpdateDetailsRequest.startTime) &&
        Objects.equals(this.templateId, meetingsUpdateDetailsRequest.templateId) &&
        Objects.equals(this.timezone, meetingsUpdateDetailsRequest.timezone) &&
        Objects.equals(this.topic, meetingsUpdateDetailsRequest.topic) &&
        Objects.equals(this.trackingFields, meetingsUpdateDetailsRequest.trackingFields) &&
        Objects.equals(this.type, meetingsUpdateDetailsRequest.type)&&
        Objects.equals(this.additionalProperties, meetingsUpdateDetailsRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agenda, duration, password, preSchedule, scheduleFor, recurrence, settings, startTime, templateId, timezone, topic, trackingFields, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingsUpdateDetailsRequest {\n");
    sb.append("    agenda: ").append(toIndentedString(agenda)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    preSchedule: ").append(toIndentedString(preSchedule)).append("\n");
    sb.append("    scheduleFor: ").append(toIndentedString(scheduleFor)).append("\n");
    sb.append("    recurrence: ").append(toIndentedString(recurrence)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    trackingFields: ").append(toIndentedString(trackingFields)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agenda");
    openapiFields.add("duration");
    openapiFields.add("password");
    openapiFields.add("pre_schedule");
    openapiFields.add("schedule_for");
    openapiFields.add("recurrence");
    openapiFields.add("settings");
    openapiFields.add("start_time");
    openapiFields.add("template_id");
    openapiFields.add("timezone");
    openapiFields.add("topic");
    openapiFields.add("tracking_fields");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MeetingsUpdateDetailsRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MeetingsUpdateDetailsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingsUpdateDetailsRequest is not found in the empty JSON string", MeetingsUpdateDetailsRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("agenda") != null && !jsonObj.get("agenda").isJsonNull()) && !jsonObj.get("agenda").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agenda` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agenda").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("schedule_for") != null && !jsonObj.get("schedule_for").isJsonNull()) && !jsonObj.get("schedule_for").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule_for` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule_for").toString()));
      }
      // validate the optional field `recurrence`
      if (jsonObj.get("recurrence") != null && !jsonObj.get("recurrence").isJsonNull()) {
        MeetingsUpdateDetailsRequestRecurrence.validateJsonObject(jsonObj.getAsJsonObject("recurrence"));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        MeetingsUpdateDetailsRequestSettings.validateJsonObject(jsonObj.getAsJsonObject("settings"));
      }
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if (jsonObj.get("tracking_fields") != null && !jsonObj.get("tracking_fields").isJsonNull()) {
        JsonArray jsonArraytrackingFields = jsonObj.getAsJsonArray("tracking_fields");
        if (jsonArraytrackingFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracking_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracking_fields` to be an array in the JSON string but got `%s`", jsonObj.get("tracking_fields").toString()));
          }

          // validate the optional field `tracking_fields` (array)
          for (int i = 0; i < jsonArraytrackingFields.size(); i++) {
            MeetingsUpdateDetailsRequestTrackingFieldsInner.validateJsonObject(jsonArraytrackingFields.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingsUpdateDetailsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingsUpdateDetailsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingsUpdateDetailsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingsUpdateDetailsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingsUpdateDetailsRequest>() {
           @Override
           public void write(JsonWriter out, MeetingsUpdateDetailsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingsUpdateDetailsRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MeetingsUpdateDetailsRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MeetingsUpdateDetailsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MeetingsUpdateDetailsRequest
  * @throws IOException if the JSON string is invalid with respect to MeetingsUpdateDetailsRequest
  */
  public static MeetingsUpdateDetailsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingsUpdateDetailsRequest.class);
  }

 /**
  * Convert an instance of MeetingsUpdateDetailsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

