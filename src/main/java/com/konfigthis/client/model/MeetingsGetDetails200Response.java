/*
 * Zoom Meeting API
 * The Zoom Meeting APIs let developers to access information from Zoom. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MeetingsGetDetails200Response
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MeetingsGetDetails200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_HOST_ID = "host_id";
  @SerializedName(SERIALIZED_NAME_HOST_ID)
  private String hostId;

  public static final String SERIALIZED_NAME_DEPT = "dept";
  @SerializedName(SERIALIZED_NAME_DEPT)
  private String dept;

  public static final String SERIALIZED_NAME_PARTICIPANTS_COUNT = "participants_count";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS_COUNT)
  private Integer participantsCount;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_TOTAL_MINUTES = "total_minutes";
  @SerializedName(SERIALIZED_NAME_TOTAL_MINUTES)
  private Integer totalMinutes;

  /**
   * The meeting type:  * &#x60;0&#x60; &amp;mdash; A prescheduled meeting.  * &#x60;1&#x60; &amp;mdash; An instant meeting.  * &#x60;2&#x60; &amp;mdash; A scheduled meeting.  * &#x60;3&#x60; &amp;mdash; A recurring meeting with no fixed time.  * &#x60;4&#x60; &amp;mdash; A [personal meeting room](https://support.zoom.us/hc/en-us/articles/201362843).  * &#x60;7&#x60; &amp;mdash; A [PAC (Personal Audio Conference)](https://support.zoom.us/hc/en-us/articles/205172455-Hosting-a-Personal-Audio-Conference-PAC-meeting) meeting.  * &#x60;8&#x60; &amp;mdash; A recurring meeting with a fixed time.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_7(7),
    
    NUMBER_8(8);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER_EMAIL = "user_email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public MeetingsGetDetails200Response() {
  }

  public MeetingsGetDetails200Response id(Long id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID).
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5638296721", value = "The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID).")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    
    
    
    this.id = id;
  }


  public MeetingsGetDetails200Response uuid(String uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * The meeting&#39;s UUID. You **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) this value if the meeting UUID begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; character.
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4444AAAiAAAAAiAiAiiAii==", value = "The meeting's UUID. You **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) this value if the meeting UUID begins with a `/` character or contains the `//` character.")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    
    
    
    this.uuid = uuid;
  }


  public MeetingsGetDetails200Response duration(Integer duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * The meeting&#39;s duration, in minutes.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60", value = "The meeting's duration, in minutes.")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    
    
    
    this.duration = duration;
  }


  public MeetingsGetDetails200Response startTime(OffsetDateTime startTime) {
    
    
    
    
    this.startTime = startTime;
    return this;
  }

   /**
   * The meeting&#39;s start date and time.
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-13T21:44:51Z", value = "The meeting's start date and time.")

  public OffsetDateTime getStartTime() {
    return startTime;
  }


  public void setStartTime(OffsetDateTime startTime) {
    
    
    
    this.startTime = startTime;
  }


  public MeetingsGetDetails200Response endTime(OffsetDateTime endTime) {
    
    
    
    
    this.endTime = endTime;
    return this;
  }

   /**
   * The meeting&#39;s end date and time.
   * @return endTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-13T23:00:51Z", value = "The meeting's end date and time.")

  public OffsetDateTime getEndTime() {
    return endTime;
  }


  public void setEndTime(OffsetDateTime endTime) {
    
    
    
    this.endTime = endTime;
  }


  public MeetingsGetDetails200Response hostId(String hostId) {
    
    
    
    
    this.hostId = hostId;
    return this;
  }

   /**
   * The host&#39;s ID.
   * @return hostId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "x1yCzABCDEfg23HiJKl4mN", value = "The host's ID.")

  public String getHostId() {
    return hostId;
  }


  public void setHostId(String hostId) {
    
    
    
    this.hostId = hostId;
  }


  public MeetingsGetDetails200Response dept(String dept) {
    
    
    
    
    this.dept = dept;
    return this;
  }

   /**
   * The meeting host&#39;s department.
   * @return dept
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Developers", value = "The meeting host's department.")

  public String getDept() {
    return dept;
  }


  public void setDept(String dept) {
    
    
    
    this.dept = dept;
  }


  public MeetingsGetDetails200Response participantsCount(Integer participantsCount) {
    
    
    
    
    this.participantsCount = participantsCount;
    return this;
  }

   /**
   * The number of meeting participants.
   * @return participantsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "The number of meeting participants.")

  public Integer getParticipantsCount() {
    return participantsCount;
  }


  public void setParticipantsCount(Integer participantsCount) {
    
    
    
    this.participantsCount = participantsCount;
  }


  public MeetingsGetDetails200Response source(String source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Whether the meeting was created directly through Zoom or via an API request:  * If the meeting was created via an OAuth app, this field returns the OAuth app&#39;s name.  * If the meeting was created via JWT or the Zoom Web Portal, this returns the &#x60;Zoom&#x60; value.
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Zoom", value = "Whether the meeting was created directly through Zoom or via an API request:  * If the meeting was created via an OAuth app, this field returns the OAuth app's name.  * If the meeting was created via JWT or the Zoom Web Portal, this returns the `Zoom` value.")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    
    
    
    this.source = source;
  }


  public MeetingsGetDetails200Response topic(String topic) {
    
    
    
    
    this.topic = topic;
    return this;
  }

   /**
   * The meeting&#39;s topic.
   * @return topic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My Meeting", value = "The meeting's topic.")

  public String getTopic() {
    return topic;
  }


  public void setTopic(String topic) {
    
    
    
    this.topic = topic;
  }


  public MeetingsGetDetails200Response totalMinutes(Integer totalMinutes) {
    
    
    
    
    this.totalMinutes = totalMinutes;
    return this;
  }

   /**
   * The total number of minutes attended by the meeting&#39;s host and participants.
   * @return totalMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "55", value = "The total number of minutes attended by the meeting's host and participants.")

  public Integer getTotalMinutes() {
    return totalMinutes;
  }


  public void setTotalMinutes(Integer totalMinutes) {
    
    
    
    this.totalMinutes = totalMinutes;
  }


  public MeetingsGetDetails200Response type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The meeting type:  * &#x60;0&#x60; &amp;mdash; A prescheduled meeting.  * &#x60;1&#x60; &amp;mdash; An instant meeting.  * &#x60;2&#x60; &amp;mdash; A scheduled meeting.  * &#x60;3&#x60; &amp;mdash; A recurring meeting with no fixed time.  * &#x60;4&#x60; &amp;mdash; A [personal meeting room](https://support.zoom.us/hc/en-us/articles/201362843).  * &#x60;7&#x60; &amp;mdash; A [PAC (Personal Audio Conference)](https://support.zoom.us/hc/en-us/articles/205172455-Hosting-a-Personal-Audio-Conference-PAC-meeting) meeting.  * &#x60;8&#x60; &amp;mdash; A recurring meeting with a fixed time.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_1", value = "The meeting type:  * `0` &mdash; A prescheduled meeting.  * `1` &mdash; An instant meeting.  * `2` &mdash; A scheduled meeting.  * `3` &mdash; A recurring meeting with no fixed time.  * `4` &mdash; A [personal meeting room](https://support.zoom.us/hc/en-us/articles/201362843).  * `7` &mdash; A [PAC (Personal Audio Conference)](https://support.zoom.us/hc/en-us/articles/205172455-Hosting-a-Personal-Audio-Conference-PAC-meeting) meeting.  * `8` &mdash; A recurring meeting with a fixed time.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public MeetingsGetDetails200Response userEmail(String userEmail) {
    
    
    
    
    this.userEmail = userEmail;
    return this;
  }

   /**
   * The user&#39;s email address.
   * @return userEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jchill@example.com", value = "The user's email address.")

  public String getUserEmail() {
    return userEmail;
  }


  public void setUserEmail(String userEmail) {
    
    
    
    this.userEmail = userEmail;
  }


  public MeetingsGetDetails200Response userName(String userName) {
    
    
    
    
    this.userName = userName;
    return this;
  }

   /**
   * The user&#39;s display name.
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jill Chill", value = "The user's display name.")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    
    
    
    this.userName = userName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MeetingsGetDetails200Response instance itself
   */
  public MeetingsGetDetails200Response putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingsGetDetails200Response meetingsGetDetails200Response = (MeetingsGetDetails200Response) o;
    return Objects.equals(this.id, meetingsGetDetails200Response.id) &&
        Objects.equals(this.uuid, meetingsGetDetails200Response.uuid) &&
        Objects.equals(this.duration, meetingsGetDetails200Response.duration) &&
        Objects.equals(this.startTime, meetingsGetDetails200Response.startTime) &&
        Objects.equals(this.endTime, meetingsGetDetails200Response.endTime) &&
        Objects.equals(this.hostId, meetingsGetDetails200Response.hostId) &&
        Objects.equals(this.dept, meetingsGetDetails200Response.dept) &&
        Objects.equals(this.participantsCount, meetingsGetDetails200Response.participantsCount) &&
        Objects.equals(this.source, meetingsGetDetails200Response.source) &&
        Objects.equals(this.topic, meetingsGetDetails200Response.topic) &&
        Objects.equals(this.totalMinutes, meetingsGetDetails200Response.totalMinutes) &&
        Objects.equals(this.type, meetingsGetDetails200Response.type) &&
        Objects.equals(this.userEmail, meetingsGetDetails200Response.userEmail) &&
        Objects.equals(this.userName, meetingsGetDetails200Response.userName)&&
        Objects.equals(this.additionalProperties, meetingsGetDetails200Response.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, uuid, duration, startTime, endTime, hostId, dept, participantsCount, source, topic, totalMinutes, type, userEmail, userName, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingsGetDetails200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    dept: ").append(toIndentedString(dept)).append("\n");
    sb.append("    participantsCount: ").append(toIndentedString(participantsCount)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    totalMinutes: ").append(toIndentedString(totalMinutes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("uuid");
    openapiFields.add("duration");
    openapiFields.add("start_time");
    openapiFields.add("end_time");
    openapiFields.add("host_id");
    openapiFields.add("dept");
    openapiFields.add("participants_count");
    openapiFields.add("source");
    openapiFields.add("topic");
    openapiFields.add("total_minutes");
    openapiFields.add("type");
    openapiFields.add("user_email");
    openapiFields.add("user_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MeetingsGetDetails200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MeetingsGetDetails200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingsGetDetails200Response is not found in the empty JSON string", MeetingsGetDetails200Response.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("host_id") != null && !jsonObj.get("host_id").isJsonNull()) && !jsonObj.get("host_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host_id").toString()));
      }
      if ((jsonObj.get("dept") != null && !jsonObj.get("dept").isJsonNull()) && !jsonObj.get("dept").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dept` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dept").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("user_email") != null && !jsonObj.get("user_email").isJsonNull()) && !jsonObj.get("user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_email").toString()));
      }
      if ((jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonNull()) && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingsGetDetails200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingsGetDetails200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingsGetDetails200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingsGetDetails200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingsGetDetails200Response>() {
           @Override
           public void write(JsonWriter out, MeetingsGetDetails200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingsGetDetails200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MeetingsGetDetails200Response instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MeetingsGetDetails200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MeetingsGetDetails200Response
  * @throws IOException if the JSON string is invalid with respect to MeetingsGetDetails200Response
  */
  public static MeetingsGetDetails200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingsGetDetails200Response.class);
  }

 /**
  * Convert an instance of MeetingsGetDetails200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

